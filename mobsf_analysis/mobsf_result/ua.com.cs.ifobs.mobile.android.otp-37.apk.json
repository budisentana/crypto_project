{"version": "v3.4.0 Beta", "title": "Static Analysis", "file_name": "ua.com.cs.ifobs.mobile.android.otp-37.apk", "app_name": "OTP Smart", "app_type": "apk", "size": "31.56MB", "md5": "c4656d42020ca421ffd67b867c2c0ea8", "sha1": "4afd7fa431026474e848628fa66b35478cd8093a", "sha256": "e274a08e39bb0509fee96e2cc7fd46235a9c6121c7f856c47bcb8d95d360f3be", "package_name": "ua.com.cs.ifobs.mobile.android.otp", "main_activity": "ua.com.cs.ifobs.mobile.android.application.common.main.MainActivity", "exported_activities": "['ua.com.cs.ifobs.mobile.android.activity.ApplicationSettingsWebViewActivity', 'ua.com.cs.ifobs.mobile.android.activity.ConnectionSettingsWebViewActivity', 'ua.com.cs.ifobs.mobile.android.activity.PhotoActivity']", "browsable_activities": {"ua.com.cs.ifobs.mobile.android.application.common.main.MainActivity": {"schemes": ["otpua://", "ifobscustom://"], "mime_types": [], "hosts": [], "ports": [], "paths": [], "path_prefixs": [], "path_patterns": [], "browsable": true}}, "activities": ["ua.com.cs.ifobs.mobile.android.application.common.main.MainActivity", "ua.com.cs.ifobs.mobile.android.activity.SettingsActivity", "ua.com.cs.ifobs.mobile.android.activity.GooglePayWrapActivity", "ua.com.cs.ifobs.mobile.android.activity.ApplicationSettingsWebViewActivity", "ua.com.cs.ifobs.mobile.android.activity.ConnectionSettingsWebViewActivity", "ua.com.cs.ifobs.mobile.android.activity.PhotoActivity", "ua.com.cs.ifobs.mobile.android.map.google.GoogleMapExtActivity", "ua.com.cs.ifobs.mobile.android.activity.CardIOWrapperActivity", "ua.com.cs.ifobs.mobile.android.activity.QRScannerActivity", "ua.com.cs.ifobs.mobile.android.map.google.GoogleMapActivity", "ua.com.cs.ifobs.mobile.android.map.common.activity.PoiDetailActivity", "ua.com.cs.ifobs.mobile.android.activity.LoadCertificateActivity", "com.google.android.gms.auth.api.signin.internal.SignInHubActivity", "com.google.android.gms.common.api.GoogleApiActivity", "com.journeyapps.barcodescanner.CaptureActivity", "io.card.payment.CardIOActivity", "io.card.payment.DataEntryActivity"], "receivers": ["ua.com.cs.ifobs.mobile.android.sms.SMSBroadcastReceiver", "com.google.android.gms.measurement.AppMeasurementReceiver", "com.google.android.gms.measurement.AppMeasurementInstallReferrerReceiver", "com.google.firebase.iid.FirebaseInstanceIdReceiver"], "providers": ["androidx.core.content.FileProvider", "com.google.firebase.provider.FirebaseInitProvider"], "services": ["ua.com.cs.ifobs.mobile.android.gcm.GcmIntentService", "ua.com.cs.ifobs.mobile.android.gcm.GcmDispatchService", "com.google.android.gms.auth.api.signin.RevocationBoundService", "com.google.firebase.messaging.FirebaseMessagingService", "com.google.firebase.components.ComponentDiscoveryService", "com.google.android.gms.measurement.AppMeasurementService", "com.google.android.gms.measurement.AppMeasurementJobService", "com.google.firebase.iid.FirebaseInstanceIdService"], "libraries": ["org.apache.http.legacy"], "target_sdk": "29", "max_sdk": "", "min_sdk": "21", "version_name": "47.0", "version_code": "37", "icon_hidden": false, "icon_found": true, "permissions": {"android.permission.INTERNET": {"status": "normal", "info": "full Internet access", "description": "Allows an application to create network sockets."}, "android.permission.ACCESS_NETWORK_STATE": {"status": "normal", "info": "view network status", "description": "Allows an application to view the status of all networks."}, "android.permission.WAKE_LOCK": {"status": "normal", "info": "prevent phone from sleeping", "description": "Allows an application to prevent the phone from going to sleep."}, "android.permission.ACCESS_FINE_LOCATION": {"status": "dangerous", "info": "fine (GPS) location", "description": "Access fine location sources, such as the Global Positioning System on the phone, where available. Malicious applications can use this to determine where you are and may consume additional battery power."}, "com.google.android.c2dm.permission.RECEIVE": {"status": "signature", "info": "C2DM permissions", "description": "Permission for cloud to device messaging."}, "android.permission.ACCESS_COARSE_LOCATION": {"status": "dangerous", "info": "coarse (network-based) location", "description": "Access coarse location sources, such as the mobile network database, to determine an approximate phone location, where available. Malicious applications can use this to determine approximately where you are."}, "android.permission.CALL_PHONE": {"status": "dangerous", "info": "directly call phone numbers", "description": "Allows the application to call phone numbers without your intervention. Malicious applications may cause unexpected calls on your phone bill. Note that this does not allow the application to call emergency numbers."}, "android.permission.READ_PHONE_STATE": {"status": "dangerous", "info": "read phone state and identity", "description": "Allows the application to access the phone features of the device. An application with this permission can determine the phone number and serial number of this phone, whether a call is active, the number that call is connected to and so on."}, "android.permission.READ_CONTACTS": {"status": "dangerous", "info": "read contact data", "description": "Allows an application to read all of the contact (address) data stored on your phone. Malicious applications can use this to send your data to other people."}, "android.permission.CAMERA": {"status": "dangerous", "info": "take pictures and videos", "description": "Allows application to take pictures and videos with the camera. This allows the application to collect images that the camera is seeing at any time."}, "android.permission.READ_EXTERNAL_STORAGE": {"status": "dangerous", "info": "read external storage contents", "description": "Allows an application to read from external storage."}, "android.permission.VIBRATE": {"status": "normal", "info": "control vibrator", "description": "Allows the application to control the vibrator."}, "com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE": {"status": "unknown", "info": "Unknown permission", "description": "Unknown permission from android reference"}, "android.permission.USE_FINGERPRINT": {"status": "normal", "info": "allow use of fingerprint", "description": "This constant was deprecated in API level 28. Applications should request USE_BIOMETRIC instead"}}, "certificate_analysis": {"certificate_info": "APK is signed\nv1 signature: True\nv2 signature: True\nv3 signature: False\nFound 1 unique certificates\nSubject: C=UA, ST=Kharkiv, L=Kharkiv, O=CS LTD, OU=IFOBS, CN=CS Integra Ltd\nSignature Algorithm: rsassa_pkcs1v15\nValid From: 2015-07-20 13:08:19+00:00\nValid To: 2042-12-05 13:08:19+00:00\nIssuer: C=UA, ST=Kharkiv, L=Kharkiv, O=CS LTD, OU=IFOBS, CN=CS Integra Ltd\nSerial Number: 0x19204350\nHash Algorithm: sha256\nmd5: 39013d813b694d8b6c6261fe6ec207af\nsha1: fcf2b95007bf878f85ff68623891238f9196d573\nsha256: 5755104f9956a9d7bf8e932b94c59a959bedce2209fde6da0533585777dc0030\nsha512: 0f66df483bdae3d3da8482e9319f2ec04e7c055c516de2a69b1aecbeb0b0835ede612911f6baa4f562b7bf3b865b188cdb6e3f6fda096b70cf698b5343312f92\nPublicKey Algorithm: rsa\nBit Size: 2048\nFingerprint: 7e175048292dcc2e4ea9d9c29a384d14c58b46d9527a6c024641520303afc90b", "certificate_findings": [["good", "Application is signed with a code signing certificate"], ["warning", "Application is signed with v1 signature scheme, making it vulnerable to Janus vulnerability on Android <7.0"]]}, "manifest_analysis": [{"title": "Application Data can be Backed up<br>[android:allowBackup=true]", "stat": "medium", "desc": "This flag allows anyone to backup your application data via adb. It allows users who have enabled USB debugging to copy application data off of the device.", "name": "Application Data can be Backed up [android:allowBackup=true]", "component": []}, {"title": "<strong>Activity</strong> (ua.com.cs.ifobs.mobile.android.activity.ApplicationSettingsWebViewActivity) is not Protected.<br>An intent-filter exists.", "stat": "high", "desc": "An Activity is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device. The presence of intent-filter indicates that the Activity is explicitly exported.", "name": "is not Protected.An intent-filter exists.", "component": ["Activity", "ua.com.cs.ifobs.mobile.android.activity.ApplicationSettingsWebViewActivity"]}, {"title": "<strong>Activity</strong> (ua.com.cs.ifobs.mobile.android.activity.ConnectionSettingsWebViewActivity) is not Protected.<br>An intent-filter exists.", "stat": "high", "desc": "An Activity is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device. The presence of intent-filter indicates that the Activity is explicitly exported.", "name": "is not Protected.An intent-filter exists.", "component": ["Activity", "ua.com.cs.ifobs.mobile.android.activity.ConnectionSettingsWebViewActivity"]}, {"title": "<strong>Service</strong> (ua.com.cs.ifobs.mobile.android.gcm.GcmIntentService) is not Protected. <br>[android:exported=true]", "stat": "high", "desc": "A Service is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device.", "name": "is not Protected. [android:exported=true]", "component": ["Service", "ua.com.cs.ifobs.mobile.android.gcm.GcmIntentService"]}, {"title": "<strong>Activity</strong> (ua.com.cs.ifobs.mobile.android.activity.PhotoActivity) is not Protected.<br>An intent-filter exists.", "stat": "high", "desc": "An Activity is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device. The presence of intent-filter indicates that the Activity is explicitly exported.", "name": "is not Protected.An intent-filter exists.", "component": ["Activity", "ua.com.cs.ifobs.mobile.android.activity.PhotoActivity"]}, {"title": "<strong>Broadcast Receiver</strong> (ua.com.cs.ifobs.mobile.android.sms.SMSBroadcastReceiver) is not Protected. <br>[android:exported=true]", "stat": "high", "desc": "A Broadcast Receiver is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device.", "name": "is not Protected. [android:exported=true]", "component": ["Broadcast Receiver", "ua.com.cs.ifobs.mobile.android.sms.SMSBroadcastReceiver"]}, {"title": "<strong>Service</strong> (com.google.android.gms.auth.api.signin.RevocationBoundService) is Protected by a permission, but the protection level of the permission should be checked.</br><strong>Permission: </strong>com.google.android.gms.auth.api.signin.permission.REVOCATION_NOTIFICATION <br>[android:exported=true]", "stat": "high", "desc": "A Service is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device. It is protected by a permission which is not defined in the analysed application. As a result, the protection level of the permission should be checked where it is defined. If it is set to normal or dangerous, a malicious application can request and obtain the permission and interact with the component. If it is set to signature, only applications signed with the same certificate can obtain the permission.", "name": "is Protected by a permission, but the protection level of the permission should be checked.[android:exported=true]", "component": ["Service", "com.google.android.gms.auth.api.signin.RevocationBoundService", "<strong>Permission: </strong>com.google.android.gms.auth.api.signin.permission.REVOCATION_NOTIFICATION"]}, {"title": "<strong>Service</strong> (com.google.firebase.messaging.FirebaseMessagingService) is not Protected. <br>[android:exported=true]", "stat": "high", "desc": "A Service is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device.", "name": "is not Protected. [android:exported=true]", "component": ["Service", "com.google.firebase.messaging.FirebaseMessagingService"]}, {"title": "<strong>Broadcast Receiver</strong> (com.google.android.gms.measurement.AppMeasurementInstallReferrerReceiver) is Protected by a permission, but the protection level of the permission should be checked.</br><strong>Permission: </strong>android.permission.INSTALL_PACKAGES <br>[android:exported=true]", "stat": "high", "desc": "A Broadcast Receiver is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device. It is protected by a permission which is not defined in the analysed application. As a result, the protection level of the permission should be checked where it is defined. If it is set to normal or dangerous, a malicious application can request and obtain the permission and interact with the component. If it is set to signature, only applications signed with the same certificate can obtain the permission.", "name": "is Protected by a permission, but the protection level of the permission should be checked.[android:exported=true]", "component": ["Broadcast Receiver", "com.google.android.gms.measurement.AppMeasurementInstallReferrerReceiver", "<strong>Permission: </strong>android.permission.INSTALL_PACKAGES"]}, {"title": "<strong>Broadcast Receiver</strong> (com.google.firebase.iid.FirebaseInstanceIdReceiver) is Protected by a permission, but the protection level of the permission should be checked.</br><strong>Permission: </strong>com.google.android.c2dm.permission.SEND <br>[android:exported=true]", "stat": "high", "desc": "A Broadcast Receiver is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device. It is protected by a permission which is not defined in the analysed application. As a result, the protection level of the permission should be checked where it is defined. If it is set to normal or dangerous, a malicious application can request and obtain the permission and interact with the component. If it is set to signature, only applications signed with the same certificate can obtain the permission.", "name": "is Protected by a permission, but the protection level of the permission should be checked.[android:exported=true]", "component": ["Broadcast Receiver", "com.google.firebase.iid.FirebaseInstanceIdReceiver", "<strong>Permission: </strong>com.google.android.c2dm.permission.SEND"]}, {"title": "<strong>Service</strong> (com.google.firebase.iid.FirebaseInstanceIdService) is not Protected. <br>[android:exported=true]", "stat": "high", "desc": "A Service is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device.", "name": "is not Protected. [android:exported=true]", "component": ["Service", "com.google.firebase.iid.FirebaseInstanceIdService"]}], "network_security": [], "binary_analysis": [{"name": "lib/x86_64/libopencv_imgproc.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": false, "severity": "high", "description": "This shared object does not have a stack canary value added to the stack. Stack canaries are used to detect and prevent exploits from overwriting return address. Use the option -fstack-protector-all to enable stack canaries."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86_64/libcardioRecognizer_tegra2.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86_64/libopencv_core.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": false, "severity": "high", "description": "This shared object does not have a stack canary value added to the stack. Stack canaries are used to detect and prevent exploits from overwriting return address. Use the option -fstack-protector-all to enable stack canaries."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86_64/libcardioDecider.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86_64/libcardioRecognizer.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/armeabi/libcardioDecider.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/armeabi-v7a/libopencv_imgproc.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": false, "severity": "high", "description": "This shared object does not have a stack canary value added to the stack. Stack canaries are used to detect and prevent exploits from overwriting return address. Use the option -fstack-protector-all to enable stack canaries."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/armeabi-v7a/libcardioRecognizer_tegra2.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/armeabi-v7a/libopencv_core.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": false, "severity": "high", "description": "This shared object does not have a stack canary value added to the stack. Stack canaries are used to detect and prevent exploits from overwriting return address. Use the option -fstack-protector-all to enable stack canaries."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/armeabi-v7a/libcardioDecider.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/armeabi-v7a/libcardioRecognizer.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86/libopencv_imgproc.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86/libcardioRecognizer_tegra2.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86/libopencv_core.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86/libcardioDecider.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86/libcardioRecognizer.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/arm64-v8a/libopencv_imgproc.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": false, "severity": "high", "description": "This shared object does not have a stack canary value added to the stack. Stack canaries are used to detect and prevent exploits from overwriting return address. Use the option -fstack-protector-all to enable stack canaries."}, "relocation_readonly": {"relro": "No RELRO", "severity": "high", "description": "This shared object does not have RELRO enabled. The entire GOT (.got and .got.plt both) are writable. Without this compiler flag, buffer overflows on a global variable can overwrite GOT entries. Use the option -z,relro,-z,now to enable full RELRO and only -z,relro to enable partial RELRO."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/arm64-v8a/libcardioRecognizer_tegra2.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "No RELRO", "severity": "high", "description": "This shared object does not have RELRO enabled. The entire GOT (.got and .got.plt both) are writable. Without this compiler flag, buffer overflows on a global variable can overwrite GOT entries. Use the option -z,relro,-z,now to enable full RELRO and only -z,relro to enable partial RELRO."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/arm64-v8a/libopencv_core.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": false, "severity": "high", "description": "This shared object does not have a stack canary value added to the stack. Stack canaries are used to detect and prevent exploits from overwriting return address. Use the option -fstack-protector-all to enable stack canaries."}, "relocation_readonly": {"relro": "No RELRO", "severity": "high", "description": "This shared object does not have RELRO enabled. The entire GOT (.got and .got.plt both) are writable. Without this compiler flag, buffer overflows on a global variable can overwrite GOT entries. Use the option -z,relro,-z,now to enable full RELRO and only -z,relro to enable partial RELRO."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/arm64-v8a/libcardioDecider.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "No RELRO", "severity": "high", "description": "This shared object does not have RELRO enabled. The entire GOT (.got and .got.plt both) are writable. Without this compiler flag, buffer overflows on a global variable can overwrite GOT entries. Use the option -z,relro,-z,now to enable full RELRO and only -z,relro to enable partial RELRO."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/arm64-v8a/libcardioRecognizer.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "No RELRO", "severity": "high", "description": "This shared object does not have RELRO enabled. The entire GOT (.got and .got.plt both) are writable. Without this compiler flag, buffer overflows on a global variable can overwrite GOT entries. Use the option -z,relro,-z,now to enable full RELRO and only -z,relro to enable partial RELRO."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/mips/libcardioDecider.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "No RELRO", "severity": "high", "description": "This shared object does not have RELRO enabled. The entire GOT (.got and .got.plt both) are writable. Without this compiler flag, buffer overflows on a global variable can overwrite GOT entries. Use the option -z,relro,-z,now to enable full RELRO and only -z,relro to enable partial RELRO."}, "rpath": {"rpath": false, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": false, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}], "file_analysis": [], "android_api": {"api_java_reflection": {"files": {"l/h/c/d0/z/j.java": "3", "com/cs/crypto/commons/helpers/LogHelper.java": "3,29,18", "l/h/a/a/j/a/s1.java": "66", "l/h/a/a/h/i/d2.java": "5,152", "t/c0/k/l.java": "4", "l/h/a/a/h/i/u3.java": "18", "org/osmdroid/util/ResourceProxyImpl.java": "23", "l/e/a/o/d.java": "15", "l/h/a/a/h/i/z2.java": "14", "l/h/c/d0/w.java": "3", "l/h/c/d0/z/i.java": "3", "w/m/d/b.java": "11", "l/h/c/d.java": "3", "kotlinx/coroutines/CommonPool.java": "67,3", "kotlin/jvm/internal/ClassReference.java": "6", "l/h/a/a/h/i/o1.java": "11", "moxy/locators/PresenterBinderLocator.java": "20", "kotlinx/coroutines/internal/FastServiceLoader.java": "203,37,44,195", "org/simpleframework/xml/core/GetPart.java": "4", "org/simpleframework/xml/core/ClassScanner.java": "4", "org/simpleframework/xml/core/MethodPart.java": "4", "org/simpleframework/xml/core/MethodName.java": "3", "kotlinx/coroutines/internal/ConcurrentKt.java": "3", "l/h/b/b.java": "226,299,25", "kotlinx/coroutines/internal/FastServiceLoaderKt.java": "15", "l/h/a/a/h/g/b.java": "22", "l/h/c/d0/f.java": "22,6,5", "l/h/c/d0/v.java": "3", "l/h/c/b.java": "3", "l/h/a/a/h/i/m3.java": "3", "com/samsung/android/sdk/pass/support/SdkSupporter.java": "14,5", "org/simpleframework/xml/core/DetailScanner.java": "5,6", "l/h/a/a/h/i/t1.java": "12", "com/csltd/pkcs11lib/PKCS11Provider.java": "5", "org/simpleframework/xml/core/LabelExtractor.java": "5", "org/simpleframework/xml/core/Reflector.java": "5,7", "l/h/a/a/e/d.java": "4", "l/h/a/a/h/i/b2.java": "31", "kotlinx/coroutines/android/AndroidExceptionPreHandler.java": "6", "org/kobjects/util/ChainedRuntimeException.java": "11", "l/h/a/a/j/a/d4.java": "146", "a/a/a/a/a/a/b/a/o1/i.java": "36,8", "kotlin/coroutines/jvm/internal/DebugMetadataKt.java": "4", "io/card/payment/CardIOActivity.java": "526", "l/h/a/a/h/i/r3.java": "12", "org/simpleframework/xml/core/MethodDetail.java": "4", "org/simpleframework/xml/core/MethodPartFactory.java": "4", "u/h.java": "9", "com/daimajia/swipe/SwipeLayout.java": "21", "org/simpleframework/xml/core/Function.java": "3", "org/osmdroid/DefaultResourceProxyImpl.java": "12", "org/simpleframework/xml/core/FieldDetail.java": "4", "v/b/a/l.java": "3", "v/b/a/m.java": "3", "l/h/a/a/d/l/t/b.java": "52,51", "w/m/b/h.java": "4", "org/osmdroid/views/MapView.java": "19", "kotlin/internal/PlatformImplementations.java": "3", "t/c0/f.java": "4", "kotlin/jvm/internal/Intrinsics.java": "241,39", "com/cs/crypto/commons/helpers/json/JSONObject.java": "6,7", "l/e/a/c.java": "189", "org/simpleframework/xml/core/AnnotationHandler.java": "5", "l/h/c/c.java": "4", "com/github/ajalt/reprint/core/ReprintInternal.java": "76", "w/o/p.java": "52", "org/simpleframework/xml/core/Comparer.java": "4", "l/h/a/a/f/a.java": "6", "l/h/a/a/h/i/r4.java": "3", "kotlinx/coroutines/internal/StackTraceRecoveryKt.java": "43,32", "com/samsung/android/sdk/pass/SpassFingerprint.java": "401,412,387,381", "org/simpleframework/xml/core/FieldContact.java": "4", "v/d/e/f.java": "3", "org/simpleframework/xml/core/MethodScanner.java": "4", "l/h/a/a/h/i/z3.java": "20,414", "t/c0/n/a.java": "4", "com/samsung/android/sdk/pass/support/v1/FingerprintManagerProxyFactory.java": "8,74", "org/xmlpull/v1/XmlPullParserFactory.java": "157", "kotlinx/coroutines/internal/ExceptionsConstuctorKt.java": "4", "l/h/a/a/h/i/q4.java": "3", "l/h/a/a/h/i/g3.java": "12", "v/c/a/a/a.java": "5", "kotlin/coroutines/jvm/internal/ModuleNameRetriever.java": "3", "kotlin/jvm/internal/Reflection.java": "31", "a/a/a/a/a/a/a/g1/a.java": "39,28", "org/simpleframework/xml/core/SetPart.java": "4", "org/simpleframework/xml/core/FieldScanner.java": "4", "l/h/c/d0/u.java": "3", "t/c0/g.java": "253,4,255,247,255,264,326,101,7,250,254", "l/h/a/a/h/i/v0.java": "19,13", "moxy/locators/ViewStateLocator.java": "10", "l/h/a/a/h/i/p1.java": "44", "com/cs/crypto/commons/CrypterFactory.java": "53", "kotlin/internal/PlatformImplementationsKt.java": "61,80,42,25,24,79,43,62", "org/simpleframework/xml/core/SignatureScanner.java": "5", "l/h/a/a/d/l/b.java": "225"}, "metadata": {"id": "api_java_reflection", "description": "Java Reflection", "type": "RegexOr", "pattern": ["java\\.lang\\.reflect\\.Method", "java\\.lang\\.reflect\\.Field", "Class\\.forName"], "input_case": "exact", "severity": "info"}}, "api_local_file_io": {"files": {"l/h/a/a/j/a/s1.java": "509", "a/a/a/a/a/a/i/a.java": "52,18", "l/h/a/a/j/a/a0.java": "85,80", "a/a/a/a/a/a/e/f/e.java": "83", "org/osmdroid/tileprovider/util/CloudmadeUtil.java": "26", "ua/com/cs/ifobs/mobile/android/plugin/MapPlugin.java": "122,197,107,139", "l/h/a/a/j/a/e0.java": "32", "l/h/a/a/a/a/c.java": "16", "a/a/a/a/a/a/l/d.java": "67,70", "l/j/a/e.java": "91", "l/a/a/v/d.java": "62", "l/h/b/b.java": "181", "ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "548", "a/a/a/a/a/a/b/a/r1/e0.java": "510,504,179,498", "a/a/a/a/a/a/c/v.java": "24", "l/h/a/a/j/a/p.java": "104,94", "ua/com/cs/ifobs/mobile/android/activity/ConnectionSettingsWebViewActivity.java": "72,72", "l/h/a/a/j/a/h2.java": "139", "ua/com/cs/ifobs/mobile/android/map/common/utils/AutoCompleteOnPreferences.java": "31", "l/h/b/g/w0.java": "243,253,278", "l/h/b/g/y.java": "27", "ua/com/cs/ifobs/mobile/android/map/google/GoogleMapActivity.java": "188", "org/osmdroid/tileprovider/modules/DatabaseFileArchive.java": "23", "l/h/a/a/b/a/h/b/a.java": "33", "l/h/a/a/j/a/d0.java": "34", "a/a/a/a/a/a/b/a/e1/d.java": "39,56", "l/h/a/a/j/a/t0.java": "159,186,123,151,117", "k/a/a/e.java": "27", "ua/com/cs/ifobs/mobile/android/application/IfobsApplication.java": "130,124", "ua/com/cs/ifobs/mobile/android/activity/ApplicationSettingsWebViewActivity.java": "58", "l/a/a/v/c.java": "41,43", "l/e/a/m/n/k.java": "106", "l/h/a/a/j/a/f0.java": "24", "a/a/a/a/a/a/a/o.java": "40,25,94,26", "l/a/a/v/b.java": "39", "l/h/a/a/j/a/c0.java": "33", "l/h/b/g/o0.java": "42", "a/a/a/a/a/a/a/f0.java": "362,317,318,88,122,46,365", "org/osmdroid/tileprovider/modules/MapTileFileStorageProviderBase.java": "49"}, "metadata": {"id": "api_local_file_io", "description": "Local File I/O Operations", "type": "RegexOr", "pattern": ["OpenFileOutput", "getSharedPreferences", "SharedPreferences\\.Editor", "getCacheDir", "getExternalStorageState", "openOrCreateDatabase"], "input_case": "exact", "severity": "info"}}, "api_http_connection": {"files": {"org/ksoap2/transport/ServiceConnectionSE.java": "26,37,32,115,22,21,109,113,14,120,72,22,58,87,42,117,92,77,14,113,52,111,27,119,5,111,47,27,97,82,118", "org/ksoap2/transport/OkHttpServiceConnectionSE.java": "129,127,51,128,41,126,31,46,76,26,86,96,101,25,18,18,5,26,91,36,56,81,124,62,30,31", "com/cs/crypto/commons/helpers/CertificateHelper.java": "32,90,88,101,102,103,89,91,262,262,88,262,90,104,101,103", "l/a/a/v/d.java": "39,9,41,39,39", "l/h/a/a/a/a/b.java": "32,32,32,44,6", "org/osmdroid/contributor/OSMUploader.java": "120,9,149,120,145,131,120", "l/h/a/a/j/a/w.java": "87,91,7,69,117,171,44,113", "com/cs/crypto/commons/helpers/HTTPUploadHelper.java": "217,210,27,217,232,16,45,45,54,217,45", "l/h/a/a/j/a/s.java": "54,9,53,57,54,55,58,60,68,75,23,55,60,60", "l/e/a/m/m/j.java": "27,9,77,87,77,59,61,95", "t/c0/l/a.java": "48,586,465,297,585,496,542,431,192,118,236,241,618,236,493,619,118,187,240,253,242,119,225,238,617,442,585,493,204,484,623,8,426,239,617,543,574,245"}, "metadata": {"id": "api_http_connection", "description": "HTTP Connection", "type": "RegexAnd", "pattern": ["HttpURLConnection|org\\.apache\\.http", "openConnection|connect|HttpRequest"], "input_case": "exact", "severity": "info"}}, "api_start_activity": {"files": {"a/a/a/a/a/a/b/a/m0.java": "80", "a/a/a/a/a/a/b/a/m1/a.java": "41", "a/a/a/a/a/a/b/a/b0.java": "46,41", "a/a/a/a/a/a/a/b0.java": "37", "a/a/a/a/a/a/b/a/l1/f.java": "209", "ua/com/cs/ifobs/mobile/android/activity/SettingsActivity.java": "73", "ua/com/cs/ifobs/mobile/android/plugin/MapPlugin.java": "220", "a/a/a/a/a/a/b/a/o1/c.java": "25,23", "a/a/a/a/a/a/a/j.java": "698,116", "ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "742,636,702,974", "l/h/a/a/e/k.java": "22", "l/h/a/a/d/i/l/h.java": "11", "ua/com/cs/ifobs/mobile/android/activity/LoadCertificateActivity.java": "54", "a/a/a/a/a/a/m/i/c0.java": "20", "ua/com/cs/ifobs/mobile/android/activity/GooglePayWrapActivity.java": "678", "a/a/a/a/a/a/b/a/q1/p.java": "37", "a/a/a/a/a/a/b/a/k0.java": "72,77,84,88,90", "l/h/a/a/d/l/y.java": "23", "ua/com/cs/ifobs/mobile/android/activity/ConnectionSettingsWebViewActivity.java": "109", "a/a/a/a/a/a/e/f/f/g0.java": "44", "a/a/a/a/a/a/b/a/m1/k.java": "41", "l/h/a/a/d/i/l/b2.java": "28", "io/card/payment/CardIOActivity.java": "186", "a/a/a/a/a/a/b/a/r1/p0.java": "39", "ua/com/cs/ifobs/mobile/android/activity/QRScannerActivity.java": "48", "a/a/a/a/a/a/b/a/m1/c.java": "40", "ua/com/cs/ifobs/mobile/android/activity/PhotoActivity.java": "45,25", "a/a/a/a/a/a/m/h/a/c.java": "469,109", "l/h/a/a/i/i/j.java": "43", "a/a/a/a/a/a/b/a/r.java": "47", "a/a/a/a/a/a/e/f/h/a.java": "29", "ua/com/cs/ifobs/mobile/android/map/google/GoogleMapActivity.java": "248,376", "a/a/a/a/a/a/e/f/f/x.java": "40", "ua/com/cs/ifobs/mobile/android/activity/ApplicationSettingsWebViewActivity.java": "82,138", "l/h/a/a/d/l/x.java": "23", "a/a/a/a/a/a/e/f/h/b.java": "25", "ua/com/cs/ifobs/mobile/android/application/common/AbstractActivity.java": "43", "a/a/a/a/a/a/c/x.java": "21", "ua/com/cs/ifobs/mobile/android/map/google/GoogleMapExtActivity.java": "335", "ua/com/cs/ifobs/mobile/android/activity/CardIOWrapperActivity.java": "79", "a/a/a/a/a/a/l/f.java": "35,56", "ua/com/cs/ifobs/mobile/android/gcm/GcmDispatchService.java": "83,95,107", "a/a/a/a/a/a/n/g/f.java": "339", "a/a/a/a/a/a/m/h/c/b.java": "20"}, "metadata": {"id": "api_start_activity", "description": "Starting Activity", "type": "RegexOr", "pattern": ["startActivity\\(", "startActivityForResult\\("], "input_case": "exact", "severity": "info"}}, "api_ipc": {"files": {"a/a/a/a/a/a/b/a/m0.java": "28,28,5,80", "a/a/a/a/a/a/c/r.java": "56", "l/h/b/g/x.java": "25,22,4,25,20,24,24", "a/a/a/a/a/a/b/a/m1/a.java": "37,37,6", "l/h/a/a/h/h/d.java": "3,6", "l/h/a/a/d/l/t/a.java": "4,230,236", "l/h/a/a/k/b/g.java": "3,11", "l/h/a/a/h/c/b.java": "4,13", "a/a/a/a/a/a/b/a/b0.java": "39,7,39,46", "l/h/a/a/d/v.java": "3,37", "l/h/a/a/a/a/a.java": "4,168,168", "l/h/a/a/h/j/z.java": "5,23", "l/h/a/a/d/l/h0.java": "5,19", "a/a/a/a/a/a/a/b0.java": "4,34,34", "com/journeyapps/barcodescanner/CaptureActivity.java": "4,149,39,39,5", "a/a/a/a/a/a/b/a/l1/f.java": "194,194,10", "l/h/a/a/d/i/n.java": "3,34,26,15,15,26,26", "l/h/a/a/i/i/d0.java": "4,15,48", "l/h/a/a/h/h/h.java": "3,7", "l/h/a/a/e/f.java": "34,4,26", "ua/com/cs/ifobs/mobile/android/activity/SettingsActivity.java": "78,64,15,17", "l/h/b/g/q.java": "71,63,4,66,65,66,71,63,65", "l/h/a/a/d/l/v.java": "4,16", "l/h/a/a/d/i/l/z1.java": "72,29,5,3", "l/h/b/g/g.java": "85,136,7,85,5", "l/h/a/a/i/j/g.java": "3,16", "l/h/a/a/i/i/h0.java": "11,4", "l/h/a/a/b/a/g/b.java": "27,41,3,27,27,15,15", "l/h/a/a/d/l/k0.java": "3,21,34,40,20,32,39,40,34,21", "l/h/b/g/l.java": "3,15", "l/j/a/e.java": "66,6,100,137", "a/a/a/a/a/a/b/a/o1/c.java": "23,4,25", "l/h/a/a/d/i/l/l2.java": "414,389,389,408,3,409,413,408", "a/a/a/a/a/a/a/j.java": "114,698,25,114", "l/h/a/a/d/l/q0.java": "11,3", "a/a/a/a/a/a/c/t.java": "56", "l/h/a/a/i/i/x.java": "4,11", "l/h/b/b.java": "9,8,158,341", "ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "633,695,1051,695,974,702,1049,416,478,287,1048,742,696,681,1046,287,633,1050,1052,1047,34", "l/h/a/a/e/k.java": "13,15,5", "l/h/a/a/d/l/k.java": "16,4,29", "ua/com/cs/ifobs/mobile/android/rpc/handler/platform/SubscribeNetworkHandler.java": "59,59,5", "l/h/a/a/k/b/b.java": "3,27,27,15", "l/h/a/a/d/i/l/h.java": "4,11", "l/h/a/a/b/a/d/d.java": "20,3,56,20,43,43,43", "ua/com/cs/ifobs/mobile/android/gcm/GcmIntentService.java": "202,10,38,193,188,230,125,104,193,160,188,230,12,235,212,239,181,181,102", "ua/com/cs/ifobs/mobile/android/activity/LoadCertificateActivity.java": "97,11", "a/a/a/a/a/a/m/i/c0.java": "20,4", "ua/com/cs/ifobs/mobile/android/activity/GooglePayWrapActivity.java": "61,11,763,684,752,726,61", "l/h/b/g/m0.java": "3,12", "a/a/a/a/a/a/b/a/q1/p.java": "34,9,34", "l/h/a/a/d/i/a.java": "81,5", "a/a/a/a/a/a/h/l0.java": "12,10,3", "a/a/a/a/a/a/b/a/k0.java": "86,86,77,70,70,90,10,84", "l/h/b/g/w.java": "3,34,33,34,45,45", "l/h/a/a/h/f/a.java": "3,10,18,13", "l/h/a/a/j/a/o3.java": "560,8", "l/h/a/a/i/i/c0.java": "61,76,101,43,25,15,3", "l/h/a/a/d/l/y.java": "21,3,9,13", "l/h/a/a/f/h.java": "3,10", "l/h/a/a/d/c.java": "4,23", "l/h/a/a/j/a/n.java": "4,30", "l/h/a/a/d/l/n.java": "10,16,3,12", "a/a/a/a/a/a/e/g/b.java": "3738,3740,3739,3742,3741,3738,289", "ua/com/cs/ifobs/mobile/android/activity/ConnectionSettingsWebViewActivity.java": "109,10,84,11", "a/a/a/a/a/a/e/f/f/g0.java": "44,9", "ua/com/cs/ifobs/mobile/android/application/common/AbstractIntentService.java": "5,6,5,3", "l/h/a/a/h/b/d.java": "10,3,17,13", "ua/com/cs/ifobs/mobile/android/sms/SMSBroadcastReceiver.java": "38,7,38,25", "a/a/a/a/a/a/m/h/c/d.java": "4,7", "l/h/a/a/i/j/e.java": "17,3", "l/h/a/a/h/i/q2.java": "4,8", "a/a/a/a/a/a/b/a/m1/k.java": "37,37,6", "l/h/a/a/e/d.java": "3,21", "l/h/d/q/a/f.java": "44,5", "l/h/a/a/d/i/l/g2.java": "228,224,3", "l/h/b/g/i0.java": "81,41,55,21,90,68,85,31,44,67,40,37,102,107,93,7,49,5,36,62", "l/h/a/a/h/f/b.java": "4,13", "l/h/a/a/j/a/h2.java": "5,204,208,203,203,203,208,204", "l/h/a/a/h/b/a.java": "4,13", "l/h/b/g/a0.java": "103,76,73,4,73,5", "l/h/a/a/j/a/g0.java": "56,37,44,56,5,45,49,45,44,37", "l/h/b/g/v.java": "5,105,118,3,116,105,24,116", "l/h/a/a/i/j/v.java": "14,3", "ua/com/cs/ifobs/mobile/android/rpc/handler/platform/SubscribeNetworkHandler$networkChangeReceiver$1.java": "13,5,13,24", "l/h/a/a/h/e/a.java": "3,10,18,13", "io/card/payment/CardIOActivity.java": "311,449,579,306,311,129,580,306,139,538,438,523,139,448,227,6,436,490,184,579,437,496,131,508", "l/h/a/a/h/i/y.java": "4,13", "l/h/a/a/e/a.java": "4,52", "l/h/a/a/h/c/d.java": "29,5", "l/h/a/a/h/j/a.java": "3,10,18,13", "l/h/b/g/e0.java": "4,12,17", "l/h/a/a/d/l/u/k.java": "3,9", "l/h/a/a/d/r.java": "26,34,15,26,15,26,3", "l/h/a/a/h/a/d.java": "10,3,28,13", "a/a/a/a/a/a/b/a/r1/p0.java": "36,5,36", "l/h/a/a/h/i/x.java": "3,10,18,13", "l/h/a/a/j/a/h.java": "3,15", "l/h/a/a/d/l/h.java": "5,35,31,33", "l/h/a/a/d/l/s.java": "14,3", "ua/com/cs/ifobs/mobile/android/activity/QRScannerActivity.java": "48,9", "l/h/a/a/j/a/d3.java": "4,11", "a/a/a/a/a/a/b/a/m1/c.java": "36,36,6", "l/h/a/a/d/l/r.java": "35,4", "a/a/a/a/a/a/b/a/b1/e.java": "135,125,135,142,13,78,100,142,125,138,11", "l/h/a/a/h/h/a.java": "3,10,18,13", "l/h/a/a/i/j/k.java": "3,18", "l/h/a/a/i/i/s.java": "3,11", "ua/com/cs/ifobs/mobile/android/activity/PhotoActivity.java": "34,32,32,5,33,56,34,69", "a/a/a/a/a/a/m/h/a/c.java": "443,461,412,466,466,103,454,348,343,346,456,350,354,359,15,414,359,462,412,350", "l/h/a/a/i/i/j.java": "39,4,37,37", "l/h/a/a/j/a/k3.java": "49,5,51,49,7,48", "l/h/a/a/h/e/b.java": "4,15", "l/h/b/i/d.java": "38,5", "l/h/a/a/h/j/b0.java": "34,5,49,38,44,38,4,27,42,6,34,42", "a/a/a/a/a/a/b/a/f1/a.java": "101,116,116,94,119,73,101,13,123,123,11", "l/h/a/a/d/l/t/b.java": "24,1985,367,1319,10", "a/a/a/a/a/a/c/s.java": "132", "l/h/a/a/d/l/n0.java": "3,9", "l/h/a/a/i/i/a0.java": "5,37,37", "l/h/b/g/u0.java": "3,11,9", "a/a/a/a/a/a/b/a/r.java": "45,6,45", "a/a/a/a/a/a/e/f/h/a.java": "3,29", "a/a/a/a/a/a/l/g.java": "6,49", "l/h/a/a/i/i/v.java": "3,7", "a/a/a/a/a/a/e/f/f/x.java": "40,11", "p/a/a/j.java": "3,123,123", "l/h/a/a/d/t.java": "4,50", "l/h/d/q/a/d.java": "3,40", "l/h/a/a/d/l/d0.java": "3,15", "l/h/b/g/f0.java": "3,10,12,24", "l/h/a/a/i/i/u.java": "19,3", "l/h/a/a/h/j/o.java": "4,13", "l/h/a/a/k/b/a.java": "117,6", "l/j/a/f.java": "3,17,17", "l/h/a/a/d/o/a.java": "5,41,34", "l/h/a/a/j/a/h0.java": "23,5", "ua/com/cs/ifobs/mobile/android/application/IfobsApplication.java": "10,72,71", "ua/com/cs/ifobs/mobile/android/activity/ApplicationSettingsWebViewActivity.java": "79,12,79,41,14,87,43", "l/h/a/a/h/h/e.java": "4,13", "l/h/a/a/h/d/d.java": "26,3,26,15,30,26,15", "l/h/a/a/d/l/u/h.java": "4,17", "com/samsung/android/sdk/pass/SpassFingerprint.java": "7,636,633,13,92,265,265", "l/h/a/a/j/a/x.java": "5,40", "l/h/a/a/d/l/x.java": "13,21,4,9", "a/a/a/a/a/a/e/f/h/b.java": "22,6,22", "l/h/a/a/j/a/c2.java": "32,6,32", "ua/com/cs/ifobs/mobile/android/application/common/AbstractActivity.java": "8,40,40", "l/h/a/a/h/d/g.java": "15,11,3,9", "l/h/b/g/g0.java": "27,26,19,20", "l/h/a/a/i/i/y.java": "3,9", "l/h/a/a/h/i/q1.java": "3,7", "a/a/a/a/a/a/b/a/e1/r.java": "113,113,90,106,13,90,11", "a/a/a/a/a/a/e/g/a.java": "23,66,66", "l/h/a/a/i/i/p.java": "3,19", "l/h/a/a/h/b/g.java": "4,22", "l/h/a/a/d/i/l/e.java": "564,551,561,558,551,554,5,558,7,556", "l/e/a/n/e.java": "97,30,6,7", "l/h/a/a/h/h/i.java": "3,8", "l/h/a/a/d/l/p0.java": "8,3", "a/a/a/a/a/a/c/x.java": "18,3,18", "ua/com/cs/ifobs/mobile/android/activity/CardIOWrapperActivity.java": "30,20,76,20,76,5", "l/h/a/a/d/a.java": "21,17,5,30,15", "l/h/a/a/b/a/h/b/e.java": "84,5,79,7,82,94,84", "a/a/a/a/a/a/m/h/c/a.java": "11,5,13,15", "l/h/a/a/i/i/w.java": "12,4", "l/h/a/a/j/a/t2.java": "83,7", "l/h/a/a/b/a/h/b/o.java": "10,3", "l/h/a/a/h/h/k.java": "3,7", "io/card/payment/CardScanner.java": "114,470,470,114,471,3", "l/h/b/g/b0.java": "5,20", "l/h/a/a/j/a/j0.java": "38,48,48,6", "l/h/a/a/d/l/j0.java": "53,6,19", "l/h/a/a/j/a/a3.java": "3,24,13,11", "l/h/a/a/d/l/m.java": "32,4", "l/h/d/q/a/e.java": "3,39,15", "a/a/a/a/a/a/l/f.java": "44,7,45,32,32,44,35", "l/h/a/a/h/c/g.java": "3,6", "l/h/a/a/i/i/g0.java": "12,4", "org/osmdroid/tileprovider/IRegisterReceiver.java": "5,8,8,4", "l/h/a/a/j/a/z2.java": "4,20,29", "com/samsung/android/sdk/pass/support/IFingerprintManagerProxy.java": "12,40,6,26,46", "org/osmdroid/tileprovider/util/SimpleRegisterReceiver.java": "6,5,17,17", "l/h/a/a/h/h/l.java": "3,8", "l/h/a/a/j/a/m0.java": "5,8", "l/h/a/a/h/c/a.java": "17,9,3,12", "org/osmdroid/tileprovider/modules/MapTileFileStorageProviderBase.java": "6,5,39,39,23", "ua/com/cs/ifobs/mobile/android/gcm/GcmDispatchService.java": "13,80,80,138,5,93,21,111,98,138", "l/h/a/a/d/b0.java": "3,15", "l/h/a/a/f/f.java": "3,10", "l/h/b/g/d0.java": "9,3,13,10,13", "l/h/a/a/d/b.java": "64,148,64,198,74,221,221,178,70,192,224,11,178,72,224,192,219,72,15,14", "io/card/payment/DataEntryActivity.java": "311,252,5,224,228,188,233,312,528,426,189,253,186,459,186,313", "l/h/a/a/h/d/e.java": "6,53", "l/h/a/a/h/j/w.java": "8,3", "a/a/a/a/a/a/n/g/f.java": "337,14,337", "a/a/a/a/a/a/m/h/c/b.java": "4,20", "l/h/a/a/h/h/c.java": "3,7", "l/h/a/a/d/l/b0.java": "3,11", "l/h/a/a/e/b.java": "12,3,21", "l/h/b/g/h0.java": "17,18", "l/h/a/a/d/l/b.java": "163,171,410,260,219,163,12,413,169,751,219,363,260,344,262,259,169,4,169,7,778", "l/h/a/a/h/a/c.java": "4,8"}, "metadata": {"id": "api_ipc", "description": "Inter Process Communication", "type": "RegexOr", "pattern": ["IRemoteService", "IRemoteService\\.Stub", "IBinder", "Intent"], "input_case": "exact", "severity": "info"}}, "api_crypto": {"files": {"A/A/L/C.java": "4", "a/a/a/a/a/a/g/a.java": "6,5", "A/A/F/A/E.java": "17,15,16,18,14", "A/A/L/D.java": "4", "a/a/a/a/a/a/a/i.java": "9,7,8", "A/A/L/B.java": "4", "k/a/a/e.java": "14,12,13", "A/A/L/A.java": "4", "a/a/a/a/a/a/n/g/f.java": "33"}, "metadata": {"id": "api_crypto", "description": "Crypto", "type": "RegexOr", "pattern": ["javax\\.crypto", "kalium\\.crypto", "bouncycastle\\.crypto"], "input_case": "exact", "severity": "info"}}, "api_get_system_service": {"files": {"l/h/a/a/d/i/l/y.java": "25", "l/k/a/f.java": "21", "l/h/a/a/d/f.java": "206", "org/osmdroid/tileprovider/modules/NetworkAvailabliltyCheck.java": "11", "ua/com/cs/ifobs/mobile/android/activity/SettingsActivity.java": "64", "a/a/a/a/a/a/a/a/b.java": "179", "l/j/a/e.java": "169", "a/a/a/a/a/a/d/g.java": "64", "a/a/a/a/a/a/a/j.java": "438,601,694,584", "com/journeyapps/barcodescanner/CameraPreview.java": "250,367", "ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "281,490", "ua/com/cs/ifobs/mobile/android/rpc/handler/platform/SubscribeNetworkHandler.java": "52", "org/osmdroid/views/overlay/compass/InternalCompassOrientationProvider.java": "15", "ua/com/cs/ifobs/mobile/android/gcm/GcmIntentService.java": "189,231", "org/osmdroid/views/overlay/mylocation/GpsMyLocationProvider.java": "19", "l/h/a/a/j/a/o3.java": "621", "a/a/a/a/a/a/m/h/b/a.java": "21", "ua/com/cs/ifobs/mobile/android/activity/ConnectionSettingsWebViewActivity.java": "84", "com/github/ajalt/reprint/module/marshmallow/MarshmallowReprintModule.java": "100", "l/h/b/g/a0.java": "87,28", "a/a/a/a/a/a/b/a/o1/i.java": "34,36", "l/j/a/q/e.java": "414,395", "l/h/a/a/j/a/s.java": "75", "a/a/a/a/a/a/b/a/b1/e.java": "82", "a/a/a/a/a/a/m/h/a/c.java": "434", "l/h/a/a/j/a/k3.java": "12,57", "a/a/a/a/a/a/b/a/f1/a.java": "76", "l/h/a/a/d/l/t/b.java": "186", "ua/com/cs/ifobs/mobile/android/map/google/GoogleMapActivity.java": "341,518", "a/a/a/a/a/a/e/f/j/b/a.java": "28", "ua/com/cs/ifobs/mobile/android/plugin/EventBusPlugin.java": "15", "ua/com/cs/ifobs/mobile/android/activity/ApplicationSettingsWebViewActivity.java": "43", "l/h/a/b/c0/m.java": "16", "a/a/a/a/a/a/b/a/o.java": "68,65", "a/a/a/a/a/a/b/a/e1/r.java": "115,94", "l/e/a/m/n/b0/j.java": "34", "org/osmdroid/views/overlay/compass/CompassOverlay.java": "290", "l/e/a/n/e.java": "72", "a/a/a/a/a/a/d/h.java": "47", "org/osmdroid/views/overlay/ScaleBarOverlay.java": "447", "a/a/a/a/a/a/e/f/j/a/a.java": "433", "l/k/a/c.java": "81", "ua/com/cs/ifobs/mobile/android/activity/DrawerActivity.java": "109", "a/a/a/a/a/a/b/a/q1/g0/a.java": "21", "io/card/payment/CardScanner.java": "407,198", "a/a/a/a/a/a/a/g1/a.java": "26,37", "a/a/a/a/a/a/m/h/c/c.java": "44", "org/osmdroid/views/overlay/MyLocationOverlay.java": "610,611,609", "l/h/a/b/l0/h.java": "304", "l/h/a/a/d/b.java": "213"}, "metadata": {"id": "api_get_system_service", "description": "Get System Service", "type": "Regex", "pattern": "getSystemService", "input_case": "exact", "severity": "info"}}, "api_base64_encode": {"files": {"k/a/a/b.java": "128,4", "a/a/a/a/a/a/g/a.java": "3,55", "a/a/a/a/a/a/a/i.java": "3,36", "a/a/a/a/a/a/b/a/n1/g.java": "8,49", "l/h/b/g/w0.java": "124,6", "l/h/a/a/d/l/t/b.java": "30,1982", "a/a/a/a/a/a/l/a.java": "8,53", "k/a/a/e.java": "42,7", "a/a/a/a/a/a/b/a/q1/d0.java": "27,6"}, "metadata": {"id": "api_base64_encode", "description": "Base64 Encode", "type": "RegexAndOr", "pattern": ["android\\.util\\.Base64", ["\\.encodeToString", "\\.encode"]], "input_case": "exact", "severity": "info"}}, "api_base64_decode": {"files": {"k/a/a/b.java": "4,138", "a/a/a/a/a/a/g/a.java": "3,33", "a/a/a/a/a/a/b/a/q1/f0/i.java": "7,86", "a/a/a/a/a/a/a/i.java": "3,24", "a/a/a/a/a/a/b/a/n1/g.java": "44,8", "l/h/b/g/w0.java": "100,6", "a/a/a/a/a/a/m/h/a/c.java": "29,418", "a/a/a/a/a/a/l/a.java": "49,8", "k/a/a/e.java": "39,7", "l/e/a/m/o/e.java": "3,93", "a/a/a/a/a/a/l/b.java": "27,4", "l/a/a/u/k/d.java": "14,131", "a/a/a/a/a/a/n/g/f.java": "17,319,18"}, "metadata": {"id": "api_base64_decode", "description": "Base64 Decode", "type": "RegexAndOr", "pattern": ["android\\.util\\.Base64", ["\\.decodeToString", "\\.decode"]], "input_case": "exact", "severity": "info"}}, "api_native_code": {"files": {"com/cs/crypto/commons/passivetoken/LibLoader.java": "131,144", "io/card/payment/CardScanner.java": "130,147"}, "metadata": {"id": "api_native_code", "description": "Loading Native Code (Shared Library)", "type": "Regex", "pattern": "System\\.loadLibrary\\(|System\\.load\\(", "input_case": "exact", "severity": "info"}}, "api_message_digest": {"files": {"com/cs/crypto/commons/helpers/IOHelper.java": "26,26", "u/e.java": "9,9", "l/e/a/m/p/f/f.java": "6,6", "l/h/a/a/j/a/a0.java": "11,11", "l/e/a/m/p/a.java": "5,5", "l/e/a/m/h.java": "6,6", "l/h/a/a/d/u.java": "3,3", "t/c0/i.java": "11,11", "a/a/a/a/a/a/a/v.java": "8,8", "l/e/a/m/n/x.java": "5,5", "a/a/a/a/a/a/a/i.java": "5,5", "l/e/a/r/a.java": "4,4", "ua/com/cs/ifobs/mobile/core/security/IfobsSecurity.java": "4,4", "l/e/a/r/b.java": "4,4", "l/f/a/c.java": "4,4", "l/e/a/m/n/b0/k.java": "5,5", "l/e/a/m/g.java": "5,5", "u/h.java": "10,10", "l/e/a/m/p/b/j.java": "7,7", "l/h/a/a/j/a/g4.java": "18,18", "l/e/a/m/i.java": "7,7", "l/e/a/m/n/n.java": "4,4", "l/e/a/m/o/g.java": "8,8", "l/e/a/m/n/d.java": "4,4", "l/h/a/a/j/a/x3.java": "24,24", "l/e/a/m/p/b/r.java": "14,14"}, "metadata": {"id": "api_message_digest", "description": "Message Digest", "type": "RegexAndOr", "pattern": ["java\\.security\\.MessageDigest", ["MessageDigestSpi", "MessageDigest"]], "input_case": "exact", "severity": "info"}}, "api_start_service": {"files": {"l/h/a/a/j/a/i0.java": "92", "l/h/a/a/d/l/i0.java": "84", "l/h/a/a/a/a/a.java": "201", "l/h/b/g/g.java": "129,52", "ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "1024", "ua/com/cs/ifobs/mobile/android/sms/SMSBroadcastReceiver.java": "42", "l/h/a/a/j/a/h2.java": "405", "l/h/b/g/v.java": "158", "l/h/a/a/d/o/a.java": "51", "l/h/a/a/j/a/t2.java": "122", "l/h/a/a/d/l/j0.java": "45"}, "metadata": {"id": "api_start_service", "description": "Starting Service", "type": "RegexOr", "pattern": ["startService\\(", "bindService\\("], "input_case": "exact", "severity": "info"}}, "api_url": {"files": {"com/cs/crypto/commons/helpers/CertificateHelper.java": "34,88", "com/cs/crypto/commons/helpers/HTTPUploadHelper.java": "18,45", "l/h/a/a/j/a/s.java": "54,11"}, "metadata": {"id": "api_url", "description": "URL Connection to file/http/https/ftp/jar", "type": "RegexAndOr", "pattern": ["net\\.URLConnection", ["openConnection", "connect", "openStream"]], "input_case": "exact", "severity": "info"}}, "api_web": {"files": {"org/osmdroid/tileprovider/util/CloudmadeUtil.java": "11", "org/osmdroid/http/HttpClientFactory.java": "3", "org/osmdroid/http/IHttpClientFactory.java": "3", "org/osmdroid/contributor/GpxToPHPUploader.java": "8"}, "metadata": {"id": "api_web", "description": "HTTP Requests, Connections and Sessions", "type": "RegexOr", "pattern": ["http\\.client\\.HttpClient", "net\\.http\\.AndroidHttpClient", "http\\.impl\\.client\\.AbstractHttpClient"], "input_case": "exact", "severity": "info"}}, "api_tcp": {"files": {"t/c0/j/k.java": "6,252,252,6", "t/c0/m/a.java": "84,132,35,162,191,171,134,138,173,84,13,149,162,137,130,130,165,7,34,7,163,141,142,130,156,156,130,136,140,170", "t/c0/i.java": "9,101,9", "u/q.java": "5,27,39,5", "t/c0/k/f.java": "160,160,17,173,8,8,587,181,173,176,171,171", "u/p.java": "5,4,5,4,13,19,11,19", "t/s.java": "47,152,256,206,147,44,152,153,11,14,157,209,11,171", "t/c0/l/a.java": "482,484,13,480,480,9,480,481,13", "com/cs/crypto/cipherPKI/SeclibHelper.java": "9,38,9", "t/c0/k/m.java": "96,144,98,97,98,159,9,99,8,116,139,29,142,101,123,105,8,142,135,98,5,113,143,107,32,9", "t/c0/j/d.java": "7,70,7,125", "ua/com/cs/ifobs/mobile/android/application/common/dialog/BankIdAuthorizationFragmentDialog.java": "22,146,22,145", "a/a/a/a/a/d/a.java": "8,8,52", "t/a.java": "104,6,103,104,18,34,64,32,32,24,103,8,32,6", "t/c0/g.java": "316,320,48,30,313,62,317,15,320,166,324,148,98,70,310,326,29,34,68,173,313,31,90,90,316,84,324,68,97,43,101,34,155,146,68,255,84,316,255,34,97,45,9,101,146,175,46,34,255,10,310,50,155,10,16,86,103,173,32,43", "a/a/a/a/a/a/n/c.java": "8,56,28,29,49,26,18,26,43,49,58,6,64,4,27,48,51,55,56,42,65,15,5,42,62,4,27,14,20,19,41,63,48,50,12,27,41,44,62,26,49,63,56,14,18,57,63,55,42"}, "metadata": {"id": "api_tcp", "description": "TCP Socket", "type": "RegexAnd", "pattern": ["Socket", "net\\.Socket"], "input_case": "exact", "severity": "info"}}, "api_gps": {"files": {"ua/com/cs/ifobs/mobile/android/plugin/MapPlugin.java": "14,113", "org/osmdroid/LocationListenerProxy.java": "5,49,4,3", "org/osmdroid/util/LocationUtils.java": "4,3,8", "org/osmdroid/views/overlay/mylocation/GpsMyLocationProvider.java": "23,4,6,5", "org/osmdroid/views/overlay/mylocation/MyLocationNewOverlay.java": "132,11", "ua/com/cs/ifobs/mobile/android/map/google/GoogleMapActivity.java": "13,497,14", "org/osmdroid/contributor/RouteRecorder.java": "12,3", "org/osmdroid/util/GeoPoint.java": "119,3", "org/osmdroid/views/overlay/mylocation/IMyLocationProvider.java": "3,6", "ua/com/cs/ifobs/mobile/android/map/google/GoogleMapExtActivity.java": "32,363", "a/a/a/a/a/a/m/h/c/c.java": "9,8,57,7", "org/osmdroid/views/overlay/MyLocationOverlay.java": "308,17,18,19"}, "metadata": {"id": "api_gps", "description": "GPS Location", "type": "RegexAndOr", "pattern": ["android\\.location", ["getLastKnownLocation\\(", "requestLocationUpdates\\(", "getLatitude\\(", "getLongitude\\("]], "input_case": "exact", "severity": "info"}}, "api_webview_get": {"files": {"ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "499,187,53,554,560,868,96,53,54,51,191,554,183,867,54,52"}, "metadata": {"id": "api_webview_get", "description": "WebView GET Request", "type": "RegexAnd", "pattern": ["WebView", "loadData", "android\\.webkit"], "input_case": "exact", "severity": "info"}}, "api_https_connection": {"files": {"ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "73,73", "org/ksoap2/transport/HttpsServiceConnectionSE.java": "11,11", "l/h/a/a/j/a/s.java": "12,12"}, "metadata": {"id": "api_https_connection", "description": "HTTPS Connection", "type": "RegexAndOr", "pattern": ["javax\\.net\\.ssl\\.HttpsURLConnection", ["HttpsURLConnection", "connect"]], "input_case": "exact", "severity": "info"}}, "api_certificate_handling": {"files": {"ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "76", "org/ksoap2/transport/HttpsServiceConnectionSE.java": "12", "t/c0/k/f.java": "17", "t/s.java": "14", "l/h/a/a/j/a/s.java": "13", "t/a.java": "8", "t/c0/g.java": "16", "a/a/a/a/a/a/n/c.java": "6"}, "metadata": {"id": "api_certificate_handling", "description": "Certificate Handling", "type": "Regex", "pattern": "\\.SSLSocketFactory", "input_case": "exact", "severity": "info"}}, "api_dex_manipulate": {"files": {"l/h/a/a/f/d.java": "3,11,18"}, "metadata": {"id": "api_dex_manipulate", "description": "Load and Manipulate Dex Files", "type": "RegexAnd", "pattern": ["dalvik\\.system\\.PathClassLoader|dalvik\\.system\\.DexFile|dalvik\\.system\\.DexPathList", "loadDex|loadClass|DexClassLoader|loadDexFile"], "input_case": "exact", "severity": "info"}}, "api_notifications": {"files": {"ua/com/cs/ifobs/mobile/android/gcm/GcmIntentService.java": "9,203,236", "a/a/a/a/a/a/b/a/b1/e.java": "128,10", "a/a/a/a/a/a/b/a/f1/a.java": "10,104", "a/a/a/a/a/a/b/a/e1/r.java": "115,10", "l/h/a/a/d/b.java": "10,247"}, "metadata": {"id": "api_notifications", "description": "Android Notifications", "type": "RegexAnd", "pattern": ["app\\.NotificationManager", "notify"], "input_case": "exact", "severity": "info"}}, "api_send_broadcast": {"files": {"l/h/b/g/a0.java": "75,76", "l/h/b/g/v.java": "156", "com/samsung/android/sdk/pass/SpassFingerprint.java": "269"}, "metadata": {"id": "api_send_broadcast", "description": "Sending Broadcast", "type": "RegexOr", "pattern": ["sendBroadcast\\(", "sendOrderedBroadcast\\(", "sendStickyBroadcast\\("], "input_case": "exact", "severity": "info"}}, "api_get_phone": {"files": {"a/a/a/a/a/a/b/a/o1/i.java": "71,6,65,70,66,63"}, "metadata": {"id": "api_get_phone", "description": "Get Phone Number", "type": "RegexAnd", "pattern": ["telephony\\.TelephonyManager", "getLine1Number"], "input_case": "exact", "severity": "info"}}, "api_installed": {"files": {"a/a/a/a/a/a/b/a/b1/e.java": "138,100,92,100", "a/a/a/a/a/a/m/h/a/c.java": "456,462,364,440,467,414,411", "l/h/a/a/i/i/j.java": "39,39", "a/a/a/a/a/a/b/a/f1/a.java": "94,86,94,119", "a/a/a/a/a/a/b/a/e1/r.java": "106,106,98"}, "metadata": {"id": "api_installed", "description": "Get Installed Applications", "type": "RegexAndOr", "pattern": ["getPackageManager\\(", ["queryIntentActivities\\(", "getInstalledApplications\\(", "getInstalledPackages\\("]], "input_case": "exact", "severity": "info"}}, "api_clipboard": {"files": {"a/a/a/a/a/a/b/a/o.java": "96,6,6"}, "metadata": {"id": "api_clipboard", "description": "Set or Read Clipboard data", "type": "RegexAndOr", "pattern": ["content\\.ClipboardManager", ["CLIPBOARD_SERVICE", "ClipboardManager"]], "input_case": "exact", "severity": "info"}}, "api_sms_call": {"files": {"l/e/a/m/m/o/b.java": "60,42,3", "l/h/a/a/h/i/a0.java": "116,3,119,119,114,114,117,121", "l/h/a/a/h/i/c0.java": "38,3,37,41,46,37,39,41,50"}, "metadata": {"id": "api_sms_call", "description": "Query Database of SMS, Contacts etc", "type": "RegexAnd", "pattern": ["content\\.ContentResolver", "query"], "input_case": "exact", "severity": "info"}}, "api_get_network": {"files": {"ua/com/cs/ifobs/mobile/android/application/common/dialog/BankIdAuthorizationFragmentDialog.java": "127,21,126,129,126,127,126,126", "com/cs/crypto/applet/processor/AbstractProcessor.java": "25,8,74"}, "metadata": {"id": "api_get_network", "description": "Get Network Interface information", "type": "RegexAndOr", "pattern": ["NetworkInterface", ["getNetworkInterfaces\\(", "getInetAddresses\\(", "getHostAddress\\("]], "input_case": "exact", "severity": "info"}}}, "code_analysis": {"android_logging": {"files": {"l/e/a/m/n/h.java": "374,254,181", "com/cs/crypto/commons/helpers/LogHelper.java": "75,55,87", "l/h/a/a/d/m/a.java": "36,48", "v/b/a/c.java": "135,149,450,216,141", "a/a/a/a/a/a/i/a.java": "33", "l/j/a/q/k.java": "25", "org/kobjects/crypt/Crypt.java": "192", "l/h/a/a/h/i/j0.java": "18", "l/h/a/a/d/l/e.java": "14", "l/h/a/b/h0/h.java": "331", "l/e/a/m/p/f/j.java": "55,54", "l/e/a/m/n/a0/j.java": "62,167,63,99,153,181,166,180,72,191,192,200,103,114,133,102,73,98,113,201", "l/h/a/a/d/i/l/n.java": "53", "l/h/a/b/m/g.java": "56", "l/h/a/a/d/f.java": "120,171,153,114,84,34,139,147,63", "l/h/a/a/d/v.java": "77", "l/h/a/a/d/l/i0.java": "106", "l/h/a/a/a/a/a.java": "157,240,149,207", "l/h/a/a/h/i/m0.java": "18", "a/a/a/a/a/a/b/a/l1/f.java": "212", "com/cs/crypto/commons/helpers/CertificateHelper.java": "329,222,333,219,321,216", "l/h/a/a/b/a/h/b/c.java": "41", "l/h/b/g/c0.java": "171", "l/h/b/g/q.java": "75,118,59", "l/h/d/q/a/m/b/a.java": "10", "k/a/a/j.java": "15,21", "v/d/e/h.java": "26,27", "l/e/a/m/o/s.java": "101,102", "l/h/b/g/g.java": "37,82,123,138,154,155,137,45,39,122,46,81", "l/h/a/a/a/a/c.java": "18,30", "l/a/a/e.java": "111", "l/a/a/t/b.java": "33", "l/h/b/g/l.java": "25", "l/h/d/q/a/c.java": "64,32", "l/j/a/e.java": "203,97", "a/a/a/a/a/a/e/h/a.java": "10", "l/e/a/m/o/f.java": "109,108", "l/h/a/a/d/i/l/x1.java": "94,36,68,92", "l/h/b/b.java": "199,296,294,203,209,233,287,241,239,212,235,124,228,237", "com/journeyapps/barcodescanner/CameraPreview.java": "165,103,278,317,376,315", "l/h/a/a/e/k.java": "24", "com/bumptech/glide/manager/RequestManagerFragment.java": "74,73", "l/j/a/q/d.java": "36,40,94,81,70,115,52,106", "l/h/a/a/a/a/b.java": "41,65,55", "l/h/a/a/h/g/b.java": "24", "ua/com/cs/ifobs/mobile/android/activity/GooglePayWrapActivity.java": "768,263,247,770", "com/bumptech/glide/manager/SupportRequestManagerFragment.java": "73,74", "l/h/b/g/w.java": "63,68,109,62,59,100,94,95,102", "l/h/a/a/d/i/l/n2.java": "49", "l/h/a/a/h/i/l0.java": "21", "com/samsung/android/sdk/pass/support/SdkSupporter.java": "28", "l/a/a/g.java": "479", "l/e/a/m/n/b0/e.java": "95,104,48,49,107,83,94,82", "com/samsung/android/sdk/pass/Spass.java": "48", "l/a/a/w/a.java": "359", "l/h/a/a/d/l/d.java": "132,109,106,160,118,138,115,135,141,112,166,121", "l/h/a/a/d/i/l/g2.java": "208,83", "com/cs/crypto/applet/base/BaseJApplet.java": "75,67,69,73,39,41", "com/cs/crypto/cipherX509/X509CrypterImpl.java": "452,463,472,446,454,453,445", "l/h/b/g/i0.java": "107,41,102,49,37,55,62,85,93,44,36,90,40,68,67", "l/h/b/g/z.java": "63,43", "l/e/a/m/m/b.java": "54,53", "a/a/a/a/a/a/c/p.java": "66,56,43", "l/f/a/a.java": "255", "com/cs/crypto/commons/helpers/HTTPUploadHelper.java": "37", "l/h/b/g/a0.java": "81,69,52,68,101,65", "l/a/a/w/c.java": "2203,1847", "a/a/a/a/a/a/b/a/o1/i.java": "44,59,73", "l/a/a/c.java": "50", "l/h/a/a/d/i/e.java": "237,230", "l/h/b/g/v.java": "132,145,71,127,165,66,46,146", "l/h/a/b/e0/b.java": "136", "io/card/payment/CardIOActivity.java": "592,611,222,605,542,620,442,550,364,298,253,577,545,689,691,247,595", "l/h/a/a/d/i/l/u0.java": "41", "l/e/a/m/o/d.java": "49,50", "l/e/a/m/n/c0/a.java": "77,78", "l/j/a/q/e.java": "302,118,77,214,192,337,374,274,329,325,369,318,183,234,61,367,241,185,229,107,222,202,126,212,275,226,238,178,216", "l/h/a/a/d/i/l/x.java": "331,336,97,96,345,326", "l/e/a/i.java": "97,98", "l/h/a/a/d/l/r0.java": "30", "l/e/a/m/m/j.java": "157,99,102,167,160,164,149,153,156", "ua/com/cs/ifobs/mobile/android/activity/QRScannerActivity.java": "41", "com/cs/crypto/applet/base/LogJApplet.java": "21", "com/cs/crypto/commons/helpers/TimeHelper.java": "100,99,102", "l/h/b/g/w0.java": "307,306,330,161,94,181,313,344,250,312,186,251,200,160,110,335", "l/h/a/a/h/i/f0.java": "83,113,144", "l/h/a/a/d/i/l/f0.java": "34", "l/h/b/g/k.java": "25", "l/b/a/a/a.java": "75", "com/samsung/android/sdk/pass/d.java": "17", "l/h/a/a/d/i/l/p0.java": "35", "l/h/b/i/d.java": "119,99,76,134", "t/c0/l/a.java": "593,126", "l/h/a/a/h/j/b0.java": "50,39,44,27", "l/e/a/l/e.java": "133,116,148,134,149,117", "p/a/a/l/a.java": "76,89,57,110,70,137,98", "l/h/a/a/d/l/t/b.java": "1355,1348,1360,657,665,1358,664,1368", "a/a/a/a/a/a/c/s.java": "178,163,154,182", "com/csltd/pkcs11lib/Cryptoki.java": "82", "l/h/a/a/i/i/a0.java": "83,33", "l/h/a/b/f0/a.java": "57", "l/h/b/g/y.java": "37,43,45", "l/a/a/t/a.java": "26", "l/j/a/j.java": "153", "l/h/b/g/n.java": "27,36,24,33", "l/e/a/m/p/b/f.java": "332,212,326,335,308,343,313,200,215,330,199,187,319,211,194,342,329,333,190,214,291,336,193,264,265,320,325,290", "p/a/a/j.java": "57,102,83,35,40,63", "l/h/d/q/a/m/a.java": "24,52,29,70,20,19,73", "l/h/a/a/d/t.java": "68,38,64", "l/e/a/m/n/z.java": "48,47", "l/h/a/a/d/i/l/j0.java": "125,524", "l/e/a/c.java": "212,226,234,220,225,242,231,249,233,191,219,243,254,192,230,213", "l/h/b/g/f0.java": "24", "l/e/a/m/p/b/i.java": "61,60,58,57", "l/h/a/a/j/a/o.java": "245,237", "com/cs/crypto/commons/keycontainer/FSKeysContainer.java": "137,119,127,106,143", "l/h/a/a/k/b/a.java": "102,106,79,65", "l/h/a/a/d/o/a.java": "53", "v/b/a/b.java": "38", "kotlin/io/ConsoleKt.java": "15,49,84,59,64,34,114,54,74,69,44,104,79,109,94,119,124,99,39,89,20", "l/h/a/a/f/a.java": "41,37,107,30,96,117", "l/e/a/m/m/l.java": "55,56", "l/j/a/q/a.java": "76,93,107", "l/e/a/m/n/i.java": "145,144", "com/samsung/android/sdk/pass/SpassFingerprint.java": "391,600,270,218,166,182,675,355,240,163,385,415,650,256,404,245,394", "l/h/a/b/c0/a.java": "287", "l/h/a/a/d/i/l/m1.java": "36,48", "l/e/a/m/n/a0/i.java": "227,232,100,104", "com/cs/crypto/commons/passivetoken/TokenXmlHelper.java": "92,93,90", "l/h/b/g/g0.java": "27,19,26,20", "l/e/a/m/o/t.java": "83,47,48", "l/e/a/q/f.java": "338,447,432,461,36", "l/e/a/m/n/k.java": "20,162", "butterknife/ButterKnife.java": "109,42,69,58,52", "l/h/b/g/h.java": "42,38,50", "l/e/a/m/n/b0/j.java": "84,99", "l/e/a/m/m/o/b.java": "108,161,162,109", "l/e/a/m/p/f/d.java": "21,20", "l/h/a/a/d/g.java": "92,90,88,42", "l/h/a/a/d/i/l/e.java": "663,800", "com/samsung/android/sdk/pass/support/v1/FingerprintManagerProxyFactory.java": "76", "l/e/a/n/e.java": "82,38,101,81,35,100", "l/e/a/m/p/f/g.java": "183,184", "l/h/a/a/d/l/g.java": "69,51", "l/e/a/m/p/b/c.java": "65,94,95,86,87", "l/e/a/m/p/f/a.java": "169,181,158,78,161,166,178,70", "moxy/PresenterStore.java": "21", "v/c/a/a/a.java": "168,465", "l/h/a/a/h/i/a0.java": "198", "x/a/a.java": "151,139", "l/h/a/a/d/l/a.java": "16", "io/card/payment/CardScanner.java": "87,83,101,315,239,96,390,411,84,78,512,369,146,93,224,220,409,331,82,494,107,371,89,99,348,503,81", "com/cs/crypto/commons/passivetoken/Tokens.java": "121,122", "l/h/b/g/b0.java": "24", "l/h/a/a/d/l/m.java": "27", "l/h/d/q/a/e.java": "33,39", "l/a/a/d.java": "38", "l/h/b/g/n0.java": "51,46,66,71", "l/e/a/l/d.java": "199,200,169,166", "l/h/a/a/h/i/k0.java": "18", "l/a/a/u/k/d.java": "137,147", "l/e/a/s/j/a.java": "42,45", "a/a/a/a/a/a/a/p0.java": "54", "l/h/b/g/e.java": "42,47", "a/a/a/a/a/a/b/b.java": "92,65,46,38,88,82,48,63", "l/h/a/a/d/b.java": "249,60", "com/cs/crypto/commons/helpers/ByteHelper.java": "75,77,59,81", "p/a/a/g.java": "319", "l/e/a/n/k.java": "179,188,178", "l/e/a/m/p/b/h.java": "513,666,438,109,495,466,709,401,655,526,570,484,420,710,547,439,684,695,467,110", "l/h/a/a/h/i/c0.java": "43", "l/a/a/m.java": "36", "l/e/a/m/o/c.java": "20,21", "l/h/b/g/h0.java": "18,17", "l/h/a/a/d/l/b.java": "671,449,661,302,433,287,533,518,665", "l/j/a/q/i.java": "25", "l/e/a/m/p/b/r.java": "120,119", "l/h/b/g/t0.java": "57"}, "metadata": {"id": "android_logging", "description": "The App logs information. Sensitive information should never be logged.", "type": "Regex", "pattern": "Log\\.(v|d|i|w|e|f|s)|System\\.out\\.print|System\\.err\\.print", "severity": "info", "input_case": "exact", "cvss": 7.5, "cwe": "CWE-532 Insertion of Sensitive Information into Log File", "owasp-mobile": "", "masvs": "MSTG-STORAGE-3", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs"}}, "android_ip_disclosure": {"files": {"A/A/E/I/G.java": "326,347,359,20,311,122,34,368,278,134,98,371,101,122,311,335,338,365,20,254,101,365,359,134,254,350,278,34,152,368,344,98,341,326", "com/cs/crypto/dstu4145/PrivateKeyDstuDAT6.java": "161,112,96,161,96", "A/A/E/E/A/A.java": "42,52,26,36,37,24,40,44,63,54,25,23,60,29,42,21,43,38,51,34,31,50,40,36,22,35,32,46,30,51,27,52,39", "com/cs/crypto/commons/helpers/CertificateHelper.java": "184,141,128,197,141,197,184,128", "A/A/E/A/C0121b.java": "62,74,20,59,80,65,77,29,38,35,95,23,101,83,104,47,83,98,107,26,59,110,56,44,50,89,71,92,56,53,77,32,89,110,86,41,68", "A/A/E/H/B.java": "48,48", "A/A/E/A/G.java": "23,69,50,22,7,11,29,8,17,38,53,16,20,26,18,56,62,65,47,15,35,41,44,26,12,68,7,21,50,10,9,29,32,44,19,59,8", "com/cs/crypto/rsa/BouncyCastleHelper.java": "184,220,96,280,282,284,281,220,283,279,281,279,96,184,280", "com/cs/crypto/dstu4145/AvtorDSTUHelper.java": "162,163,42,163,162,162,42,163", "A/A/E/J/B.java": "12,15,8,14,9,11,14,12,9,13,15,10,13,10,8,11", "A/A/D/A.java": "33,34,53,38,39,85,39,61,34,84,77,77,53,35,86,38,35,85,37,37,60,84,33,36,36", "A/A/E/K/M.java": "102,156,226,223,198", "A/A/E/G/A.java": "47", "A/A/E/A/P.java": "18,15,15,18", "A/A/E/F/A.java": "14,9,13,17,12,10,16,15,8,11,19,18", "A/A/E/D/B.java": "40", "ua/com/cs/ifobs/mobile/android/application/common/dialog/BankIdAuthorizationFragmentDialog.java": "148", "com/cs/crypto/rsa/CryptoAlgType.java": "6,5,6,4,5", "A/A/E/A/AbstractC0126g.java": "16,9,22,19,28,27,18,24,17,25,31,10,15", "A/A/E/C/A.java": "37", "A/A/E/B/A.java": "48", "com/cs/crypto/rsa/AvtorRSAHelper.java": "35,34,36,36,35"}, "metadata": {"id": "android_ip_disclosure", "description": "IP Address disclosure", "type": "Regex", "pattern": "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}", "severity": "warning", "input_case": "exact", "cvss": 4.3, "cwe": "CWE-200 Information Exposure", "owasp-mobile": "", "masvs": "MSTG-CODE-2"}}, "android_insecure_random": {"files": {"org/kobjects/crypt/Crypt.java": "8", "kotlin/random/AbstractPlatformRandom.java": "3", "kotlin/collections/CollectionsKt__MutableCollectionsJVMKt.java": "6", "kotlin/random/FallbackThreadLocalRandom$implStorage$1.java": "3", "kotlin/random/PlatformRandomKt.java": "3", "kotlin/random/KotlinRandom.java": "4", "kotlin/random/FallbackThreadLocalRandom.java": "3", "org/osmdroid/tileprovider/tilesource/BitmapTileSourceBase.java": "8", "kotlin/collections/CollectionsKt__CollectionsJVMKt.java": "9", "kotlin/random/PlatformRandom.java": "3", "A/A/K/A/E.java": "6", "l/h/a/a/j/a/x3.java": "35", "a/a/a/a/a/a/n/g/f.java": "30", "A/A/K/A/A.java": "6"}, "metadata": {"id": "android_insecure_random", "description": "The App uses an insecure Random Number Generator.", "type": "Regex", "pattern": "java\\.util\\.Random(?!Access)", "severity": "high", "input_case": "exact", "cvss": 7.5, "cwe": "CWE-330 Use of Insufficiently Random Values", "owasp-mobile": "M5: Insufficient Cryptography", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-random-number-generators", "masvs": "MSTG-CRYPTO-6"}}, "android_hardcoded": {"files": {"moxy/MvpDelegate.java": "17", "org/osmdroid/tileprovider/util/CloudmadeUtil.java": "21", "com/cs/crypto/commons/AbstractCrypter.java": "26", "org/osmdroid/contributor/util/constants/OpenStreetMapContributorConstants.java": "9,8", "com/cs/crypto/iit/IITCrypterImpl.java": "67,56,69", "org/osmdroid/tileprovider/modules/DatabaseFileArchive.java": "39"}, "metadata": {"id": "android_hardcoded", "cvss": 7.4, "cwe": "CWE-312 Cleartext Storage of Sensitive Information", "description": "Files may contain hardcoded sensitive informations like usernames, passwords, keys etc.", "input_case": "lower", "masvs": "MSTG-STORAGE-14", "owasp-mobile": "M9: Reverse Engineering", "pattern": "(password\\s*=\\s*[\\'|\\\"].+[\\'|\\\"]\\s{0,5})|(pass\\s*=\\s*[\\'|\\\"].+[\\'|\\\"]\\s{0,5})|(username\\s*=\\s*[\\'|\\\"].+[\\'|\\\"]\\s{0,5})|(secret\\s*=\\s*[\\'|\\\"].+[\\'|\\\"]\\s{0,5})|(key\\s*=\\s*[\\'|\\\"].+[\\'|\\\"]\\s{0,5})", "severity": "high", "type": "Regex", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#checking-memory-for-sensitive-data-mstg-storage-10"}}, "android_md5": {"files": {"com/cs/crypto/commons/helpers/IOHelper.java": "315", "u/e.java": "891", "a/a/a/a/a/a/a/v.java": "47,48", "ua/com/cs/ifobs/mobile/core/security/IfobsSecurity.java": "61", "l/f/a/c.java": "27", "u/h.java": "239", "l/h/a/a/j/a/x3.java": "163"}, "metadata": {"id": "android_md5", "cvss": 7.4, "cwe": "CWE-327 Use of a Broken or Risky Cryptographic Algorithm", "description": "MD5 is a weak hash known to have hash collisions.", "input_case": "exact", "masvs": "MSTG-CRYPTO-4", "owasp-mobile": "M5: Insufficient Cryptography", "pattern": ["\\.getInstance\\(.*MD5", "\\.getInstance\\(.*md5", "DigestUtils\\.md5\\("], "severity": "high", "type": "RegexOr", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4"}}, "android_aes_ecb": {"files": {"a/a/a/a/a/a/g/a.java": "37,51"}, "metadata": {"id": "android_aes_ecb", "description": "The App uses ECB mode in Cryptographic encryption algorithm. ECB mode is known to be weak as it results in the same ciphertext for identical blocks of plaintext.", "type": "Regex", "pattern": "Cipher\\.getInstance\\(\\s*\"\\s*AES\\/ECB", "severity": "high", "input_case": "exact", "cvss": 5.9, "cwe": "CWE-327 Use of a Broken or Risky Cryptographic Algorithm", "owasp-mobile": "M5: Insufficient Cryptography", "masvs": "MSTG-CRYPTO-2", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode"}}, "android_sha1": {"files": {"l/h/a/a/d/u.java": "38", "t/c0/i.java": "237"}, "metadata": {"id": "android_sha1", "cvss": 5.9, "cwe": "CWE-327 Use of a Broken or Risky Cryptographic Algorithm", "description": "SHA-1 is a weak hash known to have hash collisions.", "input_case": "exact", "masvs": "MSTG-CRYPTO-4", "owasp-mobile": "M5: Insufficient Cryptography", "pattern": ["\\.getInstance\\(.*SHA-1", "\\.getInstance\\(.*sha-1", "\\.getInstance\\(.*SHA1", "\\.getInstance\\(.*sha1", "DigestUtils\\.sha\\("], "severity": "high", "type": "RegexOr", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4"}}, "android_temp_file": {"files": {"l/j/a/e.java": "91", "kotlin/io/FilesKt__UtilsKt.java": "166,167,142"}, "metadata": {"id": "android_temp_file", "description": "App creates temp file. Sensitive information should never be written into a temp file.", "type": "Regex", "pattern": "\\.createTempFile\\(", "severity": "high", "input_case": "exact", "cvss": 5.5, "cwe": "CWE-276 Incorrect Default Permissions", "owasp-mobile": "M2: Insecure Data Storage", "masvs": "MSTG-STORAGE-2"}}, "android_insecure_ssl": {"files": {"ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "76,75,530,515,77,73,74"}, "metadata": {"id": "android_insecure_ssl", "description": "Insecure Implementation of SSL. Trusting all the certificates or accepting self signed certificates is a critical Security Hole. This application is vulnerable to MITM attacks", "type": "RegexAnd", "pattern": ["javax\\.net\\.ssl", "TrustAllSSLSocket-Factory|AllTrustSSLSocketFactory|NonValidatingSSLSocketFactory|net\\.SSLCertificateSocketFactory|ALLOW_ALL_HOSTNAME_VERIFIER|\\.setDefaultHostnameVerifier\\(|NullHostnameVerifier\\("], "severity": "high", "input_case": "exact", "cvss": 7.4, "cwe": "CWE-295 Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-3", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#android-network-apis"}}, "android_webview_ignore_ssl": {"files": {"ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java": "193,191"}, "metadata": {"id": "android_webview_ignore_ssl", "description": "Insecure WebView Implementation. WebView ignores SSL Certificate errors and accept any SSL Certificate. This application is vulnerable to MITM attacks", "type": "RegexAnd", "pattern": ["onReceivedSslError\\(WebView", "\\.proceed\\(\\);"], "severity": "high", "input_case": "exact", "cvss": 7.4, "cwe": "CWE-295 Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-3", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#webview-server-certificate-verification"}}, "android_sql_raw_query": {"files": {"l/h/a/a/j/a/k.java": "5,6,7,8,151", "l/h/a/a/j/a/o3.java": "3160,13,14", "l/h/a/a/d/l/t/b.java": "1570,16,17", "l/h/a/a/j/a/g4.java": "5,6,477"}, "metadata": {"id": "android_sql_raw_query", "description": "App uses SQLite Database and execute raw SQL query. Untrusted user input in raw SQL queries can cause SQL Injection. Also sensitive information should be encrypted and written to the database.", "type": "RegexAndOr", "pattern": ["android\\.database\\.sqlite", ["rawQuery\\(", "execSQL\\("]], "severity": "high", "input_case": "exact", "cvss": 5.9, "cwe": "CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "owasp-mobile": "M7: Client Code Quality", "masvs": "", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2"}}, "android_read_write_external": {"files": {"org/osmdroid/tileprovider/constants/OpenStreetMapTileProviderConstants.java": "22", "org/osmdroid/tileprovider/modules/MapTileFileStorageProviderBase.java": "49"}, "metadata": {"id": "android_read_write_external", "description": "App can read/write to External Storage. Any App can read data written to External Storage.", "type": "RegexOr", "pattern": ["\\.getExternalStorage", "\\.getExternalFilesDir\\("], "severity": "high", "input_case": "exact", "cvss": 5.5, "cwe": "CWE-276 Incorrect Default Permissions", "owasp-mobile": "M2: Insecure Data Storage", "masvs": "MSTG-STORAGE-2", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#external-storage"}}, "android_clipboard_copy": {"files": {"a/a/a/a/a/a/b/a/o.java": "67,96,6"}, "metadata": {"id": "android_clipboard_copy", "description": "This App copies data to clipboard. Sensitive data should not be copied to clipboard as other applications can access it.", "type": "RegexAnd", "pattern": ["content\\.ClipboardManager", "setPrimaryClip\\("], "severity": "info", "input_case": "exact", "cvss": 0, "cwe": "", "owasp-mobile": "", "masvs": "MSTG-STORAGE-10", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04b-Mobile-App-Security-Testing.md#clipboard"}}}, "niap_analysis": {"FCS_RBG_EXT.1.1": {"choice": "The application invoke platform-provided DRBG functionality for its cryptographic operations.", "description": "Random Bit Generation Services", "class": "Security Functional Requirements"}, "FCS_STO_EXT.1.1": {"choice": "The application does not store any credentials to non-volatile memory.", "description": "Storage of Credentials", "class": "Security Functional Requirements"}, "FCS_CKM_EXT.1.1": {"choice": "The application implement asymmetric key generation.", "description": "Cryptographic Key Generation Services", "class": "Security Functional Requirements"}, "FDP_DEC_EXT.1.1": {"choice": "The application has access to ['camera', 'network connectivity', 'location'].", "description": "Access to Platform Resources", "class": "Security Functional Requirements"}, "FDP_DEC_EXT.1.2": {"choice": "The application has access to ['address book'].", "description": "Access to Platform Resources", "class": "Security Functional Requirements"}, "FDP_NET_EXT.1.1": {"choice": "The application has user/application initiated network communications.", "description": "Network Communications", "class": "Security Functional Requirements"}, "FDP_DAR_EXT.1.1": {"choice": "The application implement functionality to encrypt sensitive data in non-volatile memory.", "description": "Encryption Of Sensitive Application Data", "class": "Security Functional Requirements"}, "FMT_MEC_EXT.1.1": {"choice": "The application invoke the mechanisms recommended by the platform vendor for storing and setting configuration options.", "description": "Supported Configuration Mechanism", "class": "Security Functional Requirements"}, "FTP_DIT_EXT.1.1": {"choice": "The application does encrypt some transmitted data with HTTPS/TLS/SSH between itself and another trusted IT product.", "description": "Protection of Data in Transit", "class": "Security Functional Requirements"}, "FCS_RBG_EXT.2.1,FCS_RBG_EXT.2.2": {"choice": "The application perform all deterministic random bit generation (DRBG) services in accordance with NIST Special Publication 800-90A using Hash_DRBG. The deterministic RBG is seeded by an entropy source that accumulates entropy from a platform-based DRBG and a software-based noise source, with a minimum of 256 bits of entropy at least equal to the greatest security strength (according to NIST SP 800-57) of the keys and hashes that it will generate.", "description": "Random Bit Generation from Application", "class": "Selection-Based Security Functional Requirements"}, "FCS_CKM.1.1(1)": {"choice": "The application generate asymmetric cryptographic keys in accordance with a specified cryptographic key generation algorithm RSA schemes using cryptographic key sizes of 2048-bit or greater.", "description": "Cryptographic Asymmetric Key Generation", "class": "Selection-Based Security Functional Requirements"}, "FCS_COP.1.1(1)": {"choice": "The application perform encryption/decryption not in accordance with FCS_COP.1.1(1), AES-ECB mode is being used.", "description": "Cryptographic Operation - Encryption/Decryption", "class": "Selection-Based Security Functional Requirements"}, "FCS_COP.1.1(2)": {"choice": "The application perform cryptographic hashing services not in accordance with FCS_COP.1.1(2) and uses the cryptographic algorithm RC2/RC4/MD4/MD5.", "description": "Cryptographic Operation - Hashing", "class": "Selection-Based Security Functional Requirements"}, "FCS_HTTPS_EXT.1.1": {"choice": "The application implement the HTTPS protocol that complies with RFC 2818.", "description": "HTTPS Protocol", "class": "Selection-Based Security Functional Requirements"}, "FCS_HTTPS_EXT.1.2": {"choice": "The application implement HTTPS using TLS.", "description": "HTTPS Protocol", "class": "Selection-Based Security Functional Requirements"}, "FCS_HTTPS_EXT.1.3": {"choice": "The application notify the user and not establish the connection or request application authorization to establish the connection if the peer certificate is deemed invalid.", "description": "HTTPS Protocol", "class": "Selection-Based Security Functional Requirements"}, "FIA_X509_EXT.1.1": {"choice": "The application invoked platform-provided functionality to validate certificates in accordance with the following rules: ['The certificate path must terminate with a trusted CA certificate', 'The application validate the revocation status of the certificate using the Online Certificate Status Protocol (OCSP) as specified in RFC 2560 or a Certificate Revocation List (CRL) as specified in RFC 5759 or an OCSP TLS Status Request Extension (i.e., OCSP stapling) as specified in RFC 6066'].", "description": "X.509 Certificate Validation", "class": "Selection-Based Security Functional Requirements"}, "FIA_X509_EXT.2.1": {"choice": "The application use X.509v3 certificates as defined by RFC 5280 to support authentication for HTTPS , TLS.", "description": "X.509 Certificate Authentication", "class": "Selection-Based Security Functional Requirements"}, "FPT_TUD_EXT.2.1": {"choice": "The application shall be distributed using the format of the platform-supported package manager.", "description": "Integrity for Installation and Update", "class": "Selection-Based Security Functional Requirements"}}, "urls": [{"urls": ["javascript:console.log('hello');"], "path": "a/a/a/a/a/a/e/f/g/q.java"}, {"urls": ["https://play.google.com/store/apps/details?id="], "path": "a/a/a/a/a/a/b/a/b0.java"}, {"urls": ["https://play.google.com/store/apps/details?id=", "https://play.google.com/store/apps/details?id=ua.com.cs.ifobs.mobile.android.otpsmb"], "path": "a/a/a/a/a/a/b/a/k0.java"}, {"urls": ["http://schemas.xmlsoap.org/soap/envelope/", "http://ws.mobileapi.ifobs.cs.com/"], "path": "a/a/a/a/a/e/s/a/b.java"}, {"urls": ["http://wm.webservices.ifobs.cs.com/"], "path": "a/a/a/a/a/e/s/a/d.java"}, {"urls": ["http://unknown:8080/index.jsp", "file:///android_asset/www/"], "path": "ua/com/cs/ifobs/mobile/android/application/common/main/MainActivity.java"}, {"urls": ["https://www.google.com/maps/dir/?api=1&destination="], "path": "ua/com/cs/ifobs/mobile/android/map/google/GoogleMapActivity.java"}, {"urls": ["http://contact_avatar/", "http://inner/"], "path": "ua/com/cs/ifobs/mobile/core/utils/Constants.java"}, {"urls": ["file:///"], "path": "org/kobjects/util/Util.java"}, {"urls": ["http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/1999/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/1999/XMLSchema-instance"], "path": "org/ksoap2/SoapEnvelope.java"}, {"urls": ["http://xml.apache.org/xml-soap"], "path": "org/ksoap2/serialization/MarshalHashtable.java"}, {"urls": ["http://www.openstreetmap.org/api/0.5/gpx/create"], "path": "org/osmdroid/contributor/OSMUploader.java"}, {"urls": ["http://www.PLACEYOURDOMAINHERE.com/anyfolder/gpxuploader/upload.php"], "path": "org/osmdroid/contributor/GpxToPHPUploader.java"}, {"urls": ["http://www.w3.org/2001/XMLSchema-instance", "http://www.topografix.com/GPX/1/1", "http://www.topografix.com/GPX/1/1/gpx.xsd"], "path": "org/osmdroid/contributor/util/RecordedRouteGPXFormatter.java"}, {"urls": ["http://www.andnav.org"], "path": "org/osmdroid/contributor/util/constants/OpenStreetMapContributorConstants.java"}, {"urls": ["http://overlay.openstreetmap.nl/basemap/", "http://a.tile.cloudmade.com/%s/%d/%d/%d/%d/%d%s?token=%s", "http://b.tile.cloudmade.com/%s/%d/%d/%d/%d/%d%s?token=%s", "http://c.tile.cloudmade.com/%s/%d/%d/%d/%d/%d%s?token=%s", "http://a.tile.opencyclemap.org/cycle/", "http://b.tile.opencyclemap.org/cycle/", "http://c.tile.opencyclemap.org/cycle/", "http://overlay.openstreetmap.nl/openfietskaart-overlay/", "http://a.tile.openstreetmap.org/", "http://b.tile.openstreetmap.org/", "http://c.tile.openstreetmap.org/", "http://otile1.mqcdn.com/tiles/1.0.0/sat/", "http://otile2.mqcdn.com/tiles/1.0.0/sat/", "http://otile3.mqcdn.com/tiles/1.0.0/sat/", "http://otile4.mqcdn.com/tiles/1.0.0/sat/", "http://otile1.mqcdn.com/tiles/1.0.0/map/", "http://otile2.mqcdn.com/tiles/1.0.0/map/", "http://otile3.mqcdn.com/tiles/1.0.0/map/", "http://otile4.mqcdn.com/tiles/1.0.0/map/", "http://openptmap.org/tiles/", "http://overlay.openstreetmap.nl/roads/"], "path": "org/osmdroid/tileprovider/tilesource/TileSourceFactory.java"}, {"urls": ["http://a.tiles.mapbox.com/v3/", "http://b.tiles.mapbox.com/v3/", "http://c.tiles.mapbox.com/v3/", "http://d.tiles.mapbox.com/v3/"], "path": "org/osmdroid/tileprovider/tilesource/MapBoxTileSource.java"}, {"urls": ["http://auth.cloudmade.com/token/"], "path": "org/osmdroid/tileprovider/util/CloudmadeUtil.java"}, {"urls": ["http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone"], "path": "org/kxml2/kdom/Document.java"}, {"urls": ["http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/"], "path": "org/kxml2/wap/WbxmlParser.java"}, {"urls": ["http://www.", "https://www."], "path": "org/kxml2/wap/wml/Wml.java"}, {"urls": ["http://www.wireless-village.org/CSP", "http://www.wireless-village.org/PA", "http://www.wireless-village.org/TRC", "http://www.openmobilealliance.org/DTD/WV-CSP", "http://www.openmobilealliance.org/DTD/WV-PA", "http://www.openmobilealliance.org/DTD/WV-TRC", "www.wireless-village.org"], "path": "org/kxml2/wap/wv/WV.java"}, {"urls": ["http://xmlpull.org/v1/doc/", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/"], "path": "org/kxml2/io/KXmlParser.java"}, {"urls": ["http://xmlpull.org/v1/doc/features.html#indent-output", "http://www.w3.org/XML/1998/namespace"], "path": "org/kxml2/io/KXmlSerializer.java"}, {"urls": ["http://xmlpull.org/v1/doc/features.html#process-docdecl", "http://xmlpull.org/v1/doc/features.html#process-namespaces", "http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes", "http://xmlpull.org/v1/doc/features.html#validation"], "path": "org/xmlpull/v1/XmlPullParser.java"}, {"urls": ["http://maps.google.com/maps?saddr="], "path": "l/h/a/a/i/i/j.java"}, {"urls": ["https://goo.gl/NAOOOI.", "https://goo.gl/NAOOOI"], "path": "l/h/a/a/j/a/x3.java"}, {"urls": ["https://app-measurement.com/a"], "path": "l/h/a/a/j/a/e.java"}, {"urls": ["www.google.com", "https://www.google.com"], "path": "l/h/a/a/j/a/c2.java"}, {"urls": ["https://pagead2.googlesyndication.com/pagead/gen_204?id=gmob-apps"], "path": "l/h/a/a/a/a/b.java"}, {"urls": ["https://plus.google.com/"], "path": "l/h/a/a/d/l/k0.java"}, {"urls": ["data:image"], "path": "l/e/a/m/o/e.java"}, {"urls": ["http://www.slf4j.org/codes.html#loggerNameMismatch", "http://www.slf4j.org/codes.html#unsuccessfulInit", "http://www.slf4j.org/codes.html#StaticLoggerBinder", "http://www.slf4j.org/codes.html#version_mismatch", "http://www.slf4j.org/codes.html#replay", "http://www.slf4j.org/codes.html#substituteLogger", "http://www.slf4j.org/codes.html#multiple_bindings"], "path": "v/d/c.java"}, {"urls": ["https://otpsmart-firebase.firebaseio.com", "http://www.masterpass.com.ua/", "www.masterpass.com.ua"], "path": "Android String Resource"}], "domains": {"c.tiles.mapbox.com": {"bad": "no", "geolocation": {"ip": "13.224.176.81", "country_short": "AU", "country_long": "Australia", "region": "New South Wales", "city": "Sydney", "latitude": -33.867851, "longitude": 151.207321}}, "b.tile.opencyclemap.org": {"bad": "no", "geolocation": {"ip": "136.243.152.14", "country_short": "DE", "country_long": "Germany", "region": "Hessen", "city": "Frankfurt am Main", "latitude": 50.11552, "longitude": 8.68417}}, "www.topografix.com": {"bad": "no", "geolocation": {"ip": "104.209.197.87", "country_short": "US", "country_long": "United States of America", "region": "Virginia", "city": "Boydton", "latitude": 36.667641, "longitude": -78.387497}}, "www.andnav.org": {"bad": "no", "geolocation": {"ip": "172.67.184.39", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "San Francisco", "latitude": 37.7757, "longitude": -122.395203}}, "otile4.mqcdn.com": {"bad": "no", "geolocation": null}, "otile3.mqcdn.com": {"bad": "no", "geolocation": null}, "www.placeyourdomainhere.com": {"bad": "no", "geolocation": {"ip": "54.249.56.71", "country_short": "JP", "country_long": "Japan", "region": "Tokyo", "city": "Tokyo", "latitude": 35.689507, "longitude": 139.691696}}, "a.tiles.mapbox.com": {"bad": "no", "geolocation": {"ip": "13.224.176.81", "country_short": "AU", "country_long": "Australia", "region": "New South Wales", "city": "Sydney", "latitude": -33.867851, "longitude": 151.207321}}, "play.google.com": {"bad": "no", "geolocation": {"ip": "216.58.200.110", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "Mountain View", "latitude": 37.405991, "longitude": -122.078514}}, "otile1.mqcdn.com": {"bad": "no", "geolocation": null}, "www.masterpass.com.ua": {"bad": "no", "geolocation": {"ip": "185.188.37.14", "country_short": "TR", "country_long": "Turkey", "region": "Istanbul", "city": "Istanbul", "latitude": 41.01384, "longitude": 28.949659}}, "www.wireless-village.org": {"bad": "no", "geolocation": {"ip": "172.67.131.214", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "San Francisco", "latitude": 37.7757, "longitude": -122.395203}}, "www.google.com": {"bad": "no", "geolocation": {"ip": "172.217.25.164", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "Mountain View", "latitude": 37.405991, "longitude": -122.078514}}, "b.tile.openstreetmap.org": {"bad": "no", "geolocation": {"ip": "151.101.30.217", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "San Francisco", "latitude": 37.7757, "longitude": -122.395203}}, "www.openstreetmap.org": {"bad": "no", "geolocation": {"ip": "130.117.76.12", "country_short": "US", "country_long": "United States of America", "region": "Georgia", "city": "Atlanta", "latitude": 33.749001, "longitude": -84.387978}}, "plus.google.com": {"bad": "no", "geolocation": {"ip": "142.250.66.238", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "Mountain View", "latitude": 37.405991, "longitude": -122.078514}}, "xmlpull.org": {"bad": "no", "geolocation": {"ip": "74.50.62.60", "country_short": "US", "country_long": "United States of America", "region": "Texas", "city": "Dallas", "latitude": 32.814899, "longitude": -96.879204}}, "www.openmobilealliance.org": {"bad": "no", "geolocation": {"ip": "104.26.8.105", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "San Francisco", "latitude": 37.7757, "longitude": -122.395203}}, "a.tile.cloudmade.com": {"bad": "no", "geolocation": null}, "maps.google.com": {"bad": "no", "geolocation": {"ip": "142.250.67.14", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "Mountain View", "latitude": 37.405991, "longitude": -122.078514}}, "otpsmart-firebase.firebaseio.com": {"bad": "no", "geolocation": {"ip": "35.201.97.85", "country_short": "US", "country_long": "United States of America", "region": "Missouri", "city": "Kansas City", "latitude": 39.099731, "longitude": -94.578568}}, "b.tile.cloudmade.com": {"bad": "no", "geolocation": null}, "a.tile.opencyclemap.org": {"bad": "no", "geolocation": {"ip": "88.99.70.11", "country_short": "DE", "country_long": "Germany", "region": "Hessen", "city": "Frankfurt am Main", "latitude": 50.11552, "longitude": 8.68417}}, "schemas.xmlsoap.org": {"bad": "no", "geolocation": {"ip": "104.74.51.204", "country_short": "AU", "country_long": "Australia", "region": "New South Wales", "city": "Sydney", "latitude": -33.867851, "longitude": 151.207321}}, "goo.gl": {"bad": "no", "geolocation": {"ip": "172.217.25.46", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "Mountain View", "latitude": 37.405991, "longitude": -122.078514}}, "b.tiles.mapbox.com": {"bad": "no", "geolocation": {"ip": "13.224.176.81", "country_short": "AU", "country_long": "Australia", "region": "New South Wales", "city": "Sydney", "latitude": -33.867851, "longitude": 151.207321}}, "c.tile.openstreetmap.org": {"bad": "no", "geolocation": {"ip": "151.101.30.217", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "San Francisco", "latitude": 37.7757, "longitude": -122.395203}}, "pagead2.googlesyndication.com": {"bad": "no", "geolocation": {"ip": "142.250.67.2", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "Mountain View", "latitude": 37.405991, "longitude": -122.078514}}, "otile2.mqcdn.com": {"bad": "no", "geolocation": null}, "xml.apache.org": {"bad": "no", "geolocation": {"ip": "207.244.88.140", "country_short": "US", "country_long": "United States of America", "region": "Virginia", "city": "Manassas", "latitude": 38.79995, "longitude": -77.54425}}, "c.tile.cloudmade.com": {"bad": "no", "geolocation": null}, "d.tiles.mapbox.com": {"bad": "no", "geolocation": {"ip": "13.224.176.81", "country_short": "AU", "country_long": "Australia", "region": "New South Wales", "city": "Sydney", "latitude": -33.867851, "longitude": 151.207321}}, "auth.cloudmade.com": {"bad": "no", "geolocation": {"ip": "23.21.136.107", "country_short": "US", "country_long": "United States of America", "region": "Virginia", "city": "Ashburn", "latitude": 39.04372, "longitude": -77.487488}}, "overlay.openstreetmap.nl": {"bad": "no", "geolocation": {"ip": "93.186.176.174", "country_short": "NL", "country_long": "Netherlands", "region": "Overijssel", "city": "Enschede", "latitude": 52.21833, "longitude": 6.89583}}, "www.w3.org": {"bad": "no", "geolocation": {"ip": "128.30.52.100", "country_short": "US", "country_long": "United States of America", "region": "Massachusetts", "city": "Cambridge", "latitude": 42.365078, "longitude": -71.104523}}, "c.tile.opencyclemap.org": {"bad": "no", "geolocation": {"ip": "88.99.98.237", "country_short": "DE", "country_long": "Germany", "region": "Bayern", "city": "Gunzenhausen", "latitude": 48.32333, "longitude": 11.60122}}, "wm.webservices.ifobs.cs.com": {"bad": "no", "geolocation": null}, "app-measurement.com": {"bad": "no", "geolocation": {"ip": "216.58.203.110", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "Mountain View", "latitude": 37.405991, "longitude": -122.078514}}, "openptmap.org": {"bad": "no", "geolocation": {"ip": "88.99.141.112", "country_short": "DE", "country_long": "Germany", "region": "Sachsen", "city": "Falkenstein", "latitude": 50.477879, "longitude": 12.37129}}, "a.tile.openstreetmap.org": {"bad": "no", "geolocation": {"ip": "151.101.30.217", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "San Francisco", "latitude": 37.7757, "longitude": -122.395203}}, "www.slf4j.org": {"bad": "no", "geolocation": {"ip": "83.166.144.67", "country_short": "CH", "country_long": "Switzerland", "region": "Geneve", "city": "Carouge", "latitude": 46.180962, "longitude": 6.13921}}, "ws.mobileapi.ifobs.cs.com": {"bad": "no", "geolocation": null}}, "emails": [{"emails": ["u0013android@android.com0", "u0013android@android.com"], "path": "l/h/a/a/d/a0.java"}], "strings": ["G]LFL[ MFM[ IFSFVGXIYKZNZSYVXXVZS[I[ SFUGWIXKYNYSXVWXUZS[", "MXVNTMRMPNOPOSPURVTVVUVR SRVR", "\"nightlyCashbox\" : \"\u041d\u0430\u044f\u0432\u043d\u0456\u0441\u0442\u044c \u0432\u0435\u0447\u0456\u0440\u043d\u044c\u043e\u0457 \u043a\u0430\u0441\u0438\"", "MWOMRQOV OMUM OVUV", "\"available\" : \"Available\"", "\"scale\" : \"Scale\"", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 2 && M0.cols == 3", "Extra closing '%c'", "CvSparseMat* cvCloneSparseMat(const CvSparseMat*)", "int cvGraphAddVtx(CvGraph*, const CvGraphVtx*, CvGraphVtx**)", "void cv::morphologyEx(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "CvFileNode* cvGetFileNodeByName(const CvFileStorage*, const CvFileNode*, const char*)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/glob.cpp", "\"archiveOperations\" : \"Archive of operations\"", "JZNFMM OFMM VFUM WFUM", "cv::Scalar cv::trace(cv::InputArray)", "static cv::Ptr<cv::GlFont> cv::GlFont::get(const string&, int, cv::GlFont::Weight, cv::GlFont::Style)", "void* cvPrevTreeNode(CvTreeNodeIterator*)", "void cvSet2D(CvArr*, int, int, CvScalar)", "J[XPXOWOWQYQYOXNUMRMONNONQOSQTTUVVWX ONNQ ORQSTTVU WVVZ NOOQQRTSVTWVWXVZS[P[MZLYLWNWNYMYMX", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "static void cv::SVD::backSubst(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "void* icvReadMat(CvFileStorage*, CvFileNode*)", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "The matrix is not continuous, thus its number of rows can not be changed", "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype", "\"latin_simbol_lower_case\" : \"Lowercase letters\"", "January", "basic_string::_M_replace_aux", "CvScalar cvSum(const CvArr*)", "NULL iterator pointer", "nimages > 0", "void cv::reduce(cv::InputArray, cv::OutputArray, int, int, int)", "\"common_google_play_services_notification_ticker\" : \"Google Play services error\"", "Tabs are prohibited in YAML!", "MXUHTGUFVGVHUJSL", "Mismatched closing tag", "Data is already allocated", "bad number of dimensions", "N2cv12DTRowInvokerE", "int cv::normHamming(const uchar*, const uchar*, int, int)", "dst0.data == dst.data", "F^MMKLJJJIKGMFNFPGQIQKPONULYJ[H[GZGX ^I^G]F\\FZGXIVLTNROPO ROSQSXTZU[V[XZYY[V", "double cvGetRealND(const CvArr*, const int*)", "OXOVQSSO VFPXPZQ[S[UZVYXV PNWN", "\"paymentCurrencyConversion\" : \"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0456\u044f \u0456\u043d\u043e\u0437\u0435\u043c\u043d\u043e\u0457 \u0432\u0430\u043b\u044e\u0442\u0438\"", "N9__gnu_cxx13stdio_filebufIwSt11char_traitsIwEEE", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/mathfuncs.cpp", "?void cvFindCornerSubPix(const void*, CvPoint2D32f*, int, CvSize, CvSize, CvTermCriteria)", "void cvSetImageCOI(IplImage*, int)", "\"workFromTo\" : \"From %1$s to %2$s\"", "LYVFUGVHWGVF NQOOQMTMUNUQR[Q^P`OaMbKbJaJ`K_L`Ka SMTNTQQ[P^O`Mb", "void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "J[WOXMXQWOVNTMPMNNMOMQNSPTUUWVXY NNMQ NRPSUTWU XVWZ MONQPRUSWTXVXYWZU[Q[OZNYMWM[NY", "JZZGXGUHSIPLONNQNUOXPZQ[S[TZUXVUVQUNTLQIOHLGJG", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_21VResizeCubicVec_32f16ILi0EEEEEEE", "3x3 mask can not be used for \"labeled\" distance transform. Use 5x5 mask", "H\\PFOGMM PGMM PFQGMM ZFYGWM ZGWM ZF[GWM", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF NHMJLNLSMWNY VYWWXSXNWJVH QFOGNIMNMSNXOZQ[ S[UZVXWSWNVIUGSF", "MXRMPNOPOSPURVSVUUVSVPUNSMRM STVW", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "(mask.type() == CV_8UC1 || mask.type() == CV_8SC1)", "LXUKRUQWPX VKSURWPXOXMWLUMTNUMV SKXK", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF OIMLLOKSKWLY UXWUXRYNYJXH SFQGOJNLMOLSLXMZN[ Q[SZUWVUWRXNXIWGVF LXMVOUPURVSXT]U^V^W] T^U_V_ SXS_T`V`W]W\\", "N2cv16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "void* cvLoad(const char*, CvMemStorage*, const char*, const char**)", "\"login_must_be_longer\" : \"\u041b\u043e\u0433\u0456\u043d \u043c\u0430\u0454 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u0432\u0456\u0434 %1$d \u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0432\"", "H]ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[S[UZWXXV QHOJNLMOLSLWMY TFRGPJOLNOMSMXNZP[", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<unsigned char, int, short int, 2048, cv::HResizeNoVec>; VResize = cv::VResizeLinear<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF", "AcHBHb IBIb [B[b \\B\\b DB`B DbMb Wb`b", "int cvGraphRemoveVtxByPtr(CvGraph*, CvGraphVtx*)", "src1.size == src2.size && src1.type() == src2.type()", "\"space\" : \"%1$s %2$s\"", "src.channels() == 1", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "\"news\" : \"\u041d\u043e\u0432\u0438\u043d\u0438\"", "void cvCmpS(const void*, double, void*, int)", "m.size[j] == sizes[j]", "void cv::accumulateSquare(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "\"masterpass_success_path_3\" : \"\n\nAll the data about your cards is stored there.\"", "\"createNewMessage\" : \"\u041d\u043e\u0432\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\"", "\"certNotExistInOperationsGenerate\" : \"You have no key for DS. Operations without a signature will not be accepted for execution. You can either transfer/generate a key of an internal CA or connect a key issued by external CA\"", "JYRRPQOQMRLTLUMWOXPXRWSUSTRR WMRR RMWMWR RMVNWR", "src1.size == dst.size && src1.channels() == dst.channels()", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF OPUP", "\"unknown\" : \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\"", "JYPKLX QKMX NKUKWLWNVPSQ UKVLVNUPSQ OQRQTRUSUUTWQXJX RQTSTUSWQX", "void cvGetHuMoments(CvMoments*, CvHuMoments*)", "\"editMessage\" : \"Editing the message\"", "JZLXJPZTXL", "D`H@Hd M@Md W@Wd \\@\\d MMWK MNWL MOWM MWWU MXWV MYWW", "H\\LJLKMKMJLJ LIMINJNKMLLLKKKJLHMGPFTFWGXIXLWNTO VGWIWLVN SFUGVIVLUNSO QOTOVPXRYTYWXYWZT[P[MZLYKWKVLUMUNVNWMXLX WRXTXWWY SOUPVQWTWWVZT[ LVLWMWMVLV", "JZRFQGSQRR RFRR RFSGQQRR MINIVOWO MIWO MIMJWNWO WIVINOMO WIMO WIWJMNMO", "LXQFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[", "%H:%M:%S", "MWOQPPQPRQRUSVTVUU VQUPTPSQQUPVOVNU", "Hardware", "\"logout\" : \"\u0421\u043c\u0435\u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"", "NVROQPRQSPRO SWRXQWRVSWSYQ[", "F^JJQJUKWLYNZQZSYVWXUYQZJZ ORZR", "\"atc\" : \"24 hours\"", "\"callTheBank\" : \"\u041f\u043e\u0437\u0432\u043e\u043d\u0438\u0442\u044c \u0432 \u0431\u0430\u043d\u043a\"", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "void cv::GlCamera::setScale(cv::Point3d)", "void GCGraph<TWeight>::addEdges(int, int, TWeight, TWeight) [with TWeight = double]", "void cvSetRemove(CvSet*, int)", "void cv::scalarToRawData(const Scalar&, void*, int, int)", "\"abc_capital_on\" : \"\u0412\u041a\u041b\"", "\"eca_list_header\" : \"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0445 \u0426\u0421\u041a \"", "error", "src.depth() == dst.depth()", "\"fingerprint_acquired_imager_dirty\" : \"\u0414\u0430\u0442\u0447\u0438\u043a \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u0456\u0432 \u0437\u0430\u0431\u0440\u0443\u0434\u043d\u0438\u0432\u0441\u044f. \u041e\u0447\u0438\u0441\u0442\u044c\u0442\u0435 \u0439\u043e\u0433\u043e \u0442\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "LXOPNRNTOVQVRTRR UPVRVTUVSVRT", "I[TMQMONMPLSLVMYNZP[R[TZVXWUWRVOTMRKQIQGRFTFVGXI", "opencv-image", "virtual void cv::_OutputArray::create(cv::Size, int, int, bool, int) const", "\"gotit\" : \"\u041f\u043e\u043d\u044f\u043b!\"", "data0.dims <= 2 && type == CV_32F && K > 0", "\"settingsConnection\" : \"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\"", "(unsigned)ptidx < (unsigned)points.rows", "\"mustUpdateToNewVersion\" : \"\u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b OTP Smart \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438.\"", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::RowNoVec]", "void cvOrS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "H\\SNP[ SNQ[ JPLNOMZM JPLOONZN", "JYNKNX OKOX ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LKOK", "JZMWMQNOONQMSMUNVOWQWW", "F]GQHOJMMMNNNQLWLYN[ LMMNMQKWKYLZN[P[RZTXVT XMVTUXUZV[Y[[Y\\W YMWTVXVZW[", "void cvSobel(const void*, void*, int, int, int)", "\"archive\" : \"Payments\"", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRTXTZV[XZYY[V WRUXUZV[", "Minimum distance between the centers of the detected objects.", "void cvXorS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cv::FileStorage::writeRaw(const string&, const uchar*, size_t)", "N2cv9RowFilterIffNS_19SymmRowSmallVec_32fEEE", "New header size must be non-less than sizeof(CvContour)", "arrays[i] != 0", "io/card/payment/CreditCard", "virtual bool cv::_InputArray::empty() const", "\"currentDirectory\" : \"Currect directory\"", "src1.size == dst.size && dst.type() == CV_8U", "Empty tags are not supported", "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", "IZPPMX PPNX TPSX TPTX KQMOXO KQMPXP", "GeneralizedHough.POSITION_ROTATION", "Unrecognized or unsupported array type", "MWQKPLPNQOSOTNTLSKQK", "F^JZJSKOLMNKQJSJVKXMYOZSZZ", "index is out of range", "\"sign\" : \"Sign\"", "F_JMILIJJHLGNGPHQIRKSP IJKHMHOIPJQLRPR[ [M\\L\\J[HYGWGUHTISKRP \\JZHXHVIUJTLSPS[", "double cvGetSpatialMoment(CvMoments*, int, int)", "Ar.size() == Size(3,3) || Ar.size() == Size(4, 3)", "\"validFrom\" : \"Valid from\"", "\"path_password_eye_mask_visible\" : \"M2,4.27 L2,4.27 L4.54,1.73 L4.54,1.73 L4.54,1 L23,1 L23,23 L1,23 L1,4.27 Z\"", "\"year\" : \"\u0433\u043e\u0434\"", "distCoeffs.size() == Size(1, 4) || distCoeffs.size() == Size(4, 1) || distCoeffs.size() == Size(1, 5) || distCoeffs.size() == Size(5, 1) || distCoeffs.size() == Size(1, 8) || distCoeffs.size() == Size(8, 1)", "The matrix is not continuous so the number of rows can not be changed", "\"generateCertificate\" : \"\u0417\u0433\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u043a\u043b\u044e\u0447\u0456\"", "__opencv_temp.XXXXXX", "void cv::calcHist(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, int, const int*, const float**, bool, bool)", "\"generate_cert_text_step_5_upload_cert\" : \"\u0412\u0456\u0434\u043f\u0440\u0430\u0432\u0438\u0442\u0438 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0456\u043d\u0448\u0438\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439\"", "void cv::ogl::Arrays::setTexCoordArray(cv::InputArray)", "\"decide_later\" : \"Decide later\"", "Input and output arrays must have the same number of channels", "H\\KFKL YFYIXLTQSSRWR[ SRRTQWQ[ XLSQQTPWP[R[ KJLHNFPFUIWIXHYF MHNGPGRH KJLINHPHUI", "\"special_symbols\" : \"Special characters (!#$%&'()*+,-./:;>=<?@[]^_`{|}~)\"", "\"continueAnyway\" : \"\u041f\u0440\u043e\u0434\u043e\u0432\u0436\u0438\u0442\u0438\"", "H\\WIVJWKXJXIWGUFRFOGMILKKOKULXNZQ[S[VZXXYUYTXQVOSNRNOOMQLT RFPGNIMKLOLUMXOZQ[ S[UZWXXUXTWQUOSN", "\"generate_cert_text_step_3\" : \"To confirm the key generation please enter the SMS code\"", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = double; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "{lambda(", "\"map_service\" : \"\u0412\u0456\u0434\u0434\u0456\u043b\u0435\u043d\u043d\u044f \u0431\u0430\u043d\u043a\u0443\"", "planar", "void cvSVBkSb(const CvArr*, const CvArr*, const CvArr*, const CvArr*, CvArr*, int)", "\"pushFromNotCurrentLogin\" : \"There is a notification for user %1$s, you are logged in as %2$s, would you like to log in as %1$s?\"", "CvSeq* cvEndWriteSeq(CvSeqWriter*)", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "J[NKNX OKOX VKVX WKWX LKYK LXQX TXYX", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXVXVUUX", "H\\KFY[ K[YF", "\"paymentCurrencyExchange\" : \"\u041e\u0431\u043c\u0456\u043d \u0432\u0430\u043b\u044e\u0442\"", "type_id", "MWOPOV OSPQRPTQUSUV", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[ `[ab a[ab", "void cv::KDTree::findOrthoRange(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "G\\WMQb XMRb WMYMSb UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT MOLQKTKWLY PMNOMQLTLWMZN[ NbVb RaOb R`Pb S`Tb RaUb", "float cv::intersectConvexConvex(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "virtual void cv::_OutputArray::release() const", "levels", "\"addAttachment\" : \"\u0414\u043e\u0434\u0430\u0442\u0438\"", "I\\XRWOVNTMRMONMQLTLWMYNZP[R[UZWXXUYPYKXHWGUFRFPGOHOIPIPH RMPNNQMTMXNZ R[TZVXWUXPXKWHUF", "!hasVotes || voteOutBuf.size() == posOutBuf.size()", "\"mtrl_picker_cancel\" : \"\"", "\"existingCertificateFailureType\" : \"\u041a\u043b\u044e\u0447 \u042d\u0426\u041f, \u0445\u0440\u0430\u043d\u0438\u043c\u044b\u0439 \u043d\u0430 \u044d\u0442\u043e\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435, \u0443\u0441\u0442\u0430\u0440\u0435\u043b. \u0418\u0437 \u0441\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043d\u043e\u0432\u044b\u0439 \u043a\u043b\u044e\u0447 \u0447\u0435\u0440\u0435\u0437 web-\u043a\u043b\u0438\u0435\u043d\u0442 \u0438\u043b\u0438 \u043f\u0443\u0442\u0451\u043c \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u043a\u043b\u044e\u0447\u0430 \u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\"", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "H][MQMNNLQKTKWLYMZO[Q[TZVWWTWQVOUNSM QMONMQLTLXMZ Q[SZUWVTVPUN UN[N", "\"choose\" : \"Select\"", "I\\MKMJNJNLLLLJMHNGPFTFWGXHYJYLXNWOSQ WHXIXMWN TFVGWIWMVOUP RQRTSTSQRQ RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "H\\KILKXWYYY[ LLXX KIKKLMXYY[ PPLTKVKXLZK[ KVMZ LTLVMXMZK[ SSXN VIVLWNYNYLWKVI VIWLYN", "\"disconnectCertFingerprintDescription\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s, %2$s\"", "\"user_setting\" : \"User setting\"", "expiry_year", "mean.size() == size", "\"preference_copied\" : \"\u0422\u0435\u043a\u0441\u0442 \"%1$s\" \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d \u0432 \u0431\u0443\u0444\u0435\u0440 \u043e\u0431\u043c\u0435\u043d\u0430\"", "KYOOLX POMX UOVPWPVOTORQOR ORPSRWTXVWWU ORQSSWTX", "F^UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWIXHY OLNNMOKOJNJLKJMHOGRFWFZG[I[KZMYNVORO WFYGZIZKYMXNVO ROUPVRWYX[ ROTPURVYX[Y[[Z]X", "\"inside_bank\" : \"\u0412 \u043c\u0435\u0436\u0430\u0445 \u0431\u0430\u043d\u043a\u0443\"", "\"changeGcmYes\" : \"Yes, start getting to this device\"", "void cvIntegral(const CvArr*, CvArr*, CvArr*, CvArr*)", "MWUQSPQPOQOSPTRUSVSWRXQX", "Bin ranges should go in ascenting order", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<unsigned char>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF QFOGNHMJLOLRMWNYOZQ[ S[UZVYWWXRXOWJVHUGSF", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "void cvReleaseMat(CvMat**)", "\"yesTurnItOn\" : \"\u0414\u0430, \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c\"", "H[MSXSXQWOVNSMQMNNLPKSKULXNZQ[S[VZXX WRWQVO MPLRLVMX VSVPUNSM QMONNOMRMVNYOZQ[", "\"generate\" : \"\u0417\u0433\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438\"", "level", "\"fingerprint_error_canceled\" : \"\u0414\u0456\u044e \u0437 \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u043e\u043c \u0441\u043a\u0430\u0441\u043e\u0432\u0430\u043d\u043e.\"", "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(cols, rows)", "JYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb RDQGQKRN RVQYQ]R`", "minScale", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "Null center or radius pointers", "mat.type() == type() && mat.size == size && func != 0", "N2cv9RowFilterIhiNS_12RowVec_8u32sEEE", "St21__ctype_abstract_baseIcE", "MWPMOQQPRPTQUSTURVQVOU PMTM", "Mag.size() == X.size() && Mag.type() == X.type()", "G]LML[ MMM[ MPONRMTMWNXPX[ TMVNWPW[ IMMM I[P[ T[[[", "(icvFitLine3D( (CvPoint3D32f*)points, ptseq->total, dist, (float)param, (float)reps, (float)aeps, line )) >= 0", "N2cv11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEE", "virtual void EmptyFuncTable::copy(const cv::gpu::GpuMat&, cv::Mat&) const", "H^ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[R[UZWXYT TFRGPINLMOLSLVMYNZP[ R[TZVXXT UT\\T", "F^JFN[ KFNVN[ LFOV RFOVN[ RFV[ SFVVV[ TFWV ZGWVV[ GFOF RFTF WF]F HFKG IFKH MFLH NFLG XFZG \\FZG", "\"enable_fingerprint\" : \"\u0410\u043a\u0442\u0438\u0432\u0443\u0432\u0430\u0442\u0438 Fingerprint\"", "\"lockUser\" : \"Lock the user\"", "N2cv16BaseColumnFilterE", "F]GQHOJMMMNNNPMTK[ LMMNMPLTJ[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W", "(icvContourSecArea( contour, slice, &area )) >= 0", "The sequence flags are invalid", "Point sequence can not be empty if the output is matrix", "E`QFNGKIILHOHRIUKXNZQ[T[WZZX\\U]R]O\\LZIWGTFQF ROQPQQRRSRTQTPSORO RPRQSQSPRP", "\"selectDateRangeFrom\" : \"\u0417 \u0434\u0430\u0442\u0438\u2026\"", "\"new_deposit\" : \"New deposit\"", "std::bad_typeid", "scn == 1 && dcn == 1", "MWOSPURVTUUSTQRPPQOSNY", "H\\PFMGLILKMMONSOVPXRYTYWXYWZT[P[MZLYKWKTLRNPQOUNWMXKXIWGTFPF", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "void {anonymous}::GHT_Guil_Full::calcScale(double)", "KZMONLOKPKQLRORX XOWLVKUKTLSOSX MONMOLPLQMRO XOWMVLULTMSO PXUX", "cv::SymmColumnVec_32f16s::SymmColumnVec_32f16s(const cv::Mat&, int, int, double)", "opencv-nd-matrix", "Thursday", "I\\XFX[ KFXF PPXP K[X[", "\"disconnectCertDialogTitle\" : \"Ok, disconnect the key\"", "\"step1Paring\" : \"Step 1: pairing\"", "!!%s %c", "std::bad_array_length", "void cv::insertChannel(cv::InputArray, cv::InputOutputArray, int)", "\"useFingerpintInsteadKeyDialogText\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044f \u0434\u0430\u043d\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0432\u044b \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0435 \u0440\u0438\u0441\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0432\u0432\u043e\u0434\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447!\n\n\u0414\u043b\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u043a \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443\n%1$s, %2$s\"", "I[LPXP LTXT", "\"fingerprint_acquired_partial\" : \"\u0412\u0456\u0434\u0431\u0438\u0442\u043e\u043a \u0440\u043e\u0437\u043f\u0456\u0437\u043d\u0430\u043d\u043e \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u043e. \u041f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "int cvSolve(const CvArr*, const CvArr*, CvArr*, int)", "!fixedSize() || ((gpu::GpuMat*)obj)->size() == Size(cols, rows)", "v.type() == type", "void cv::goodFeaturesToTrack(cv::InputArray, cv::OutputArray, int, double, double, cv::InputArray, int, bool, double)", "\"inside_bank\" : \"Within the bank\"", "F^MJMV NKNU VKVU WJWV IGKIMJPKTKWJYI[G IYKWMVPUTUWVYW[Y", "\"from\" : \"O\u0442\"", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[", "void cv::SparseMat::erase(int, int, int, size_t*)", "KYKFY^", "K[VLWKWOVLTKQKOLNMMPMSNVOWQXTXVW QKOMNPNSOVQX TXUWVU VSVX WSWX TSYS", "CLAHE", "\"fingerprint_acquired_too_slow\" : \"\u0412\u0438 \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u043f\u0430\u043b\u044c\u0446\u0435\u043c \u043d\u0430\u0434\u0442\u043e \u043f\u043e\u0432\u0456\u043b\u044c\u043d\u043e. \u041f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "void cv::ellipse(cv::Mat&, const cv::RotatedRect&, const Scalar&, int, int)", "KZNRMTLWLZN[O[RZTXUUUR ORNTMWMZN[ URVVWWXWZV", "\"owner\" : \"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446\"", "\"quickTransfer\" : \"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\"", "void cv::KDTree::getPoints(cv::InputArray, cv::OutputArray, cv::OutputArray) const", "\"fingerprint_acquired_too_fast\" : \"\u0412\u044b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0443\u0431\u0440\u0430\u043b\u0438 \u043f\u0430\u043b\u0435\u0446. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "LYPPMY UPTSSUQVPVOUOS TSTUUVVVWU", "void cvWarpPerspective(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "H]WJR[T[ ZFXJS[ ZFT[ ZFJUZU", "JYPKLX QKMX NKTKVLWNWQVTUVTWQXJX TKULVNVQUTTVSWQX", "void cvSmooth(const void*, void*, int, int, int, double, double)", "I[RLRX LRXR", "N2cv9RowFilterIsfNS_13RowVec_16s32fEEE", "void cv::mulSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "St14codecvt_bynameIwc9mbstate_tE", "void* icvReadHist(CvFileStorage*, CvFileNode*)", "\"firebase_database_url\" : \"https://otpsmart-firebase.firebaseio.com\"", "\"selectDateRange\" : \"\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044c \u0434\u0430\u0442\u0438\"", "void cv::grabCut(cv::InputArray, cv::InputOutputArray, cv::Rect, cv::InputOutputArray, cv::InputOutputArray, int, int)", "?void cvBackProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)", "JYNOMX OONUMX VRVOWOVRTUQWNXMX LOOO", "\"codeFromSms\" : \"Code from SMS\"", "\"requisitesIbanModeMessage\" : \"\u0420\u0430\u0445\u0443\u043d\u043e\u043a: %1$s\n\u0443 %2$s,\n\u041e\u0434\u0435\u0440\u0436\u0443\u0432\u0430\u0447: %3$s,\n\u041a\u043e\u0434 \u0404\u0414\u0420\u041f\u041e\u0423 \u043e\u0434\u0435\u0440\u0436\u0443\u0432\u0430\u0447\u0430: %4$s\"", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ ]G\\H]I^H]G[FXFUGSIRLR[ XFVGTISLS[ ]M][ ^M^[ DM^M D[K[ O[V[ Z[a[", "G]LFL[ MFM[ MPONRMTMWNXPX[ TMVNWPW[ IFMF I[P[ T[[[", "basic_filebuf::xsgetn error reading the file", "cv::Mat cv::getGaussianKernel(int, double, int)", "I\\LKLJMHNGQFTFWGXHYJYLXNWOUPRQ LKMKMJNHQGTGWHXJXLWNUORP MIPG UGXI XMTP RPRTSTSP RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "Destination is not CvMemStorage* nor CvMat*", "seq->total > 0 && CV_ELEM_SIZE(seq->flags) == seq->elem_size", "\"registry\" : \"List of documents\"", "\"abc_menu_ctrl_shortcut_label\" : \"Ctrl+\"", "\"inside_ukraine\" : \"\u041f\u043e \u0423\u043a\u0440\u0430\u0438\u043d\u0435 \u0432 \u0433\u0440\u0438\u0432\u043d\u0435\"", "JXOKMR PKNRNVPX NROPQOSOUPVRVTUVTWRXPXNWMUMR SOUQUTTVRX MKPK", "IYJRKPLONOOPOQMX MONPNQLX OQPPROTOVPVRS\\ TOUPURR\\", "The function only supports 32sC1 and 32fC1 datatypes", "H1.type() == H2.type() && H1.type() == CV_32F", "void cvGraphRemoveEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*)", "PTQPPQPSQTSTTSTQSPQP", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax8u; uchar = unsigned char]", "~void cv::dft(cv::InputArray, cv::OutputArray, int, int)", "LXNRVR", "((map1.type() == CV_32FC2 || map1.type() == CV_16SC2) && !map2.data) || (map1.type() == CV_32FC1 && map2.type() == CV_32FC1)", "NWRORX SOSX POSO PXUX", "N2cv27BilateralFilter_32f_InvokerE", "maskarr == 0", "void cv::morphOp(int, cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::Mat::Mat(const cv::Mat&, const Rect&)", "void cvInitTreeNodeIterator(CvTreeNodeIterator*, const void*, int)", "unsigned __int128", "MYRFRWSZU[W[ OMVM", "H\\WFMFLOMNPMSMVNXPYSYUXXVZS[P[MZLYKW", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF", "\"shouldUpdateToNewVersion\" : \"We have updated the app! To get all the benefits of OTP Smart, upgrade to the latest version.\"", "St16__numpunct_cacheIcE", "\"zeroTwentyFour\" : \"0/24\"", "\"host\" : \"\u0425\u043e\u0441\u0442\"", "\"generate_cert_text_step_4\" : \"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0456\u044f \u043a\u043b\u044e\u0447\u0430\u2026\"", "virtual void EmptyDeviceInfoFuncTable::resetDevice() const", "int cvSampleLine(const void*, CvPoint, CvPoint, void*, int)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short unsigned int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeLinearVec_32f16<-32768> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "H\\IQJOLMNMONPPPSNX ONORNVNZ OPMUMXNZP[R[TZVXXUYQYMXMXNYP", "\"password_toggle_content_description\" : \"Show password\"", "MWRPPQOSPURVTUUSTQRP", "Name should start with a letter or underscore", "\"step2SaveKeys\" : \"\u041a\u0440\u043e\u043a 2: \u0417\u0431\u0435\u0440\u0435\u0436\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430\"", "void* cvCvtSeqToArray(const CvSeq*, void*, CvSlice)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallVec_8u32s]", "\"change_login\" : \"Change the login\"", "labelsmat.isContinuous()", "\"abc_searchview_description_search\" : \"\u041f\u043e\u0438\u0441\u043a\"", "H\\IRJPKOMONPNRMUMWNX LOMPMRLULWNXOXQWRV TORVRWTX UOSVSWTXUXWWYUZRZOYOZP", "\"pref_listArray_key\" : \"listArray\"", "void icvPuts(CvFileStorage*, const char*)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "unknown morphological operation", "NWUQSPQPPQPRQS SSQSPTPUQVSVUU", "One of arguments' values is out of range", "Iterations flag is set and maximum number of iterations is <= 0", "_mean.size() == size", "dx >= 0 && dy >= 0 && dx+dy > 0", "I[YKKY LQLUKYOXSX LULXOX", "\"error_icon_content_description\" : \"Error\"", "F]OFI[ PFJ[ LFUFXGYHZKZOYSWWUYSZO[F[ UFWGXHYKYOXSVWTYRZO[", "Key should start with a letter or _", "\"confirmTransferingToBankID\" : \"I confirm transfering of my personal data to the BankID system\"", "BaGBQPFb FBPP EBPQ EB\\B^I[B Ga\\a Fb\\b^[[b", "void cv::fillConvexPoly(cv::Mat&, const Point*, int, const Scalar&, int, int)", "allocator", "%YAML:1.", "\"shouldUpdateToNewVersion\" : \"\u041c\u0438 \u043e\u043d\u043e\u0432\u0438\u043b\u0438 \u0434\u043e\u0434\u0430\u0442\u043e\u043a! \u0429\u043e\u0431 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0442\u0438\u0441\u044c \u0432\u0441\u0456\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u0430\u0433\u0430\u043c\u0438 OTP Smart \u043e\u043d\u043e\u0432\u0456\u0442\u044c \u0434\u043e\u0434\u0430\u0442\u043e\u043a \u0434\u043e \u043e\u0441\u0442\u0430\u043d\u043d\u044c\u043e\u0457 \u0432\u0435\u0440\u0441\u0456\u0457.\"", "G]RQQNPMNMLNKOJRJUKXMZP[T[WZYXZUZRYOXNVMTMSNRQ LOKRKULX XXYUYRXO NMMNLQLVMYNZP[ T[VZWYXVXQWNVM RQQb RQRa RQSb QbSb", "\"pinSetupChangeCodeDescPart1\" : \"Attention! Service charge for setting / changing of the PIN is paid according to current\"", "KYKRYR", "St15time_get_bynameIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "void cv::AlgorithmInfo::get(const cv::Algorithm*, const char*, int, void*) const", "signed char", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[P[ T[[[ WNMZ", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb JWLYNZQZTYWWYU ZOXNVNTPRSPYNb", "I]NPNOOOOQMQMONNPMTMVNWOXQXXYZZ[ VOWQWXXZ TMUNVPVXWZZ[[[ VRUSPTMULWLXMZP[S[UZVX NUMWMXNZ USQTOUNWNXOZP[", "libc.so", "The matrix data is not found in file storage", "No edges data", "dims == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)", "Assertion failed", "std::vector<cv::Mat>", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "JZWKVMTOPQMR SPMS UFVGWIWKVNTPQRMT", "NULL matrix header pointer", "Unsupported method", "NWRKRX SKSX PKUK PXUX", "G]KFK[ YFY[ KFYF", "basic_string::_S_create", "MWRHQGRFSGSIRKQL", "Either all the pointers should be null or they all should be non-null", "KZUFUWTZR[P[NZMXMVNUOVNW TFTWSZR[ QFXF", "\"approveWithSmsTitle\" : \"SMS-\u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f\"", "\"pref_syncConnectionTypes_default\" : \"settings\"", "PWSMSNTNTMSM PVRRLdKfIgHfHdIaL^O\\Q[TYWV", "The buffer is too small to fit the pyramid", "void cv::read(const cv::FileNode&, cv::SparseMat&, const cv::SparseMat&)", "\"abc_toolbar_collapse_description\" : \"\u0421\u0432\u0435\u0440\u043d\u0443\u0442\u044c\"", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEE", "\"common_google_play_services_enable_title\" : \"\u0423\u0432\u0456\u043c\u043a\u043d\u0443\u0442\u0438 \u0441\u0435\u0440\u0432\u0456\u0441\u0438 Google Play\"", "\"auto_exit\" : \"Auto logout\"", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin16u; uchar = unsigned char]", "\"certNotExistGenerate\" : \"\u0423 \u0432\u0430\u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u042d\u0426\u041f. \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u044b \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044b \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438/\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u044e\u0447 \u0432\u043d\u0443\u0442\u0440\u0438\u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0426\u0421\u041a \u0438\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0426\u0421\u041a\"", "This function in deprecated, do not use it", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "\"chip_text\" : \"Chip text\"", "I[WLMX LPXP LTXT", "None of array parameters is changed: dummy call?", "KYVSUPSOQOOPNQMSMUNWPXRXTWUVVTWQWNVLTKQKPLQLRK QOOQNSNVPX RXTVUTVQVNULTK", "\"requisites\" : \"Share\"", "H\\PKOLMLLKLIMGOFQFSGTITLSPQUOXMZJ[H[GZGXHWIXHY QFRGSISLRPPUNXLZJ[ ]G\\H]I^H^G]F[FYGWIULSPRURXSZT[U[WZYX", "I[VML[ WMM[ XMN[ XMLMLQ L[X[XW MMLQ NMLP OMLO QMLN S[XZ U[XY V[XX W[XW", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<float, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "_sizes && 0 < d && d <= CV_MAX_DIM", "void cv::SparseMat::create(int, const int*, int)", "std::ostream", "KYVBTDRGPKOPOTPYR]T`Vb TDRHQKPPPTQYR\\T`", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<float, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<float, float, float, cv::Cast<float, float>, cv::VResizeLinearVec_32f>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "J[TFSGUQTR TFTR TFUGSQTR OIPIXOYO OIYO OIOJYNYO YIXIPOOO YIOO YIYJONOO", "\"callTheBank\" : \"\u0417\u0430\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0443\u0432\u0430\u0442\u0438 \u0432 \u0431\u0430\u043d\u043a\"", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short int, float, float, cv::Cast<float, short int>, cv::VResizeLinearVec_32f16<0> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "uint8", "const_cast", "I[JFRPR[ ZFRP", "\"keyAttachedUnsuccessfully\" : \"Imported DS key and certificate do not match.\"", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin16s; uchar = unsigned char]", "expiry_month", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "void cvSubstituteContour(CvContourScanner, CvSeq*)", "N2cv6RowSumIddEE", "oriented", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/moments.cpp", "\"generate_cert_text_step_3\" : \"\u0414\u043b\u044f \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0456\u0457 \u043a\u043b\u044e\u0447\u0430 \u0432\u0432\u0435\u0434\u0456\u0442\u044c \u043a\u043e\u0434 \u0437 SMS\"", "\"added_new_fingerprint\" : \"A new fingerprint was added to the device. Use your login and password to enter the app. You can enable the Fingerprint option in the app settings\"", "_dst.data == data0", "N2cv13BaseRowFilterE", "L[UUTSRRPRNSMTLVLXMZO[Q[SZ VRUUSZPaOdOfPgRfScS\\U[XY[V", "void cv::patchNaNs(cv::InputOutputArray, double)", "\"error_proxy_authentication\" : \"\u0412\u0430\u0448 \u043f\u0440\u043e\u043a\u0441\u0456 \u0432\u0438\u043c\u0430\u0433\u0430\u0454 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457. \u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\"", "ksize > order", "JZOGO^ UFU] MNWL MOWM MWWU MXWV", "E^EVGSIRJSJTIXH[ IXJVLSNRPRQSQTPXO[ PXQVSSURWRXSXUWXWZX[Y[[Z\\Y^V", "KZNKVX OKWX WKNX LKQK TKYK LXQX TXYX", "cv::GlBuffer::GlBuffer(cv::InputArray, cv::GlBuffer::Usage)", "\"disconnectCertDialogText\" : \"After confirming this action the key will be removed from the device and disconnected from your account. Are you sure you want to disconnected the key?\"", "void cv::render(const cv::GlTexture&, cv::Rect_<double>, cv::Rect_<double>)", "H\\SMP[ JPLNOMZM", "\"keyTransferTimeout\" : \"\u0412\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043a\u043b\u044e\u0447\u0430 \u0438\u0441\u0442\u0435\u043a\u043b\u043e. \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u043a\u043b\u044e\u0447\u0430 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043d\u043e\u0432\u043e.\"", "I[MOLMLQMONNPMTMWNXPXQWSTT TMVNWPWQVSTT QTTTWUXWXXWZT[P[MZLXLWMVNWMX TTVUWWWXVZT[", "virtual void cv::MatOp_Identity::assign(const cv::MatExpr&, cv::Mat&, int) const", "throw", "CbGMG[H[ GMHMH[ HQKNMMPMRNSQS[ HQKOMNONQORQR[S[ SQVNXM[M]N^Q^[ SQVOXNZN\\O]Q][^[", "\"newMessage\" : \"\u041d\u043e\u0432\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\"", "OVVMUMTNSPQVPXOYNY QPUP", "\"fingerprint\" : \"Fingerprint\"", "\"search\" : \"\u041f\u043e\u0438\u0441\u043a\"", "\"hasnt_fingerprints_alert\" : \"The fingerprint scanner is detected on your device. You can enable the functionality of logging in with a fingerprint by adding a fingerprint in the settings.\"", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "\"v7_preference_off\" : \"\u0412\u042b\u041a\u041b.\"", "G`PMMNKPJSJTKWMYPZQZTYVWWTWSVPTNQMPM ]GWG[HUN ]G]M\\IVO \\HVN", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "KYRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXVXXWYV PRNTMVMYO[", "JZMMWW WMMW", "\"alreadyRegistered\" : \"I have an account\"", "MVOMOV OVUV", "\"choose_key\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u043a\u043b\u044e\u0447\"", "void cvBoxPoints(CvBox2D, CvPoint2D32f*)", "St12system_error", "\"step2SaveKeys\" : \"\u0428\u0430\u0433 2: \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0430\"", "KXOMO[ OSPPRNTMWM", "H]XGR[ YFS[ YFJUZU", "\"special_characters\" : \"\u2022 \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u044b\"", "Unknown projection type", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "MXOQQPVP SPRV", "MWMMOKQKTMVMWK", "dims <= 2 && m.dims <= 2 && size() == m.size() && tp == m.type() && ((rows == 3 && cols == 1) || (cols*channels() == 3 && rows == 1))", "\"usd\" : \"USD\"", "void cvCalcArrHist(CvArr**, CvHistogram*, int, const CvArr*)", "\"extCertRequested\" : \"\u0417\u0430\u044f\u0432\u043a\u0430 \u043d\u0430 \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430 \u043f\u0435\u0440\u0435\u0431\u0443\u0432\u0430\u0454 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0456 \u043e\u0431\u0440\u043e\u0431\u043a\u0438\"", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "JZJVLSNRPRQSQUPXOZM[L[KZKYLYKZ WSVTWTWSVRURSSRUQXQZR[U[XYZV QSRU SSQU PXQZ QXOZ", "The signatures must be 32fC1", "cv::Mat cv::Mat::diag(int) const", "JZNBNW NNQLTLVMWOWQVSSUQVNW NNQMTMVN UMVOVQUSSU", "void cvPyrDown(const void*, void*, int)", "Attribute name should be followed by '='", "*N12_GLOBAL__N_17GHT_PosE", "void* cvMemStorageAlloc(CvMemStorage*, size_t)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/deriv.cpp", "I[IVKSMROSOUM[ MRNSNUL[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "F^JJJQKULWNYQZSZVYXWYUZQZJ", "\"contactBank\" : \"Contact bank with\"", "\"preference_copied\" : \"\"%1$s\" copied to clipboard.\"", "NULL vertex array pointer", "\"lockUser\" : \"\u0417\u0430\u0431\u043b\u043e\u043a\u0443\u0432\u0430\u0442\u0438 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430\"", "MWSMMV SMUV OSTS", "src.type() == dst.type() && dst.rows % src.rows == 0 && dst.cols % src.cols == 0", "static const cv::Formatter* cv::Formatter::get(const char*)", "F\\KFK[ LGLZ MFM[ XGMR PPW[ QPX[ QNY[ HFPF UF[F H[P[ T[[[ IFKG JFKH NFMH OFMG WFXG ZFXG KZI[ KYJ[ MYN[ MZO[ WYU[ WYZ[", "c >= 0", "H\\RFJ[ RIK[J[ RIY[Z[ RFZ[ MUWU LVXV", "@aEMCLBJBICGEFFFHGIIIKHPGTE[ GTJLLHMGOFPFRGSISKRPQTO[ QTTLVHWGYFZF\\G]I]K\\PZWZZ[[\\[^Z_YaV", "LZWFUFSGRJR[S[ WFWGUGSH TGSJS[ OMVMVN OMONVN", "void {anonymous}::GHT_Guil_Full::getContourPoints(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<{anonymous}::GHT_Guil_Full::ContourPoint>&)", "void {anonymous}::GHT_Pos::filterMinDist()", "L[LVNRMWMZN[O[RZTXUUUR URVVWWYW[V", "E\\XFVHTKQPOSLWIZG[E[DZDXEWFXEY XFWJUTT[ XFU[ T[TYSVRTPRNQLQKRKTLWOZR[V[XZ", "], type='", "!centers.empty()", "\"logins_equals\" : \"Values of new login and current login must be different.\"", "Unsupported combination of buffer format (=%d), and destination format (=%d)", "H\\KQMNOMRMSOSR QMRORRQVPXNZL[K[JZJYKXLYKZ QVQYR[U[WZYW YNXOYPZOZNYMXMVNTPSRRVRYS[", "Cvoid cvMatchTemplate(const CvArr*, const CvArr*, CvArr*, int)", "int16", "\"workTime\" : \"Working hours\"", "OUPKSKSYPY", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK", "\"version\" : \"\u0412\u0435\u0440\u0441\u0438\u044f %1$s\"", "H\\LBL[ RBR[ XBX[", "\"common_google_play_services_notification_channel_name\" : \"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 Google Play\"", "MWOMOV OSPQRPTQUSUV", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = short int]", "H\\THT[ UFU[ UFJUZU Q[X[", "\"auto_exit\" : \"\u0410\u0432\u0442\u043e\u0432\u044b\u0445\u043e\u0434\"", "KWNURTTSURUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "\"generate_cert_password_hint\" : \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430\"", "\"generate_cert_text_step_5_require_otp\" : \"The key is successfully generated, the certificate authorization request was sent to the bank. To authorize a certificate you need to print out the request form, sign it and submit it to the bank branch.\n\nIf needed, you can transfer the key to other devices using this form or via app settings.\"", "December", "LC_COLLATE", "len % elemSize == 0", "p2.depth() == CV_32S || p2.depth() == CV_32F", "Only one of cost matrix or distance function should be non-NULL in case of user-defined distance", "elem_type == CV_32SC2", "\"validFrom\" : \"\u0414\u0456\u0454 \u0437\"", "\"scale_default\" : \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\"", "Unsupported combination of input and output array formats", "\"pdf_extract_account\" : \"\u0412\u0438\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0445\u0443\u043d\u043a\u0443 %1$s\"", "\"callback\" : \"\u0417\u0430\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u0432\u043e\u043d\u043e\u043a \u0438\u0437 \u0431\u0430\u043d\u043a\u0430\"", "\"abc_shareactionprovider_share_with_application\" : \"\u041f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e %s\"", "\"common_google_play_services_update_text\" : \"\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \"%1$s\", \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b Google\u00a0Play.\"", "G]PML[ UMVSWXX[ IPKNNM[M", "void cvSave(const char*, const void*, const char*, const char*, CvAttrList)", "status", "PTRKRY", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short unsigned int; uchar = unsigned char]", "Autotrace call", "decltype(nullptr)", "JZRRPQOQMRLTLUMWOXPXRWSUSTRR SLQQ WMRR XQSS", "\"mtrl_picker_text_input_date_range_start_hint\" : \"Start date\"", "std::abs(dsize.width - ssize.width*2) == dsize.width % 2 && std::abs(dsize.height - ssize.height*2) == dsize.height % 2", "I]NONPMPMONNPMTMVNWOXQXXYZZ[ WOWXXZZ[[[ WQVRPSMTLVLXMZP[S[UZWX PSNTMVMXNZP[", "LYUFTGUHVGUF MQNOPMSMTNTQRWRZS[ RMSNSQQWQZR[U[WYXW", "H\\LFL[ MGMZ LFTFWGXHYJYMXOWPTQ MGTGWHXJXMWOTP MPTPWQXRYTYWXYWZT[L[ MQTQWRXTXWWYTZMZ", "void cvSetReal3D(CvArr*, int, int, int, double)", "\"generate\" : \"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\"", "I[JFR[ ZFR[", "JZPXR[TX MURZWU RIRZ", "G[LFL[ MGMZ NFN[ IFYFYL NPTP TLTT I[Q[ JFLG KFLH OFNH PFNG TFYG VFYH WFYI XFYL TLSPTT TNRPTR TOPPTQ LZJ[ LYK[ NYO[ NZP[", "St9type_info", "Sparse matrix data is corrupted", "\"signGeneralCertFingerprintDescription\" : \"\u0423\u0432\u0430\u0433\u0430!\n\u0428\u043b\u044f\u0445\u043e\u043c \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0446\u0456\u0454\u0457 \u0434\u0456\u0457 \u0432\u0438 \u0431\u0435\u0440\u0435\u0442\u0435 \u043d\u0430 \u0441\u0435\u0431\u0435 \u0440\u0438\u0437\u0438\u043a\u0438, \u0449\u043e \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f\u043c \u0442\u0430\u043a\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0443 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 %1$s, %2$s!\"", "\"system_setting\" : \"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0434\u043e\u0434\u0430\u0442\u043a\u0443\"", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "void cvSeqPop(CvSeq*, void*)", "\"errorTryAgain\" : \"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437 \u0438\u043b\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u0432 \u0431\u0430\u043d\u043a.\"", "JZPOOMOKMKMMNNPOSOUNWL NKNN MLOL MMSO POUN WLSY", "\"inside_bank\" : \"\u0412\u043d\u0443\u0442\u0440\u0438 \u0431\u0430\u043d\u043a\u0430\"", "H\\RFKZ QIW[ RIX[ RFY[ MUVU I[O[ T[[[ KZJ[ KZM[ WZU[ WYV[ XYZ[", "N2cv11MorphFilterINS_5MaxOpIfEENS_9MorphFVecINS_7VMax32fEEEEE", "bad cell size (not 1, 2 or 4) in normHamming", "St12ctype_bynameIwE", "void cvFloodFill(CvArr*, CvPoint, CvScalar, CvScalar, CvScalar, CvConnectedComp*, int, CvArr*)", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FI[ YTWTUUTWTYV[X[ZZ[X[VYT", "\"text\" : \"Message text\"", "Inverse ratio of the accumulator resolution to the image resolution.", "cv::Scalar cv::mean(cv::InputArray, cv::InputArray)", "E^EVGSIRKSKUI[ IRJSJUH[ KUMSORPRRSRUP[ PRQSQUO[ RUTSVRWRYSYUXXXZY[ WRXSXUWXWZY[[Z\\Y^V", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RQQRRSSRRQ", "nelems >= 0 && (depth == CV_32F || depth == CV_32S)", "EfNSOUQVSVUUVSVQUOSNQNOONPMSMVNYP[S\\V\\Y[[Y\\W]T]P\\MZJXIUHRHOIMJKLIOHSHXI]KaMcPeTfYf]e`cba KLJNIRIXJ\\L`NbQdUeYe]d_cba POTO OPUP NQVQ NRVR NSVS OTUT PUTU aLaNcNcLaL bLbN aMcM aVaXcXcVaV bVbX aWcW", "Too large memory block is requested", "NWRFR[S[ RFSFS[", "Backtrace", "qualityLevel > 0 && minDistance >= 0 && maxCorners >= 0", "\"common_google_play_services_update_title\" : \"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b Google\u00a0Play\"", "F^JHNJPLQOQRPUNWJY JHMIOJQLRO RRQUOWMXJY ZHWIUJSLRO RRSUUWWXZY ZHVJTLSOSRTUVWZY IP[P IQ[Q", "MWSMSV SMNSVS", "\"exposed_dropdown_menu_content_description\" : \"Show dropdown menu\"", "void cvRelease(void**)", "\"connect\" : \"Connect\"", " untyped", "LYSMSX TKTX TKMTXT QXVX", "virtual size_t cv::_InputArray::total(int) const", "data.channels() == 1", "cv::Ptr<cv::BaseRowFilter> cv::getLinearRowFilter(int, int, cv::InputArray, int, int)", "virtual void {anonymous}::GHT_Ballard_PosScale::calcHist()", "G\\LFL[ MFM[ SLST IFYFYLXF MPSP I[Y[YUX[", "MWNPOPPQPSOV PSQQRPTPUQURTTTUUVVV", "KZPHPVQYRZT[V[XZYX QHQWRY PHRFRWSZT[ MMVM", "I\\RFR[ SFS[ LFKLKFZFZLYF O[V[", "G[LFL[ MFM[ SLST IFYFYLXF MPSP I[P[", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short int>; VecOp = cv::MorphIVec<cv::VMin16s>; cv::Point = cv::Point_<int>]", "J[VFVVUYSZQZOYNVMV VFWFWVVYUZS[Q[OZNYMV", "cv::RGB2HSV_b::RGB2HSV_b(int, int, int)", "Iterations do not converge", "KXOKOX PKPX MKRK MXWXWTVX", "image mush have CV_8UC3 type", "void cvSub(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "R-Table levels.", "KYNORX OORV VORX LOQO TOXO", "JXSOQOOPNQMSJ\\ QOOQNSK\\ SOUPVRVTUVTWRXPXNWMU SOUQUTTVRX", "ptnum > 3", "\"disconnectCertDialogTitle\" : \"\u0414\u0430, \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447\"", "img->dataOrder == IPL_DATA_ORDER_PIXEL", "G^RFR[ SFS[ IMJLLMMQNSOTQU JLKMLQMSNTQUTUWTXSYQZM[L TUVTWSXQYM[L\\M OFVF O[V[", "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", "void cv::GlArrays::bind() const", "G]JMN[ RMN[ RMV[ ZMV[", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "H]PFJ[ QFK[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W MFQF", "matM.rows == 2 && matM.cols == 3", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::SymmColumnVec_32f16s]", "\"special_characters\" : \"\u2022 special characters\"", "mask.size() == imsize && mask.channels() == 1", "$*06<B", "KYPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb", "\"add_cert_header\" : \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0430\"", "\"canNotUnPackData\" : \"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u044e\u0447. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b \u0432\u0432\u0435\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u043b\u0438 \u043a\u043e\u0434 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u044f. \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u043a\u043b\u044e\u0447\u0430 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043d\u043e\u0432\u043e.\"", "\"mtrl_picker_a11y_prev_month\" : \"Change to previous month\"", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "Bad normalization factor (set it to 1.0 if unsure)", "\"system_setting\" : \"App settings\"", "'thresh' node is missing", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[ PNVN", "m != 0 && _idx", "\"step2SaveKeys\" : \"Step 2: key saving\"", "+CCC++", "\"passwordTooShort\" : \"\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439. \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 %1$d \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\"", "N2cv17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEE", "I^LRJTIWIYJ[L[NZPX RRPXPZQ[S[UZWXXUXR XRYVZW\\W^V", "\"error_proxy_authentication\" : \"\u0412\u0430\u0448 \u043f\u0440\u043e\u043a\u0441\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435\"", "\"openApp\" : \"\u041e\u0442\u043a\u0440\u044b\u0442\u044c OTP Smart Business\"", "LYNCNG VERLPP WCTIQP NEPCRCUE NEPDRDUEVE MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "\"change_password\" : \"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c\"", "(type == CV_8U && dtype == CV_32S) || dtype == CV_32F", "dst.type() == src.type()", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "channels != 0 || nimages == dims", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 6>; VecOp = cv::NoVec<float, float>]", "\"changeLocalWarning\" : \"The language will be changed after you exit the settings\"", "\"send\" : \"Send\"", "JYNON\\ OOO\\ ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LOOO L\\Q\\", "F^GQHOJMLMMNNPNSL[ MNMSK[ MPLTJ[L[ NSPPRNTMVMXNYPYSWX XNXRWVWZ XPVUVXWZX[Z[\\Y]W", "void icvXMLWriteComment(CvFileStorage*, const char*, int)", "virtual void cv::ColumnSum<int, short unsigned int>::operator()(const uchar**, uchar*, int, int, int)", "I[LKLJMHNGPFTFVGWHXJXLWNVORQRT RYQZR[SZRY", "void cv::pow(cv::InputArray, double, cv::OutputArray)", "\"APP_NAME\" : \"OTP Smart\"", "!GHT_Ballard_Pos_info_auto.name().empty()", "\"abc_searchview_description_query\" : \"Search query\"", "uchar* cvPtr3D(const CvArr*, int, int, int, int*)", "KZTKQ\\ UKP\\ QONPMRMUNWQXTXWWXUXRWPTOQO QOOPNRNUOWQX TXVWWUWRVPTO", "St10ctype_base", "\"name\" : \"\u041d\u0430\u0437\u0432\u0430\"", "prediction", "PURQRRSRSQRQ", "z4I5z", "\"appOtp_name\" : \"OTP Smart\"", "release function pointer is NULL", "void cvXor(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "MWMMWW", "MWRJRP OKUO UKOO", "\"choosePhoto\" : \"Select photo\"", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "hdr != 0", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 8>; VecOp = cv::NoVec<int, short unsigned int>]", "\"abc_capital_on\" : \"ON\"", "2.4.13", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_21VResizeCubicVec_32f16ILin32768EEEEEEE", "imageDy.type() == imageDx.type() && imageDy.size() == imageSize", "\"inside_ukraine\" : \"\u041f\u043e \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0432 \u0433\u0440\u0438\u0432\u043d\u0456\"", "I\\MFM[ MQPNRMUMWNXQX[", "dstY <= roi.height", "\"caution\" : \"Attention\"", "\"manageKeysHeader\" : \"Key managing\"", "cn <= 4", "MWOPOY OSPURVTUUSTQRPPQOS", "\"turnItOnLater\" : \"I'll turn it on later\"", "I]]Z]X\\U[SXPVOSNONLOJPIQISJTLUOVSVVUXT[Q\\O]L]J", "Null compare function", "G\\KFK[ KFTFWGXHYJYLXNWOTP KPTPWQXRYTYWXYWZT[K[", "Unknown object", "\"registration_fingerprint\" : \"fingerprint\"", "_corners && _corner_count", "Unknown/unsupported adaptive threshold method", "Bad number of channels", "std::future_error", "\"operationAbsenceOfDebtCertificate\" : \"Certificate about the absence of debt on the loan\"", "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth", "\"turnItOnLater\" : \"\u042f \u0432\u043a\u043b\u044e\u0447\u0443 \u043f\u043e\u0437\u0436\u0435\"", "N2cv6RowSumIsiEE", "CvFileNode* cvGetFileNode(CvFileStorage*, CvFileNode*, const CvStringHashNode*, int)", "\"passwordSymbolPatternNotValid\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0446\u0438\u0444\u0440\u044b, \u0431\u0443\u043a\u0432\u044b \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0438 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0445 \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b%1$s\"", "NULL double pointer", "\"fcm_fallback_notification_channel_label\" : \"Miscellaneous\"", "L[LVNSPO QLHg RLIg OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "\"paymentInner\" : \"Between own accounts\"", "\"error\" : \"Error\"", "schar* cvSeqPushFront(CvSeq*, const void*)", "\"match_passwords_message\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0456 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f %1$s\"", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK PWPUQTSTTUUZV[W[XZ TUUXVZW[", "!fixedSize() || len == vv.size()", "NWRKRX SKSX PKSK PXUX", "N2cv5CLAHEE", "void cvAndS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "G]PNL[ PNM[ VNV[ VNW[ IPKNNM[M IPKONN[N", "\"days_2_4\" : \"\u0434\u043d\u044f\"", "int cvNextGraphItem(CvGraphScanner*)", "OUPKQLRNROQQSRQSRURVQXPY", "\"existingCertificateInfo\" : \"\u0406\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044f \u0449\u043e\u0434\u043e \u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u0443\"", "JYKPLPMQMSLV MSNQOPQPRQRSQV RSSQTPVPWQWRVTVUWVXV", "I[LKOX MKOT RKOX RKUX SKUT XKUX JKOK VKZK", "F^KFK[ LFL[ HFOF LPSPUOVMWIXGYFZF[G[HZIYHZG SPUQVSWXXZY[ SPTQUSVXWZX[Z[[Z\\X H[O[", "void cvAdd(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "I\\XNYOZNYMXMVNUO QMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM OONQNSOU UUVSVQUO QMPNOPOTPVQW SWTVUTUPTNSM NUMVLXLYM[N\\Q]U]X^Y_ N[Q\\U\\X] LYMZP[U[X\\Y^Y_XaUbObLaK_K^L\\O[ ObMaL_L^M\\O[", "F^ZFJMZT JVZV J[Z[", "_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "\"unknown\" : \"Unknown\"", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "CvSparseNode* cvInitSparseMatIterator(const CvSparseMat*, CvSparseMatIterator*)", "JZRYQ\\ RYS\\ Q\\S\\ RYVXVVXUXRZQZLYIXHVHTGPGNHLHKIJLJQLRLUNVNXRY", "boolean", "ksize % 2 == 1", "void cvStartWriteStruct(CvFileStorage*, const char*, int, const char*, CvAttrList)", "unknown/unsupported type of '%s' parameter == %d", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M MTWT I[P[ T[[[", "N2cv7MatOp_TE", "MWRLRX OOUO MUOWQXSXUWWU", "\"empty_file_error\" : \"\u0424\u0430\u0439\u043b %1$s \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 0 \u0431\u0430\u0439\u0442. \u041d\u0435\u043b\u044c\u0437\u044f \u0432\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0444\u0430\u0439\u043b\u044b.\"", "void cv::exp(cv::InputArray, cv::OutputArray)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, unsigned char>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "LXUPVRVQUPSOQOOPNRNTOVRX QOOQOTPVRXSYS[R\\P\\", "St8messagesIcE", "void cv::GlCamera::lookAt(cv::Point3d, cv::Point3d, cv::Point3d)", "\"common_open_on_phone\" : \"Open on phone\"", "G]KFK[ LIL[K[ LIY[ KFXX XFXX XFYFY[", "\"moneybox\" : \"\u041a\u043e\u043f\u0438\u043b\u043a\u0430\"", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short unsigned int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "CV_IS_SPARSE_MAT(m)", "MXRKQLQMSNVN TNQOPPPRRSUS TNROQPQRRS SSPTOUOWQXSYTZT[S\\Q\\ SSQTPUPWQX", "\"externalCards\" : \"My cards of other banks\"", "I[LOOX MOOU ROOX ROUX SOUU XOUX JOOO VOZO", "virtual void cv::MatOp_Bin::assign(const cv::MatExpr&, cv::Mat&, int) const", "KYUARBPCNELHKLKRLUNWQXSXVWXUYR KPLMNKQJSJVKXMYPYVXZV]T_R`Oa", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax16s; uchar = unsigned char]", "\"fingerprint_success\" : \"Fingerprint recognized\"", "Sequence element should not have name (use <_></_>)", "\"copy\" : \"\u0421\u043a\u043e\u043f\u0456\u044e\u0432\u0430\u0442\u0438\"", "J[WKQKOLNNNX QKPLONOX UKVLVX WKWX LOVO LXQX TXYX", "The image/matrix format is not supported by the function", "int cv::MorphColumnFVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin32f; uchar = unsigned char]", "X.size == Y.size && type == Y.type() && (depth == CV_32F || depth == CV_64F)", "MWNROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "CvSize cvGetSize(const CvArr*)", "result.size() == cv::Size(std::abs(img.cols - templ.cols) + 1, std::abs(img.rows - templ.rows) + 1) && result.type() == CV_32F", "N2cv12ColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "\"exit\" : \"\u0412\u0438\u0445\u0456\u0434\"", "St14collate_bynameIwE", "\"generate_cert_text_step_5_view_request\" : \"\u041f\u0435\u0440\u0435\u0433\u043b\u044f\u043d\u0443\u0442\u0438 \u0437\u0430\u043f\u0438\u0442\"", "NVPOTU TOPU NRVR", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L\\L\\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ ZOXVXWYX[X\\W]U [OYVYWZX IO[O", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "src.type() == dst.type() && src.size() == dst.size()", "\"abc_capital_off\" : \"OFF\"", "MWNPOPPQPROTOUPVRVTUURUP", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZLYNXOUP XHYJYLXN UFWGXIXMWOUP NPUPXQYRZTZWYYXZU[I[ XRYTYWXY UPWQXSXXWZU[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "MWUPUVTXRYPY USTQRPPQOSPURVTUUS", "cameraMatrix0.size() == Size(3,3)", "St12domain_error", "H\\IR[R IQ[Q", "\"mtrl_picker_date_header_title\" : \"Select a Date\"", "void cvGetRectSubPix(const void*, void*, CvPoint2D32f)", "p == evals0.data", "\"certBlocked\" : \"\u0412\u0430\u0448 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442 \u0449\u0435 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0431\u0430\u043d\u043a\u043e\u043c\"", "G]HQIOKMMMNNOPOSNWKb NNNSMWJb NPMTIb OTPQQORNTMVMXNYOZRZTYWWZT[R[PZOWOT XOYQYTXWWY VMWNXQXTWWVYT[ FbNb JaGb J`Hb K`Lb JaMb", "JZJRNKVYZR", "MWNVVV", "NVRQQRRSSRRQ", "H\\WMW[X[ WMXMX[ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "\"not_found_services\" : \"For operation with the map you need to install Google Play Services\"", "\"material_slider_range_end\" : \"Range end,\"", "void cvUndistort2(const CvArr*, CvArr*, const CvMat*, const CvMat*, const CvMat*)", "G]KKYY YKKY", "\"checkConnection\" : \"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435\u2026\"", "\"lookup_code_text\" : \"\u0412\u0432\u0435\u0434\u0456\u0442\u044c LookUp-\u043a\u043e\u0434 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457. \u0414\u0456\u0437\u043d\u0430\u0442\u0438\u0441\u044f \u043a\u043e\u0434 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0437 SMS-\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f, \u043d\u0430\u0434\u0456\u0441\u043b\u0430\u043d\u043e\u0433\u043e \u0432\u0430\u043c \u0431\u0430\u043d\u043a\u043e\u043c-\u0435\u043c\u0456\u0442\u0435\u043d\u0442\u043e\u043c, \u0430\u0431\u043e \u0437\u0432\u0435\u0440\u043d\u0456\u0442\u044c\u0441\u044f \u0437\u0430 \u0434\u0435\u0442\u0430\u043b\u044f\u043c\u0438 \u0434\u043e \u043a\u043e\u043b-\u0446\u0435\u043d\u0442\u0440\u0443 \u0431\u0430\u043d\u043a\u0443-\u0435\u043c\u0456\u0442\u0435\u043d\u0442\u0430\"", "\"caution\" : \"\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435\"", "\"appOtp_name\" : \"OTP Smart PP\"", "\"signGeneralCertFingerprintDescription\" : \"\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435!\n\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044f \u0434\u0430\u043d\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0432\u044b \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0435 \u0440\u0438\u0441\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0432\u0432\u043e\u0434\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 %1$s, %2$s!\"", "\"addAttachment\" : \"Add\"", "I[SMUNVOWOVNSMQMMNLOLQMRQS SSQSMTKVKXMZP[S[VZXXWXVZ NNMOMQNR MULVLXMY QMONNONQORQS QSNTMVMXNZP[", "G]LML[ MMM[ WMW[ XMX[ IM[M I[P[ T[[[", "PWSMSNTNTMSM PVRRPXPZQ[R[TZUYWV", "cv::Ptr<cv::BaseRowFilter> cv::getMorphologyRowFilter(int, int, int, int)", "Accuracy must be non-negative", "cxcore", "NWSKPVPWQXSXTWUU TKQVQWRX POUO", "OWOVSQUNVLWIWGVFTGSIQQNZKaJdJfKgMfNcOZP[R[TZUYWV", "KZSPQX SPRX MQOOXO MQOPXP", "\"paymentCurrencyBuySell\" : \"\u041f\u043e\u043a\u0443\u043f\u043a\u0430/\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u0432\u0430\u043b\u044e\u0442\u044b\"", "*N12_GLOBAL__N_124CLAHE_Interpolation_BodyE", "\"withdrawalCardConfirmed\" : \"\u00ab%1$s\u00bb c\u043f\u0438\u0441\u0430\u043d\u043d\u044f \u0437 \u043a\u0430\u0440\u0442\u043a\u0438 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043e %2$s\"", "N2cv12ColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "\"home\" : \"Home\"", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IW[W I[[[", "9D)5:", "The flow matrix must be 32fC1", "virtual void {anonymous}::GHT_Ballard_Pos::findPosInHist()", "St13basic_filebufIcSt11char_traitsIcEE", "void icvYMLParse(CvFileStorage*)", "\"abc_action_bar_up_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432\u0433\u043e\u0440\u0443\"", "H]NFLL [FZIXLSRQUPWO[ XLRRPUOWN[ MIPFRFWI NHPGRGWIYIZH[F", "MXP[OZPYQZQ[P]N_", "I[MILKLMMOOPRPUOWNZK[H[GZFYFWGVHTKPUOWMZK[ VHTLRSQVPXNZK[I[HZHXIWKWMXPZR[U[WZYX", "\"keyPass\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447\"", "\"editMessage\" : \"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\"", "\"latin_simbol_upper_case\" : \"Uppercase letters\"", "\"character_counter_content_description\" : \"Characters entered %1$d of %2$d\"", "src.depth() == CV_8U && (cn == 1 || cn == 3 || cn == 4)", "MWQMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM", "H\\NMJ[ OMK[ XMYNZNYMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW", "(anonymous namespace)", "JYPKLX QKMX SORS NKXKWNWK OQRQ JXTXUUSX", "dst.rows <= evects.rows && dst.cols == data.cols", "H^ULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWSSWPYNZK[I[HZHXIWKWMXPZS[V[YZ[X", "St14codecvt_bynameIcc9mbstate_tE", "\"workFromTo\" : \"\u0421 %1$s \u043d\u0430 %2$s\"", "\"fingerprint_acquired_insufficient\" : \"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "L[LVNRLXLZM[O[QZSXUU VRPdOfMgLfLdMaP^S\\U[XY[V", "G\\LMLb MNMa IMNMNb NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ IbQb JMLN KMLO LaJb L`Kb N`Ob NaPb", "\"privateKeySuccessfullyConnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\"", "I[XOWNTMQMNNMOLQLSMUOWSZT\\T^S_Q_", "G]PGMHJJHMGPGTHWJZM\\P]T]W\\ZZ\\W]T]P\\MZJWHTGPG", "F^JJQJUKWLYNZQZSYVWXUYQZJZ", "I[KYYK QLULYKXOXS ULXLXO", "\"pay\" : \"\u0421\u043f\u043b\u0430\u0442\u0438\u0442\u0438\"", "\"mtrl_picker_date_header_selected\" : \"%1$s\"", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "G]LMLTMVPWRWUVWT MMMTNVPW WMW[ XMX[ IMPM TM[M T[[[", "St7codecvtIcc9mbstate_tE", "edges", "opencv_storage", "Nonzero offset is not supported in CV_LINK_RUNS yet", "edgeOrg( edge, &t ) > 0", "\"gotit\" : \"Got it!\"", "D`MFGZ MGNYN[ NFOY OFPX [FPXN[ [FU[ \\FV[ ]FW[ JFOF [F`F D[J[ R[Z[ KFMG LFMH ^F\\H _F\\G GZE[ GZI[ VZS[ VYT[ WYX[ VZY[", "H]OJPKOLNKNJOHPGSFWFZG[I[KZMYNSPQQQSRTTT WFYGZIZKYMXNVO PYOZP[QZPY", "\"dataToTransfered\" : \"\u0414\u0430\u043d\u0456, \u044f\u043a\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0431\u0443\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0456:\"", "\"abc_searchview_description_query\" : \"\u041f\u043e\u0438\u0441\u043a\u043e\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\"", "static std::string cv::FileStorage::getDefaultObjectName(const string&)", "\"i_understand\" : \"\u042f \u043f\u043e\u043d\u0438\u043c\u0430\u044e\"", "J[YPXPXQYQYPXOWOVPUTTVSWQXOXMWLVLTMSORRPSNSLRKPKOLONPQUWWXXXYW OXMVMTOR ONPPVWWX", "\"abc_menu_delete_shortcut_label\" : \"delete\"", "float32", "LYVPVQWQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWNVOVOW", "A single _ is a reserved tag name", "LYPFSCSP RDRP OPVP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "\"certFingerprintTitle\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Fingerprint\"", "char* icvYMLParseValue(CvFileStorage*, char*, CvFileNode*, int, int)", "strlen(encoding) < 1000", "\"generate_cert_header\" : \"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u044e\u0447\u0430\"", "\"abc_menu_alt_shortcut_label\" : \"Alt+\"", "\"stringLengthMastBeMost\" : \"\u0414\u043b\u0438\u043d\u0430 \u043f\u043e\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u0435\u0435\"", "alnum", "\"eur\" : \"EUR\"", "H]ULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWTTWPZN[K[JZJXKWNWPXQYR[R^QaPcNfLgKfKdLaN^Q[TYZV", "LRLFLRRRLF LIPQ LLOR LOMQ", "int cvGetDimSize(const CvArr*, int)", "St14basic_ofstreamIcSt11char_traitsIcEE", "The last dimension full size is not divisible by new number of channels", "St15basic_streambufIcSt11char_traitsIcEE", "MWUMOV OMUM OVUV", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<unsigned char>; VecOp = cv::MorphIVec<cv::VMax8u>; cv::Point = cv::Point_<int>]", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEE", "\"common_signin_button_text\" : \"\u0423\u0432\u0456\u0439\u0442\u0438\"", "\"zxing_msg_camera_framework_bug\" : \"\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043a\u0430\u043c\u0435\u0440\u044b. \u041c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e.\"", "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", "St19basic_istringstreamIwSt11char_traitsIwESaIwEE", "I[NFN[ OGOZ PFP[ KFZFZL K[S[ LFNG MFNH QFPH RFPG UFZG WFZH XFZI YFZL NYM[ NZL[ PYQ[ PZR[", "\"approveWithSmsTitle\" : \"SMS-\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435\"", "\"change_password\" : \"\u0417\u043c\u0456\u043d\u0438\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\"", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "uint64", "\"mtrl_picker_day_of_week_column_header\" : \"Column of days: %1$s\"", "\"mtrl_picker_text_input_date_range_end_hint\" : \"End date\"", "ios_base::_M_grow_words is not valid", "void cv::GlBuffer::unbind() const", "St14basic_ofstreamIwSt11char_traitsIwEE", "\"demoAlertMessage\" : \"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0430.\"", "\"path_password_strike_through\" : \"M3.27,4.27 L19.74,20.74\"", "void cvSubRS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cv::minMaxIdx(cv::InputArray, double*, double*, int*, int*, cv::InputArray)", "std::bad_exception", "The readed sequence is a scalar, thus len must be 1", "int cvGraphAddEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*, const CvGraphEdge*, CvGraphEdge**)", "JZMPQRTTVVWYW[V]U^ MQST MRPSTUVWWY", "\"error_proxy_authentication\" : \"Your proxy requires authentication. Setup to set the appropriate. Not able to establish a secure SSL - connection. Check with your bank\"", "vector::_M_insert_aux", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/filter.cpp", "\"useFingerpintInsteadKeyDialogText\" : \"\u0428\u043b\u044f\u0445\u043e\u043c \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0446\u0456\u0454\u0457 \u0434\u0456\u0457 \u0432\u0438 \u0431\u0435\u0440\u0435\u0442\u0435 \u043d\u0430 \u0441\u0435\u0431\u0435 \u0440\u0438\u0437\u0438\u043a\u0438, \u0449\u043e \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f\u043c \u0442\u0430\u043a\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0443 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430!\n\n\u0414\u043b\u044f \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0432\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n%1$s, %2$s\"", "\"zxing_msg_default_status\" : \"\u0427\u0442\u043e\u0431\u044b \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0448\u0442\u0440\u0438\u0445-\u043a\u043e\u0434, \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e \u0432 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0432\u0438\u0434\u043e\u0438\u0441\u043a\u0430\u0442\u0435\u043b\u044f.\"", "G\\HQIOKMMMNNNPMUMXNZO[Q[SZUWVUWRXMXJWGUFSFRHRJSMUPWRZT", "MXSFRGSHTGSF TMT_SaQbObNaN`O_P`Oa SMS_RaQb PMTM", "KYOBOb OBVB ObVb", "getEdge(getEdge(getEdge(e,NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT) == e", "void cv::PCA::project(cv::InputArray, cv::OutputArray) const", "19DeviceInfoFuncTable", "\"numbers\" : \"\u2022 numbers\"", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = double; uchar = unsigned char]", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/copy.cpp", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF NYNXOVQURUTVUXV_W`Y`Z^Z] UXV\\W^X_Y_Z^", "errcode == 0", "St18basic_stringstreamIcSt11char_traitsIcESaIcEE", "NWQMTV WMNV", "\"certNotAuthorized\" : \"\u0417\u0430\u044f\u0432\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435\"", "scale must be positive", "\"copyright\" : \"\u00a92011-2016 CS Ltd\"", "KYQVOUNSNQOOQNSNUOVQVSUUSVQV SVVS QVVQ OUUO NSSN NQQN", "void cv::flip(cv::InputArray, cv::OutputArray, int)", "\"menu_settings\" : \"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\"", "N2cv9RowFilterIhiNS_17SymmRowSmallNoVecEEE", "\"notData\" : \"no data\"", "\"keyAttachedSuccessfully\" : \"\u041a\u043b\u044e\u0447 \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u0438\u0439\"", "void cv::GlBuffer::create(int, int, int, cv::GlBuffer::Usage)", "N2cv11MorphFilterINS_5MinOpIsEENS_9MorphIVecINS_7VMin16sEEEEE", "void cv::calcCovarMatrix(const cv::Mat*, int, cv::Mat&, cv::Mat&, int, int)", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "\"paymentConfirmed\" : \"C\u043f\u043b\u0430\u0442\u0430 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u0430!\"", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "LC_NUMERIC", "Odd-size DCT's are not implemented", "void cvSeqPopFront(CvSeq*, void*)", "dvec[j].channels() == 1", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/templmatch.cpp", "D`D``D", "0 <= idx1 && idx1 < ptnum", "src.size() == dst.size() && dst.type() == CV_32FC1", "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "\"login\" : \"Login\"", "\"bankid\" : \"Identification through\nthe NBU BankID System\"", "void cv::MatConstIterator::pos(int*) const", "m.dims == dims", "\"keyTransfer\" : \"Key transfer\"", "\"pinSetupChangeCodeDescPart3\" : \"If you have a chip card, for the correct operation of the new PIN after its set / change it is necessary to perform a cash withdrawals or balance check as the first operation at an ATM of OTP Bank or at ATMs of other major ukrainian banks.\"", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RKRY KRYR", "CV_IS_MAT(_src) && CV_IS_MAT(_dst) && (_src->rows == 1 || _src->cols == 1) && (_dst->rows == 1 || _dst->cols == 1) && _src->cols + _src->rows - 1 == _dst->rows + _dst->cols - 1 && (CV_MAT_TYPE(_src->type) == CV_32FC2 || CV_MAT_TYPE(_src->type) == CV_64FC2) && (CV_MAT_TYPE(_dst->type) == CV_32FC2 || CV_MAT_TYPE(_dst->type) == CV_64FC2)", "\"repeatPassword\" : \"\u041d\u043e\u0432\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c (\u0449\u0435 \u0440\u0430\u0437)\"", "void cv::PolyLine(cv::Mat&, const Point*, int, bool, const void*, int, int, int)", "/proc/cpuinfo", "G]ZIJY ZIWJQJ XKUKQJ ZIYLYR XKXNYR QRJR PSMSJR QRQY PSPVQY", "JZUITJUKVJVIUGSFQFOGNINKOMQOVR OMTPVRWTWVVXTZ PNNPMRMTNVPXU[ NVSYU[V]V_UaSbQbOaN_N^O]P^O_", "void icvProcessSpecialDouble(CvFileStorage*, char*, double*, char**)", "double cvGetReal3D(const CvArr*, int, int, int)", "\"existingCertificateInfo\" : \"Current certificate information\"", "G_HKKHMKMV JILLLV MKPHRKRU OIQLQU RKUHWKW[ TIVLV[ WKZH[J\\M\\P[SZUXWUYP[ YIZJ[M[PZSYUWWTYP[", "void cvResize(const CvArr*, CvArr*, int)", "\"name\" : \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\"", "H\\YMU[T^RaObLbJaI`I_J^K_J` XMT[S^QaOb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ", "void cv::GlCamera::setPerspectiveProjection(double, double, double, double)", "G^LMLVMYNZP[S[UZVYWW MNMWNY IMNMNWOZP[ WMW[\\[ XNXZ TMYMY[ JMLN KMLO YYZ[ YZ[[", "virtual int EmptyDeviceInfoFuncTable::getDevice() const", "The file node should be a numerical scalar or a sequence", "float cv::initWideAngleProjMap(cv::InputArray, cv::InputArray, cv::Size, int, int, cv::OutputArray, cv::OutputArray, int, double)", "LZLVNSPRRRTTTVSXQZN[P\\Q^QaPdOfMgLfLdMaP^S\\WYZV", "\"generate_cert_text_step_2\" : \"\u041f\u0440\u0438\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430. \u041d\u0438\u043a\u043e\u043c\u0443 \u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0439 \u043f\u0430\u0440\u043e\u043b\u044c! \u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438 \u0431\u0430\u043d\u043a\u0430 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043f\u043e\u043f\u0440\u043e\u0441\u044f\u0442 \u0432\u0430\u0441 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043b\u0430\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c \u043a \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443 \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab\u0438\u0437 SMS\u00bb\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/imgwarp.cpp", "void cv::pyrUp(cv::InputArray, cv::OutputArray, const Size&, int)", "imaginary ", "void cv::fillConvexPoly(cv::InputOutputArray, cv::InputArray, const Scalar&, int, int)", "src.depth() == CV_8U", "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows", "\"pleaseWait\" : \"Please wait\u2026\"", "E_HIHL \\I\\L HI\\I HJ\\J HK\\K HL\\L", "\"pref_syncConnectionType\" : \"Settings\"", "KYSOQOOPNQMSMUNWPXRXTWUVVTVRUPRNQLQKRJTJUKVM QOOQNSNVPX RXTVUTUQSO QLRKTKVM", "_sizes[i] > 0", "LXRMRV PONPNSPTTTVSVPTOPO", "\"special_symbols\" : \"\u0421\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u044b (!#$%&'()*+,-./:;>=<?@[]^_`{|}~)\"", "\"paymentConfirmed\" : \"\u041e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0430!\"", "void* icvReadMatND(CvFileStorage*, CvFileNode*)", "CvSeq* cvMakeSeqHeaderForArray(int, int, int, void*, int, CvSeq*, CvSeqBlock*)", "G]JEJL ZEZL OMOT UMUT JUJ\\ ZUZ\\ JGZG JHZH JIZI OPUP OQUQ JXZX JYZY JZZZ JFMH ZFWH KIJK LIJJ XIZJ YIZK ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS JVKX JWLX ZWXX ZVYX MYJ[ WYZ[", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM QVPUPTQSRSSTTVUWVW", "G]RFR[ ILJLKMLQMSNTQUSUVTWSXQYMZL[L", "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth", "I[YYKK SLOLKKLOLS OLLLLO", "Scale step.", "void cvReadRawDataSlice(const CvFileStorage*, CvSeqReader*, int, void*, const char*)", "LXOYQXRWSUSSRRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "LYOVOUNUNVOWQXSXUWVVWSWNVLTKQKOLNNNPORQSTSWQ SXUVVSVNULTK QKPLONOPPRQS", "void cvPyrMeanShiftFiltering(const CvArr*, CvArr*, double, double, int, CvTermCriteria)", "void cvFlip(const CvArr*, CvArr*, int)", "LYPMMV PMQV XMQV XMUV", "CvScalar cvGet1D(const CvArr*, int)", "I\\XMX]W`VaTbQbOa XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "could not open directory: %s", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "edges.type() == CV_8UC1", "BcGMG[ HMH[ HPJNMMOMRNSPS[ OMQNRPR[ SPUNXMZM]N^P^[ ZM\\N]P][ DMHM D[K[ O[V[ Z[a[", "KXQKMX RKNX OKTK KXUXVUTX", "\"create\" : \"\u0421\u043e\u0437\u0434\u0430\u0442\u044c\"", "\"generate_cert_text_step_1\" : \"\u0414\u043b\u044f \u0432\u0456\u0434\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0456\u0432 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0437\u0433\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u043a\u043b\u044e\u0447 \u0415\u0426\u041f. \u041f\u0440\u043e\u0446\u0435\u0441 \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u0442\u0440\u044c\u043e\u0445 \u043f\u0440\u043e\u0441\u0442\u0438\u0445 \u043a\u0440\u043e\u043a\u0456\u0432.\"", "N2cv12FilterEngineE", "St15time_put_bynameIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "MWRMRV NMVM", "mean.data && eigenvectors.data && ((mean.rows == 1 && mean.cols == data.cols) || (mean.cols == 1 && mean.rows == data.rows))", "F^OFI[ PFJ[ QFK[ LFWFZG[I[KZNYOVP YGZIZKYNXO WFXGYIYKXNVP NPVPXQYSYUXXVZR[F[ WQXSXUWXUZ VPWRWUVXTZR[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "KXUPUQVQUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", ") in ", "\"loadCertificate\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447 \u0447\u0435\u0440\u0435\u0437 web-\u043a\u043b\u0456\u0454\u043d\u0442\"", "\"paymentUpbs\" : \"Utility bills\"", "\"state\" : \"State\"", "CvMat* cvGetPerspectiveTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "\"noPdfReader\" : \"No PDF viewer is installed\"", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEE", "\"pref_listValue_key\" : \"listValue\"", "vertices", "I[VKWLXLVKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ ZK[L[KYKWLVNSYR[Q\\ YKXLWNTYS[Q\\O\\O[P\\ LOYO", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/utils.cpp", "OVUMSSRUQVPVOUOT", "\"common_google_play_services_install_button\" : \"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\"", "p1.depth() == CV_32S || p1.depth() == CV_32F", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEE", "NULL array pointer is passed", "Maximal rotation angle to detect in degrees.", "void cvAddWeighted(const CvArr*, double, const CvArr*, double, double, CvArr*)", "The reduced dimensionality index is out of range", "void cvMaxS(const void*, double, void*)", "\"call\" : \"\"", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF LYLXMVOUPURVSXS_T`V`W^W] SXT^U_V_W^", "LXNMRV VMRV NMVM", "H]TJO[ VFP[ VFSIPKNL UIQKNL", "virtual void EmptyDeviceInfoFuncTable::queryMemory(int, size_t&, size_t&) const", "void {anonymous}::GHT_Pos::convertTo(cv::OutputArray, cv::OutputArray)", "Invalid histogram header[s]", "void cv::GlBuffer::unmapDevice()", "\"turnItOnLater\" : \"\u042f \u0443\u0432\u0456\u043c\u043a\u043d\u0443 \u043f\u0456\u0437\u043d\u0456\u0448\u0435\"", "The vertex does not belong to the graph", "Null graph scanner", "\"cityNotFound\" : \"\u0413\u043e\u0440\u043e\u0434 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"", "G]NMNQMWLZK[J[IZJYKZ WMW[ XMX[ KM[M T[[[", "std::string", "virtual bool EmptyDeviceInfoFuncTable::hasPtx(int, int) const", "void cvReleaseGraphScanner(CvGraphScanner**)", "N2cv12MatOp_InvertE", "\"paymentUpbs\" : \"\u041a\u043e\u043c\u043c\u0443\u043d\u0430\u043b\u044c\u043d\u044b\u0435\"", "MWOMOV OMSMUNUQSROR RRUV", "H\\H[JZLXOTQQSMTJTGSFRFQGPIPKQMSOVQXSYUYWXYWZT[P[MZKXJVJT", "LXVPTOQOOPOQPRRS QOPPPQRS RSOTNUNWPXSXUW RSPTOUOWPX", "\"user_setting\" : \"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430\"", "Some collection type - CV_NODE_SEQ or CV_NODE_MAP, must be specified", "\"description\" : \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\"", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "Failed to allocate %lu bytes", "\"certNotAuthorized\" : \"The request is under processing\"", "void cvMax(const void*, const void*, void*)", "E_\\N[O\\P]O]N\\M[MYNWPRXPZN[K[HZGXGVHTISKRPPROTMUKUITGRFPGOIOLPRQUSXUZW[Y[ZYZX K[IZHXHVITJSPP OLPQQTSWUYWZYZZY", "\"mtrl_picker_range_header_unselected\" : \"Start date \u2013 End date\"", "MWUQSPRPPQOSPURVTV", "\"cancel\" : \"\u0421\u043a\u0430\u0441\u0443\u0432\u0430\u0442\u0438\"", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'", "MWPORMRV", "\"common_google_play_services_install_button\" : \"Install\"", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "\"newPayment\" : \"New transfers\"", "G]YFVQUUUXVZW[Y[[Y\\W ZFWQVUVZ VF[FWTVX UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT MOLQKTKWLY PMNOMQLTLWMZN[ WFZG XFYH", "i < (int)v.size()", "Block sequence elements must be preceded with '-'", "\"atmosphere\" : \"\u0410\u0442\u043c\u043e\u0441\u0444\u0435\u0440\u0430\"", "uchar* cv::SparseMat::ptr(int, int, bool, size_t*)", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX", "void icvHoughLinesStandard(const CvMat*, float, float, int, CvSeq*, int)", "\"passwordsNotMatch\" : \"\u041d\u043e\u0432\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0442\u0430 \u0439\u043e\u0433\u043e \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u043d\u0435 \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u044e\u0442\u044c!\"", "void cv::ogl::Arrays::setColorArray(cv::InputArray)", "\"contactBank\" : \"\u0421\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u0441 \u0431\u0430\u043d\u043a\u043e\u043c\"", "void cvMinS(const void*, double, void*)", "void cv::GlBuffer::bind() const", "MWOMOV OMUM OQSQ OVUV", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "The operation is neither 'array op array' (where arrays have the same size and the same type), nor 'array op scalar', nor 'scalar op array'", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "LYVMVNWNWMVLTKRKPLOMNPNUOWQXTXVWWUWSVQTPQPNR RKPMOPOUPWQX TXUWVUVSUQTP", "<!-- %s -->", "H\\LMLbMb LMMMMb MPONQMTMVNXPYSYUXXVZT[Q[OZMX MPQNTNVOWPXSXUWXVYTZQZMX", "0 <= coi && coi < src.channels()", "char* icvXMLSkipSpaces(CvFileStorage*, char*, int)", "H\\VGWIXIWGTFRFOGMJLOLTMXOZR[S[VZXXYUYTXQVOSNRNOOMQ WHTGRGOH PGNJMOMTNXQZ MVOYRZSZVYXV TZWXXUXTWQTO XSVPSOROOPMS QONQMT", "N2cv15resizeNNInvokerE", "\"menu_exit\" : \"Exit\"", "\"menu_greetings\" : \"\u0414\u043e\u0431\u0440\u043e\u0433\u043e \u0434\u043d\u044f,\"", "New dimension sizes are not specified", "void cv::GlCamera::setCameraPos(cv::Point3d, double, double, double)", "cn >= 1 && cn <= 4", "MWWRWQVOUNSMQMONNOMQMR", "the array of labels has a different size", "I\\MMM[ MQPNRMUMWNXQX[", "basic_string::append", "void cvProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)", "\"keyTransfer\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430\"", "void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const Scalar&)", "\"weekendsWork\" : \"\u0420\u043e\u0431\u043e\u0442\u0430 \u0443 \u0432\u0438\u0445\u0456\u0434\u043d\u0456\"", "\"password_expires_message\" : \"Your password expires in %1$s\"", "MWRKRX UNSMQMONOPQQTRUSUUSVQVOU", "ktype == CV_32F || ktype == CV_64F", "\"pleaseWait\" : \"\u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0437\u0430\u0447\u0435\u043a\u0430\u0439\u0442\u0435\u2026\"", "D`DR`R DRRb `RRb", "NSt8ios_base7failureE", "\"changeGcmNo\" : \"No, leave as it is\"", "Only 32f and 64f are supported", "MWUMUV USTQRPPQOSPURVTUUS", "void cvInitUndistortMap(const CvMat*, const CvMat*, CvArr*, CvArr*)", "double cv::solvePoly(cv::InputArray, cv::OutputArray, int)", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXZF VRUWUZV[W[YZZY\\V", "I\\OKKX OMPX PKQV YKPX YKUX ZKVX MKPK YK\\K IXMX SXXX", "L>333?", "centers.cols == data.cols", "scn == 3 || scn == 4", "\"abc_activitychooserview_choose_application\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443\"", "H\\RLPLNKMINGQFTFXG[G]F XGVNTTRXPZN[L[JZIXIVJULUNV QPZP", "i < (int)vv.size()", "KYOBO[ UBU[", "St8bad_cast", "hdr && hdr->dims == 1", "\"saveKey\" : \"Save the key\"", "\"common_google_play_services_install_text\" : \"\u0414\u043e\u0434\u0430\u0442\u043e\u043a %1$s \u043d\u0435 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438\u043c\u0435 \u0431\u0435\u0437 \u0441\u0435\u0440\u0432\u0456\u0441\u0456\u0432 Google Play, \u044f\u043a\u0438\u0445 \u043d\u0435\u043c\u0430\u0454 \u043d\u0430 \u0432\u0430\u0448\u043e\u043c\u0443 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457.\"", "KYMNWX WNMX OLLOKQ ULXOYQ", "img->dataOrder == IPL_DATA_ORDER_PIXEL || img->roi->coi != 0", "Argument error: the setter", "F^FY^K", "Depth is not the same for all arrays", "\"workFromTo\" : \"\u0417 %1$s \u043d\u0430 %2$s\"", "\"numbers\" : \"\u2022 \u0446\u0438\u0444\u0440\u044b\"", "H\\NJPISFS[", "void cv::fitLine(cv::InputArray, cv::OutputArray, int, double, double, double)", "Null element pointer", "Number of channels in input image must be 1 or 3", "For multidimensional array only CV_AUTOSTEP is allowed here", "virtual bool EmptyDeviceInfoFuncTable::hasEqualOrLessPtx(int, int) const", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/smooth.cpp", "\"generate_cert_text_step_5_open_cert\" : \"View certificate\"", "void cv::sorted_vector<_KeyTp, _ValueTp>::add(const _KeyTp&, const _ValueTp&) [with _KeyTp = std::basic_string<char>; _ValueTp = cv::Param]", "\"mtrl_picker_toggle_to_year_selection\" : \"Tap to switch to selecting a year\"", "Invalid closing tag for <?xml ...", "image.type() == CV_8UC1", "CbRFR[ SFS[ OFVF GGHHGIFHFGGFHFIGJIKMLONPWPYOZM[I\\G]F^F_G_H^I]H^G NPLQKSJXIZH[ NPMQLSKXJZI[G[FZEX WPYQZS[X\\Z][ WPXQYSZX[Z\\[^[_Z`X O[V[", "images[j].channels() == 1", "\"moneybox\" : \"Moneybox\"", "IplImage* cvCloneImage(const IplImage*)", "vector::_M_fill_insert", "\"exitMessage\" : \"Are you sure you want to quit the application?\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/system.cpp", "F^KHK\\ LHL\\ XHX\\ YHY\\ HH\\H H\\O\\ U\\\\\\", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/canny.cpp", "cvGetReal* support only single-channel arrays", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short unsigned int, float, float>; VResize = cv::VResizeCubic<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "\"common_google_play_services_enable_button\" : \"\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c\"", "N2cv18ResizeArea_InvokerIhfEE", "Number of channels is not the same for all arrays", "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", "OpenCV Error: %s (%s) in %s, file %s, line %d", "\"toConfirmKeyAccessAndSaveKeys\" : \"\u0414\u043b\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043a\u043b\u044e\u0447\u0443 \u0438 \u0435\u0433\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0438 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u044e\u0447\u0438\"\"", "CaGMG[ GQJNLMOMQNRQR[ RQUNWMZM\\N]Q][", "\"alreadyRegistered\" : \"\u042f \u0432\u0436\u0435 \u0437\u0430\u0440\u0435\u0454\u0441\u0442\u0440\u043e\u0432\u0430\u043d\u0438\u0439\"", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = double; DT = double; VecOp = cv::RowNoVec]", "\"common_google_play_services_update_text\" : \"\u0414\u043e\u0434\u0430\u0442\u043e\u043a %1$s \u043d\u0435 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438\u043c\u0435, \u044f\u043a\u0449\u043e \u043d\u0435 \u043e\u043d\u043e\u0432\u0438\u0442\u0438 \u0441\u0435\u0440\u0432\u0456\u0441\u0438 Google Play.\"", "\"phones\" : \"\u0422\u0435\u043b\u0435\u0444\u043e\u043d\u0438\"", "I[RLQMRNSMRL LRXR RVQWRXSWRV", "complex ", "J[NKNX OKOX VKVX WKWX LKQK TKYK OQVQ LXQX TXYX", "\"enter_card_no\" : \"Enter the card number\"", "JZRMRX MRWR MXWX", "\"latin_simbol_lower_case\" : \"\u041b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0456 \u043b\u0456\u0442\u0435\u0440\u0438 \u0443 \u043d\u0438\u0436\u043d\u044c\u043e\u043c\u0443 \u0440\u0435\u0433\u0456\u0441\u0442\u0440\u0456\"", "Parameter '%s' is readonly", "JZSFSWRZQ[ TGTWSZ UFUWTZQ[O[MZLXLVMUNUOVOWNXMX MVMWNWNVMV PFXF QFSG RFSH VFUH WFUG", "IZTFRGQHQIRJUKXK UKQLOMNONQPSSTVT UKRLPMOOOQQSST STOUMVLXLZN\\S^T_TaRbPb STPUNVMXMZO\\S^", "NWSKSLTLTKSK SOSZR\\ TOTZR\\P\\O[OZPZP[O[ QOTO", "\"sign_in\" : \"Sign in\"", "\"mtrl_picker_invalid_format\" : \"Invalid format.\"", "I[RFJ[ RFZ[ J[Z[", "\"topic\" : \"Topic\"", "H\\QFK[ RFL[ NFUF H[W[YUV[", "\"download_certificate\" : \"Transfer a key\"", "dims > 0 && histSize", "cv::GlTexture::GlTexture(int, int, int)", "basic_string::insert", "\"stringLengthMastBeMost\" : \"The length of the value in the field must be more than\"", "\"add_cert_header\" : \"Key connection\"", "std::bad_cast", "F_[WYWWVUTRPQOONMNKOJQJSKUMVOVQURTUPWNYM[M", "G^[BIbJb [B\\BJb", "\"requisitesNoIbanModeMessage\" : \"\u0420/\u0440: %1$s\n\u0443 %2$s, \u041c\u0424\u041e %3$s,\n\u041e\u0434\u0435\u0440\u0436\u0443\u0432\u0430\u0447: %4$s,\n\u041a\u043e\u0434 \u0404\u0414\u0420\u041f\u041e\u0423 \u043e\u0434\u0435\u0440\u0436\u0443\u0432\u0430\u0447\u0430: %5$s\"", "img.dims <= 2", "frame node could not be deleted", "\"lookup_code_title\" : \"LookUp-\u043a\u043e\u0434\"", "votesThreshold > 0", "LXRMPTOXOZP[S[UYVW SMQTPXPZQ[", "LXNNOQOSNV VNUQUSVV NNQOSOVN NVQUSUVV", "H\\PFMGLILKMMNNPOTPVQWRXTXWWYTZPZMYLWLTMRNQPPTOVNWMXKXIWGTFPF NGMIMKNMPNTOVPXRYTYWXYWZT[P[MZLYKWKTLRNPPOTNVMWKWIVG WHTGPGMH LXOZ UZXX", "\"login\" : \"\u041b\u043e\u0433\u0438\u043d\"", "H\\LFL[M[ LFMFM[ MPONQMTMVNXPYSYUXXVZT[Q[OZMX MPQNTNVOWPXSXUWXVYTZQZMX", "\"masterpass_info_text\" : \"MasterCard \u2013 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0438\u0439 \u0433\u0430\u043c\u0430\u043d\u0435\u0446\u044c \u0432\u0456\u0434 MasterCard. \u0412\u0456\u043d \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454 \u0434\u0430\u043d\u0456 \u0432\u0441\u0456\u0445 \u0432\u0430\u0448\u0438\u0445 \u043a\u0430\u0440\u0442\u043e\u043a \u0442\u0430 \u0440\u043e\u0431\u0438\u0442\u044c \u043e\u043d\u043b\u0430\u0439\u043d-\u0448\u043e\u043f\u0456\u043d\u0433 \u0431\u0435\u0437\u043f\u0435\u0447\u043d\u0438\u043c \u0442\u0430 \u043b\u0435\u0433\u043a\u0438\u043c. \n\n\u041a\u043e\u043b\u0438 \u0432\u0438 \u043f\u043b\u0430\u0442\u0438\u0442\u0435 \u0437 MasterCard, \u0456\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 \u0442\u0430 \u0456\u043d\u0448\u0456 \u0441\u0435\u0440\u0432\u0456\u0441\u0438 \u043d\u0435 \u043e\u0442\u0440\u0438\u043c\u0443\u044e\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0432\u0430\u0448\u043e\u0457 \u043a\u0430\u0440\u0442\u043a\u0438: \u0442\u0435\u0440\u043c\u0456\u043d\u0443 \u0434\u0456\u0457 \u0430\u0431\u043e CVV-\u043a\u043e\u0434\u0443. \n\n\u0429\u043e\u0431 \u0443\u0437\u043d\u0430\u0442\u0438, \u0434\u0435 \u043c\u043e\u0436\u043d\u0430 \u0440\u043e\u0437\u0440\u0430\u0445\u0443\u0432\u0430\u0442\u0438\u0441\u044f \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e Masterpass-\u0433\u0430\u043c\u0430\u043d\u0446\u044f, \u043f\u0435\u0440\u0435\u0439\u0434\u0456\u0442\u044c \u043d\u0430 \u0441\u0430\u0439\u0442 MasterCard.\"", "(func( src->data.ptr, src->step, src_size, dst->data.ptr, dst->step, dst_size, m )) >= 0", "F_OFIZ OFV[ PFVX QFWX \\GWXV[ LFQF YF_F F[L[ MFPG NFPH ZF\\G ^F\\G IZG[ IZK[", "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(cols, rows)", "Tuesday", "src1.size == src2.size", "H\\K[O[LTKPKLLINGQFSFVGXIYLYPXTU[Y[", "\"newPayment\" : \"\u041d\u043e\u0432\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u0430\u0437\"", "H\\JMKILGMFOFPGQIRM LHMGOGPH JMKJMHOHPIQMQ[ RMR[ ZMYJWHUHTISMS[ XHWGUGTH ZMYIXGWFUFTGSIRM N[V[ QYP[ QZO[ SZU[ SYT[", "Both reps and aeps must be non-negative", "I\\MOLMLQMONNPMSMVNXPYSYUXXVZS[P[NZLXLWMVNWMX SMUNWPXSXUWXUZS[ RTXT", "G]LFL[ MFM[ IFYFYLXF MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "Unknown font type", "\"mtrl_picker_date_header_unselected\" : \"Selected date\"", "G[G[IZLWOSSLVFV[UXSUQSNQLQKRKTLVNXQZT[Y[", "I[V.S1Q4O8N=NCOIPMSXT\\UbUgTlSoQs S1Q5P8O=OBPHQLTWU[VaVgUlSpQsNv", "covDeterms[ci] > std::numeric_limits<double>::epsilon()", "CV_IS_MAT(matR) && matR->rows == 3 && matR->cols == 3", "H\\XIYFYLXIVGSFPFMGKIKLLNOPURWSXUXXWZ LLMNOOUQWRXT MGLILKMMONUPXRYTYWXYWZT[Q[NZLXKUK[LX", "void cv::magSpectrums(cv::InputArray, cv::OutputArray)", "TLS init function for ", "St15underflow_error", "void cvPolarToCart(const CvArr*, const CvArr*, CvArr*, CvArr*, int)", "dcn == 1", "virtual void {anonymous}::GHT_Ballard_Pos::calcHist()", "KYRKMX RNVX RKWX OTTT KXPX TXYX", "\"fingerprint_error_unable_to_process\" : \"Try again.\"", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = double; VecOp = cv::RowNoVec]", "rightEdge", "LXLKNKPLWX NKOLVX RPMX RPNX", "fromTo.size()%2 == 0 && nsrc > 0 && ndst > 0", "F]OUMTLTJUIWIXJZL[M[OZPXPWOUJPINIKJILHOGSGWHYJZLZOYRVUUWUYV[X[YZZX MSKPJNJKKILH SGVHXJYLYOXRVU", "L[LVNRLXLZM[O[QZSXUU VRTXTZU[V[XZYY[V", "N2cv8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "a.depth() == CV_32F", "Invalid or unsupported syntax", "Chains are not supported. Convert them to polygonal representation using cvApproxChains()", "void cv::preCornerDetect(cv::InputArray, cv::OutputArray, int, int)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = double; VecOp = cv::RowNoVec]", "uchar* cvPtrND(const CvArr*, const int*, int*, int, unsigned int*)", "St19basic_ostringstreamIwSt11char_traitsIwESaIwEE", "void cvSeqSort(CvSeq*, CvCmpFunc, void*)", "mtype == type0 || (CV_MAT_CN(mtype) == CV_MAT_CN(type0) && ((1 << type0) & fixedDepthMask) != 0)", "contour.checkVector(2) >= 0 && (contour.depth() == CV_32F || contour.depth() == CV_32S)", "LZLVNSPRRSRUP[ PRQSQUO[ RUTSVRWRVU VRVUWWXWZV", "sum.data == sum0.data && sqsum.data == sqsum0.data && tilted.data == tilted0.data", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = short unsigned int]", "H\\RFK[ RFY[ RIX[ MUVU I[O[ U[[[", "mask element value must be equelGC_BGD or GC_FGD or GC_PR_BGD or GC_PR_FGD", "{unnamed type#", "void cv::buildPyramid(cv::InputArray, cv::OutputArrayOfArrays, int, int)", "JZRKRY MKMPNRPSTSVRWPWK LMMKNM QMRKSM VMWKXM OVUV", "tilesX", "F^LLKKKIMGPFRFOQMWLYKZI[G[FZFXGWHXGY RFOONRLWKYI[ ZGWKUMSNPO ]G\\H]I^H^G]F\\FZGWLVMTNPO POSPTRUYV[ PORPSRTYV[W[YZ[X", "void cv::drawContours(cv::InputOutputArray, cv::InputArrayOfArrays, int, const Scalar&, int, int, cv::InputArray, int, cv::Point)", "I[JFR[ ZFR[ JFZF", "Bad image header", "JZMKWOMS MTWT MXWX", "virtual cv::Mat& cv::_OutputArray::getMatRef(int) const", "\"pleaseWait\" : \"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435\u2026\"", "12GpuFuncTable", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "src.size() == dst.size() && src.channels() == dst.channels()", "LXNPVP NTVT", "\"NOTIFICATION_TITLE\" : \"\"", "Input array must be 8uC1 or 8sC1", "H]KFRPJ[ JFQP JFYFZLXF KZXZ J[Y[ZUX[", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "\"generate_cert_text_step_5\" : \"\u041a\u043b\u044e\u0447 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u0433\u043e\u0442\u043e\u0432 \u043a \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430 \u044d\u0442\u043e\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435.\n\n\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445, \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0438\u0442\u0435 \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u043e\u0439 \u0444\u043e\u0440\u043c\u044b \u0438\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\"", "H\\MPLQLRMSNSOROQNPMP MQMRNRNQMQ WPVQVRWSXSYRYQXPWP WQWRXRXQWQ", "\"certFingerprintAdditionalBtn\" : \"\u0412\u0432\u0435\u0441\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\"", "Unknown type of file node", "\"new_login_repeat\" : \"Confirm New login\"", "PVRMUQ", "\"confirm\" : \"Confirm\"", "guard variable for ", "0 <= d && d <= CV_MAX_DIM && _sizes", "\"paymentConfirmation\" : \"Payment confirmation\"", "Invalid sparse matrix header", "\"change_login\" : \"\u0421\u043c\u0435\u043d\u0430 \u043b\u043e\u0433\u0438\u043d\u0430\"", "\"credit\" : \"\u041a\u0440\u0435\u0434\u0438\u0442\u044b\"", "H\\QHQ[ RHRZ SFS[ SFPINJ M[W[ QZO[ QYP[ SYT[ SZU[", "virtual void EmptyFuncTable::copyWithMask(const cv::gpu::GpuMat&, cv::gpu::GpuMat&, const cv::gpu::GpuMat&) const", "0 < cn && cn <= CV_CN_MAX", "digit", "Sizes of input arguments do not match", "NVRKQLRSSLRK RLRO RVQWRXSWRV", "St7collateIwE", "\"menu_exit\" : \"\u0412\u0438\u0445\u0456\u0434\"", "void* icvReadSeqTree(CvFileStorage*, CvFileNode*)", "\"abc_searchview_description_clear\" : \"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\"", "I\\KFRPR[S[ KFLFSP ZFYFRP ZFSPS[", "CV_ARE_SIZES_EQ( src, dst )", "St12codecvt_base", "\"fingerprint_error_unable_to_process\" : \"\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "\"send\" : \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\"", "NWTMSNSOTP UPSPQQPSPUQVSWSXRYQY", "St14basic_ifstreamIcSt11char_traitsIcEE", "posThresh > 0", "\"abc_activity_chooser_view_see_all\" : \"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0438 \u0432\u0441\u0456\"", "F^NFNLMTLXKZJ[ XFX[ YFY[ KF\\F G[\\[ G[Gb H[Gb [[\\b \\[\\b", "rsz == dims*2 || (rsz == 2 && _1d) || (rsz == 0 && images.depth(0) == CV_8U)", "void icvYMLWriteComment(CvFileStorage*, const char*, int)", "H]KFRQR[ LFSQS[ ZFSQ IFOF VF\\F O[V[", "void icvHoughLinesSDiv(const CvMat*, float, float, int, int, int, CvSeq*, int)", "void (* cv::getConvertScaleElem(int, int))(const void*, void*, int, double, double)", "\"generate_cert_text_step_5_view_request\" : \"View request\"", "RRR>Rf", "H\\IQJOLMNMONOPMVMYO[Q[TZVXXTYPYM", "MVOPPPQQQSPV UQTPSPRQQS", "The node does not represent a user object (unknown type?)", "\"enterPairingCodeDescription\" : \"Enter this code to the appropriate field of your web application and follow further instructions. Wait till the keys are transferred from web to mobile client, and you'll see the next step screen.\"", "\"quickTransfer\" : \"Quick Transfer\"", "\"currencyExchangeArchive\" : \"Currency Exchange\"", "\"exitTitle\" : \"Confirm logout\"", "\"fingerprint_error_lockout\" : \"Too many attempts. Try again later.\"", "G]NFT[ OFU[ PFV[ [GIZ LFSF XF^F F[L[ Q[X[ MFOH QFPH RFPG YF[G ]F[G IZG[ IZK[ TZR[ TYS[ UYW[", "__int128", "\"pay\" : \"\u041e\u043f\u043b\u0430\u0442\u0438\u0442\u044c\"", "MXRMR[ SMS[ OMSM O[V[", "void cvWriteInt(CvFileStorage*, const char*, int)", "@`|-A", "\"already_fingerprint_question\" : \"Fingerprint is already registered for another user. Do you want to replace it?\"", "\"mtrl_picker_range_header_selected\" : \"%1$s \u2013 %2$s\"", "\"gotoPlayMarket\" : \"Go to Google Play\"", "J[NKNX OKOX ORPPROTOVPWRWX TOUPVRVX LKOK LXQX TXYX", "CvMat* cvCreateMatHeader(int, int, int)", "G]HJJGLFMFOHOKNNKVKYL[ MFNHNKKSJVJYL[N[PZSWUTVR ZFVRUVUYW[X[ZZ\\X [FWRVVVYW[", "\"weekendsWork\" : \"Open on weekends\"", "\"password_expires_message\" : \"\u0421\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 %1$s\"", "is_uniform", "\"MAP_TYPE\" : \"GOOGLE_EXT\"", "a_size.height == len", "LYQKOLNONTOWQXTXVWWTWOVLTKQK QKPLOOOTPWQX TXUWVTVOULTK", "The image is interleaved and has over CV_CN_MAX channels", "\"port\" : \"Port\"", "Data type is not the same for all arrays", "Only collections as YAML streams are supported by this parser", "H\\LKLJMHNGPFTFVGWHXJXLWNUQL[ LKMKMJNHPGTGVHWJWLVNTQK[ LZYZY[ K[Y[", "\"emailTitle\" : \"E-mail\"", "F^RJIZ RJ[Z", "F_OFI[ OFVX OIV[ \\FV[ LFOF YF_F F[L[", "global destructors keyed to ", "MWONUROV", "E_^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FF[ XTVTTUSWSYU[W[YZZXZVXT", "\"generate_cert_text_step_1\" : \"\u0414\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u044e\u0447 \u042d\u0426\u041f. \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 3 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0448\u0430\u0433\u043e\u0432.\"", "schar* cvSeqPush(CvSeq*, const void*)", "\"pdf_extract_account\" : \"Statement for account %1$s\"", "\"year\" : \"year\"", "void cv::binary_op(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, void (* const*)(const uchar*, size_t, const uchar*, size_t, uchar*, size_t, cv::Size, void*), bool)", "\"generate_cert_header\" : \"Key generation\"", "\"requisites\" : \"\u0420\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b\"", "\"changeScaleWarning\" : \"\u0417\u043c\u0456\u043d\u0430 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0443 \u043d\u0430\u0431\u0443\u0434\u0435 \u0447\u0438\u043d\u043d\u043e\u0441\u0442\u0456 \u043f\u0456\u0441\u043b\u044f \u0432\u0438\u0445\u043e\u0434\u0443 \u0437 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u044c\"", "\"not_set\" : \"\u041d\u0435 \u043d\u0430\u043b\u0430\u0448\u0442\u043e\u0432\u0430\u043d\u043e\"", "I[MJNKMLLKLJMHNGPFSFVGWHXJXLWNVORQRT SFUGVHWJWLVNTP RYQZR[SZRY", "St15basic_stringbufIwSt11char_traitsIwESaIwEE", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "cn == 3 || cn == 4", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::FixedPtCast<int, unsigned char, 15>; VecOp = cv::RemapNoVec; AT = short int; cv::Scalar = cv::Scalar_<double>]", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "MWTHPRT\\", "Missing , between the elements", "basic_filebuf::underflow error reading the file", "borderType != BORDER_CONSTANT", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<float, float, float>; VResize = cv::VResizeCubic<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "int32", "void cv::repeat(cv::InputArray, int, int, cv::OutputArray)", "NKZW]", "N2cv14MorphRowFilterINS_5MaxOpItEENS_12MorphRowIVecINS_7VMax16uEEEEE", "CvGraphEdge* cvFindGraphEdgeByPtr(const CvGraph*, const CvGraphVtx*, const CvGraphVtx*)", "\"defaultErrorMessage\" : \"\u041f\u043e\u043c\u0438\u043b\u043a\u0430 \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c. \u041f\u0435\u0440\u0435\u043a\u043e\u043d\u0430\u0439\u0442\u0435\u0441\u044c, \u0449\u043e \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u0456\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u043e\u043c \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0456 \u0441\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u043d\u043e\u0432\u0443 \u0432\u0432\u0456\u0439\u0442\u0438\"", "St15time_put_bynameIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "\"canNotUnPackData\" : \"\u041d\u0435 \u0432\u0434\u0430\u043b\u043e\u0441\u044f \u0440\u043e\u0437\u043f\u0430\u043a\u0443\u0432\u0430\u0442\u0438 \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u0438\u0439 \u043a\u043b\u044e\u0447. \u041c\u043e\u0436\u043b\u0438\u0432\u043e, \u0432\u0438 \u0432\u0432\u0435\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0430\u0431\u043e \u043a\u043e\u0434 \u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u043d\u043d\u044f. \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430 \u043f\u043e\u0447\u043d\u0456\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441 \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443.\"", "\"paymentConfirmation\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u043f\u043b\u0430\u0442\u044b\"", "images[j].size() == imsize && images[j].depth() == depth", "\"archiveOperations\" : \"\u0410\u0440\u0445\u0438\u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\"", "std::basic_ostream<char, std::char_traits<char> >", "LYNKNO VMRTPX WKTQQX NMPKRKUM NMPLRLUMVM", "There should be space between attributes", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 8>; VecOp = cv::NoVec<int, short int>]", "MXSMRNSOTNSM PYOZP[QZ", "cv::Ptr<cv::BaseColumnFilter> cv::getLinearColumnFilter(int, int, cv::InputArray, int, int, double, int)", "\"verify\" : \"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\"", "\"zxing_msg_camera_framework_bug\" : \"Sorry, the Android camera encountered a problem. You may need to restart the device.\"", "MWRKQMOPMR RKSMUPWR", "\"tryAgain\" : \"\u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043d\u043e\u0432\u0430\"", "I[XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "The input array must be CvMatND", "DaWNVLTKQKOLNMMOMRNTOUQVTVVUWS WKWSXUYV[V\\U]S]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYY", "\"newPinAndRepeatNotEquals\" : \"PIN-\u043a\u043e\u0434\u0438 \u043c\u0430\u044e\u0442\u044c \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u0442\u0438\"", "CV_IS_SEQ_CHAIN_CONTOUR( chain )", "H]ZFVTUXUZV[Y[[Y\\W [FWTVXVZW[ VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ WF[F", "\"openGooglePlay\" : \"\u041e\u0442\u043a\u0440\u044b\u0442\u044c Google Play\"", "\"setting\" : \"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\"", "St11logic_error", "Angle step in degrees.", "I[MVQUTTWRXPWNUMRMONMQLTLVMYNZP[R[UZWX OONQMTMWNY RMPOOQNTNWOZP[", "KXPKLX QKMX VPUQVQVPUOTORQPROR ORPSQWRXTXUWVU ORQSRWSX NKQK", "header_dt", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "MXRFR[ SFS[ OFSF O[V[", "u.type() == type", "G^SFKbLb SFTFLb YFQbRb YFZFRb KP\\P\\Q KPKQ\\Q IWZWZX IWIXZX", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallVec_8u32s]", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "\"generate_cert_text_step_1_next_button\" : \"\u041f\u043e\u0447\u0430\u0442\u0438\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/gl_core_3_1.cpp", "KXRKPMOOMUK\\ QLPNNTL\\ RKTKVLVNUPRQ TKULUNTPRQ RQTRUTUVTWRXQXOWNT RQSRTTTVRX", "void cv::accumulateProduct(cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::InputArray)", "A^GfHfIeIdHcGcFdFfGhIiKiNhPfQdR`RUQ;Q4R/S-U,V,X-Y/Y3X6W8U;P?JCHEFHEJDNDREVGYJ[N\\R\\V[XZZW[T[PZMYKWITHPHMIKKJNJRKUMW GdGeHeHdGd U;Q?LCIFGIFKENERFVGXJ[ R\\U[WZYWZTZPYMXKVITH", "uint16", "\"generate_cert_repeate_password_hint\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0456\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u043a\u043b\u044e\u0447\u0430\"", "\"abc_searchview_description_voice\" : \"\u0413\u043e\u043b\u043e\u0441\u043e\u0432\u0438\u0439 \u043f\u043e\u0448\u0443\u043a\"", "KXUFUHWHWFUF VFVH UGWG MQNOPMRMSNTPTSRZQ]P_NaLbJbIaI_K_KaJaJ` SNSSQZP]O_ SPRTP[O^N`Lb", "I\\RNOOMQLTLUMXOZR[S[VZXXYUYTXQVOSNRN RHNJRFRN SHWJSFSN RSQTQURVSVTUTTSSRS RTRUSUSTRT", "cv::PCA& cv::PCA::operator()(cv::InputArray, cv::InputArray, int, int)", "G]JQLNNMPMRNSPSR PMQNQRPVOXMZK[I[HZHXJXJZIZIY RORRQVQY ZOZNYNYP[P[NZMXMVNTPSRRVRZS[ PVPXQZS[U[WZYW", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "NWROPVPWQXSXUWVU SOQVQWRX", "func != 0", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/arithm.cpp", "scn == 1 && (dcn == 3 || dcn == 4)", "F]OFI[ PFJ[ QFK[ LFUFXGYHZKZOYSWWUYSZO[F[ WGXHYKYOXSVWTY UFWHXKXOWSUWRZO[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "H]OJPKOLNKNJOHPGSFVFYGZIZKYMVOSP VFXGYIYKXMVO QPSPVQWRXTXWWYVZS[O[LZKYJWJVKULVKW SPUQVRWTWWVYUZS[", "\"address\" : \"\u0410\u0434\u0440\u0435\u0441\"", "MWNPOPPQPROTOUPVRVSUTS UPSVRXQYOYNX", "\"disable_fingerprint_question\" : \"\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0445\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043d\u0441\u043e\u0440\u0430 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u0430 \u043f\u0430\u043b\u044c\u0446\u0430?\"", "F^KFKULXNZQ[S[VZXXYUYG LGLVMX MFMVNYOZQ[ HFPF VF\\F IFKG JFKH NFMH OFMG WFYG [FYG", "Unknown object type", "F^RRR[Q\\ RVQ\\ RIQHOHNINKONRR RISHUHVIVKUNRR RRNOLNJNIOIQJR RRVOXNZN[O[QZR RRNULVJVIUISJR RRVUXVZV[U[SZR", "\"paymentCurrencyExchange\" : \"\u041e\u0431\u043c\u0435\u043d \u0432\u0430\u043b\u044e\u0442\"", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "G\\WHVJTORUQWOZM[ QLPNNOLOKMKKLINGQF[FXGWHVKTSSVRXPZM[K[IZHYHXIWJXIY SFWGXG OSPRRQVQXPZMXT", "NVSKPVPWQXSXTWUU TKQVQWRX QKTK", "double cvThreshold(const void*, void*, double, double, int)", "void cvSeqPopMulti(CvSeq*, void*, int, int)", "decimal64", "\"contacts\" : \"\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0438\"", "LXOKOP PKOP UKUP VKUP", "\"share\" : \"\u041f\u043e\u0434\u0456\u043b\u0438\u0442\u0438\u0441\u044c\"", "cols > 0 && rows > 0 && anchor.inside(cv::Rect(0,0,cols,rows)) && (shape != CV_SHAPE_CUSTOM || values != 0)", "MXTHSIRIQHQGRFSFTGTJSLQM RGRHSHSGRG SITJ THSL", "Maximal difference between angles that treated as equal.", "\"minimalCardRepaymentError\" : \"\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u0423\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u0432\u0430\u043c\u0438 \u0441\u0443\u043c\u043c\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0443\u043c\u043c\u044b \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438.\"", "IplConvKernel* cvCreateStructuringElementEx(int, int, int, int, int, int*)", "\"refuse_password_dialog_title\" : \"\u0412\u0456\u0434\u043c\u043e\u0432\u0430 \u0432\u0456\u0434 \u0437\u043c\u0456\u043d\u0438 \u043f\u0430\u0440\u043e\u043b\u044f\"", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRTXTZV[XZYY[V WRUXUZV[", "(distCoeffs0.cols == 1 || distCoeffs0.rows == 1) && (ndcoeffs == 4 || ndcoeffs == 5 || ndcoeffs == 8)", "MXUFTGRS UGRS UFVGRS PYOZP[QZPY", "\"openGooglePlay\" : \"\u0412\u0456\u0434\u043a\u0440\u0438\u0442\u0438 Google Play\"", "\"abc_activity_chooser_view_see_all\" : \"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435\"", "void cvCalcArrBackProjectPatch(CvArr**, CvArr*, CvSize, CvHistogram*, int, double)", "LXUONX VOOX OONQNOVO NXVXVVUX", "src.dims <= 2 && esz <= (size_t)32", "MWUPUV OPOSPURVTUUS", "\"fingerprint_error_lockout\" : \"\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u0437\u0436\u0435.\"", "Some of required function pointers (is_instance, release, read or write) are NULL", "Unsupported sequence type", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "bottom-left", "Destination double pointer is NULL", "KZZBVESHQKOONTNXO]P`Qb VESIQMPPOUOZP_Qb", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEE", "\"signGeneralCertFingerprintDescription\" : \"Attention!\nBy confirming this action you assume risks associated with using such private key %1$s, %2$s entering method!\"", "JZRLRX MOWU WOMU", "\"signDocumentCertFingerprintDescription\" : \"\u041f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 %1$s, %2$s \u043a\u043b\u044e\u0447\u043e\u043c %3$s, %4$s\"", "NVQKTO QKPLTO", "\"abc_action_bar_home_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u044d\u043a\u0440\u0430\u043d\"", "J[NONUOWQXSXUWVU OOOUPWQX VOVX WOWX LOOO TOWO VXYX", "cv::Mat cv::GlBuffer::mapHost()", "\"whatsAppTitle\" : \"WhatsApp\"", "thickness <= 255", "void cvDistTransform(const void*, void*, int, int, const float*, void*, int)", "!fixedSize() || len == len0", "\"dataToTransferedList\" : \"\u2022 last name, first name, middle name and sex\n\n\u2022 date of birth\n\n\u2022 an identification number\n\n\u2022 registration address\n\n\u2022 phone number\n\n\u2022 e-mail address\"", "so it should be get as integer, unsigned integer, uint64, boolean, unsigned char, float or double value, ", "The input and output images must have the same size", "cn <= 4 && ssize.area() > 0", "\"fingerprint_acquired_too_slow\" : \"\u0412\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u043b\u0438 \u043f\u0430\u043b\u0435\u0446 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443\"", "\"login_not_in_range\" : \"\u041b\u043e\u0433\u0438\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0442 %1$d \u0434\u043e %2$d \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 (\u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b, \u0446\u0438\u0444\u0440\u044b 0\u20139, \u0441\u0438\u043c\u0432\u043e\u043b\u044b @ _ ~)\"", "A.size == arrays[i0]->size", "N2cv9ColumnSumIdfEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "LXRHLRR\\XRRH", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "MXNQOPQPRQRSQW VPURSTQWPY", "H\\XIYFYLXIVGSFPFMGKIKKLMMNOOUQWRYT KKMMONUPWQXRYTYXWZT[Q[NZLXKUK[LX", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/alloc.cpp", "COI set is not allowed here", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<float>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "*N12_GLOBAL__N_123GHT_Ballard_PosRotation6WorkerE", "\"abc_shareactionprovider_share_with\" : \"Share with\"", "\"newPassword\" : \"\u041d\u043e\u0432\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\"", "IZJQKOMMPMQNQPPTN[ OMPNPPOTM[ PTRPTNVMXMYNYOXPWOXN", "\"language\" : \"\u042f\u0437\u044b\u043a\"", "upper", "H\\LIKFKLLINGPFTFWGXIXLWNTOQO TFVGWIWLVNTO TOVPXRYTYWXYWZT[O[MZLYKWKVLUMVLW WQXTXWWYVZT[", "The function supports dense histograms only", "G]IFPPQQ JFQP KFRPI[ IFYFZLYIWF VFYH TFYG KYYY JZYZ I[Y[ZUYXWY", "\"serialNumber\" : \"Serial number\"", "HYLFL[ LFXF", "\"pinSetupChangeCodeDescPart3\" : \"\u0415\u0441\u043b\u0438 \u0443 \u0412\u0430\u0441 \u043a\u0430\u0440\u0442\u0430 \u0441 \u0447\u0438\u043f\u043e\u043c, \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u0432\u043e\u0433\u043e PIN-\u043a\u043e\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f PIN-\u043a\u043e\u0434\u0430 \u0431\u044b\u043b\u043e \u0441\u043d\u044f\u0442\u0438\u0435 \u043d\u0430\u043b\u0438\u0447\u043d\u044b\u0445 \u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432 \u0431\u0430\u043d\u043a\u043e\u043c\u0430\u0442\u0435 \u041e\u0422\u041f \u0411\u0430\u043d\u043a\u0430 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0431\u0430\u043d\u043a\u043e\u043c\u0430\u0442\u0430\u0445 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u0431\u0430\u043d\u043a\u043e\u0432 \u0423\u043a\u0440\u0430\u0438\u043d\u044b.\"", "F^FK^Y", "Bad input align", "J[RKRX SKSX LPMONOOSQU TUVSWOXOYP MONROTQUTUVTWRXO PKUK PXUX", "virtual int cv::FilterEngine::start(cv::Size, cv::Rect, int)", "void cvRepeat(const CvArr*, CvArr*)", "April", "\"already_fingerprint_question\" : \"Fingerprint \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0425\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c?\"", "\"masterpass_success_path_1\" : \"\u041c\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u0432\u0430\u043c SMS \u0441 \u043f\u0430\u0440\u043e\u043b\u0435\u043c \u043e\u0442 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 Masterpass. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0432 \u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435\"", "\"deposit_orders\" : \"\u0410\u0440\u0445\u0456\u0432\"", "LTD:^", "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2", "bad dimension index", "CvMatND* cvInitMatNDHeader(CvMatND*, int, const int*, int, void*)", "\"length_from\" : \"\u2022 \u0434\u043e\u0432\u0436\u0438\u043d\u0430 \u0432\u0456\u0434 %1$d \u0434\u043e %2$d \u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0432\"", "N2cv11MorphFilterINS_5MinOpItEENS_9MorphIVecINS_7VMin16uEEEEE", "scn == 3 && (dcn == 3 || dcn == 4)", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX [KUKSLRNRX UKTLSNSX YKZLZX [K[X HOZO HXMX PXUX XX]X", "\"ruleError1312\" : \"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 '\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c' \u0438 '\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c' \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f\"", "November", "\"setChangePin\" : \"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 / \u0417\u043c\u0456\u043d\u0438\u0442\u0438 PIN-\u043a\u043e\u0434\"", "void icvHoughLinesProbabilistic(CvMat*, float, float, int, int, int, CvSeq*, int)", "cv::Rect cv::boundingRect(cv::InputArray)", "src.size == dst.size", "scn == 1", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/opengl_interop.cpp", "G]JJLGNFOFQGQIOOORPT OFPGPINONRPTRTUSWQYNZL \\FZLWTUX ]F[LYQWUUXSZP[L[JZIXIWJVKWJX", "MXTTTSSRQROSNTMVMXNZP[S[VYXV", "PTRLQMRNSMRL RPRV", "Unknown %s code %d", "E_RIQJRKSJRI IYHZI[JZIY [YZZ[[\\Z[Y", "int cvInitLineIterator(const CvArr*, CvPoint, CvPoint, CvLineIterator*, int, int)", "I[XPVNTMPMNNNPPRSS PMONOPQRSS SSNTLVLXMZP[S[UZWX SSOTMVMXNZP[", "\"phones\" : \"Phones\"", "\"selectDate\" : \"Select date\"", "St18__moneypunct_cacheIcLb1EE", "\"common_google_play_services_install_button\" : \"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/floodfill.cpp", "\"equal_symbol\" : \"=\"", "\"documentPdfName\" : \"Payment  \u2116%1$s from %2$s.pdf\"", "cn == 3", "Invalid approximation method", "global constructors keyed to ", "\"keyAttachedSuccessfully\" : \"The key is downloaded successfully\"", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "The module is not found", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "St15numpunct_bynameIcE", "\"externalCards\" : \"\u041c\u043e\u0438 \u043a\u0430\u0440\u0442\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0431\u0430\u043d\u043a\u043e\u0432\"", "-+xX0123456789abcdef0123456789ABCDEF", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "F^ZJSJOKMLKNJQJSKVMXOYSZZZ JRVR", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR SVSa TTTa TTM]X] QaVa", "MVOMOV OMUM", "D`DRJR ORUR ZR`R", "void icvWriteHeaderData(CvFileStorage*, const CvSeq*, CvAttrList*, int)", "\"cityNotFound\" : \"\u041c\u0456\u0441\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u0435\"", "double cvPointPolygonTest(const CvArr*, CvPoint2D32f, int)", "\"fingerprint_acquired_imager_dirty\" : \"Fingerprint sensor is dirty. Please clean and try again.\"", "M should be >0", "\"fingerprint_error_no_space\" : \"\u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a, \u0443\u0434\u0430\u043b\u0438\u0442\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439.\"", "minScale > 0.0 && minScale < maxScale", "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", "\"pushChangeFromSmsCancelledMessage\" : \"You can always switch to PUSH messages (instead of SMS) in the menu Settings \\ User \\ Authorization\"", "\"repeatPassword\" : \"\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c (\u0435\u0449\u0435 \u0440\u0430\u0437)\"", "F^OFI[ PFJ[ QFK[ LFWFZG[I[KZNYOVPNP YGZIZKYNXO WFXGYIYKXNVP RPTQURWXXYYYZX WYXZYZ URVZW[Y[ZXZW F[N[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "\"keyAttachedUnsuccessfully\" : \"\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043a\u043b\u044e\u0447 \u042d\u0426\u041f \u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443..\"", "GeneralizedHough.POSITION_SCALE", "basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", "St10moneypunctIwLb1EE", "\"fingerprint_acquired_partial\" : \"\u041e\u0442\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u044c \u043f\u0430\u043b\u044c\u0446\u0430. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "H]SFPGOHNJNMOOQPTPWOYNZLZIYGWFSF UFPG PHOJONPO OORP SPWO XNYLYIXG YGUF SFQHPJPNQP TPVOWNXLXHWF QPMQKSJUJXKZN[R[VZWYXWXTWRVQTP RPMQ NQLSKUKXLZ KZP[VZ VYWWWTVR VQSP QPOQMSLULXMZN[ R[TZUYVWVSUQTP", "array([", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "F_KFK[ LFRX KFR[ YFR[ YFY[ ZFZ[ HFLF YF]F H[N[ V[][", "NULL storage pointer", "dims <= 2 && step[0] > 0", "void cvReduce(const CvArr*, CvArr*, int, int)", "\"mtrl_picker_navigate_to_year_description\" : \"Navigate to year %1$s\"", "void cvPreCornerDetect(const void*, void*, int)", "hierarchy.total() == ncontours && hierarchy.type() == CV_32SC4", "H[LFL[ LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "void cvSetReal2D(CvArr*, int, int, double)", "\"fingerprints\" : \"Fingerprints:\"", "\"noPdfReader\" : \"\u041d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 PDF\"", "\"abc_capital_on\" : \"\u0423\u0412\u0406\u041c\u041a.\"", "void cv::arithm_op(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int, void (**)(const uchar*, size_t, const uchar*, size_t, uchar*, size_t, cv::Size, void*), bool, void*)", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_15MorphColumnIVecINS_6VMax8uEEEEE", "LXVPTOROPPOQNSNUOWQXSXUW ROPQOSOVQX OSSS", "void cvSetImageROI(IplImage*, CvRect)", "void icvClose(CvFileStorage*, std::string*)", "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data", "OpenCV", "H]OKOJPJPLNLNJOHPGSFVFYGZIZKYMXNVOSP XGYIYKXMWN VFWGXIXKWMUOSP QPSPVQWRXTXWWYUZR[O[LZKYJWJULULWKWKV VRWTWWVY SPUQVSVWUYTZR[", "N2cv11FileStorageE", "uchar* cv::SparseMat::ptr(int, bool, size_t*)", "(ksize.width & 1) && (ksize.height & 1)", "\"changeGcmNo\" : \"\u041d\u0456, \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u0438, \u044f\u043a \u0454\"", "KYRKRY KRYR", "JZWKMOWS MTWT MXWX", "opencv-sequence-tree instance should contain a field \"sequences\" that should be a sequence", "Contour header size must be >= sizeof(CvContour)", "\"owner\" : \"\u0412\u043b\u0430\u0441\u043d\u0438\u043a\"", "recursive", "minDist", "\"mtrl_picker_text_input_day_abbr\" : \"d\"", "\"parentDirectory\" : \"\u041d\u0430\u0437\u0430\u0434\"", "dst.size == src1.size && dst.channels() == cn", "NULL double CvSeq pointer", "\"defaultErrorMessage\" : \"Error connecting to server. Make sure that the Internet connection is established, and then try again.\"", "\"fingerprint_hint\" : \"\u0422\u043e\u0440\u043a\u043d\u0456\u0442\u044c\u0441\u044f \u0441\u0435\u043d\u0441\u043e\u0440\u0430\"", "\"choosePhotoSource\" : \"\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044c \u0434\u0436\u0435\u0440\u0435\u043b\u043e \u0444\u043e\u0442\u043e\"", "The node is neither a map nor an empty collection", "\"generate_cert_text_step_5_open_cert\" : \"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\"", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "\"pushChangeFromSmsCancelledMessage\" : \"\u0412\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 PUSH-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0432\u043c\u0435\u0441\u0442\u043e SMS) \u0432 \u043c\u0435\u043d\u044e \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \\ \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \\ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f\"", "\"keyTransferTimeout\" : \"The time of waiting for the key has expired. To transfer the key, you need to start the process from the beginning.\"", "\"enable_fingerprint\" : \"\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c Fingerprint\"", "void cv::calcBackProject(const cv::Mat*, int, const int*, const cv::SparseMat&, cv::OutputArray, const float**, double, bool)", "Invalid type info", "\"v7_preference_on\" : \"\u0423\u0412\u0406\u041c\u041a\u041d\u0415\u041d\u041e\"", "Position threshold.", "\"generate_cert_text_step_5_open_print_form\" : \"View printed form\"", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = float; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "\"document\" : \"\u0410\u0440\u0445\u0438\u0432 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439\"", "\"special_symbols\" : \"\u0421\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u0438 (!#$%&'()*+,-./:;>=<?@[]^_`{|}~)\"", "KYNBPDRGTKUPUTTYR]P`NbOb NBOBQDSGUKVPVTUYS]Q`Ob", "LYOKNQ OKVK OLSLVK NQOPQOTOVPWRWUVWTXQXOWNVNUOUOV TOUPVRVUUWTX", "Unsupported combination of sum format (=%d), and destination format (=%d)", "MWOPPPQQSXTYUY UPTRPWOY", "MWRMNV RMVV NVVV", "\"common_google_play_services_update_text\" : \"%1$s won't run unless you update Google Play services.\"", "centers.rows == cluster_count", "\"language\" : \"Language\"", "OUTKQKQYTY", "I[LMW[X[ LMMMX[ XMWML[ XMM[L[", "alpha", "St17__timepunct_cacheIwE", "cv::Mat", "Unknown type of term criteria", "java Class for ", "I\\TFQGOJNLMOLTLXMZO[Q[TZVWWUXRYMYIXGVFTF TFRGPJOLNOMTMXNZO[ Q[SZUWVUWRXMXIWGVF NPWP", "\"password\" : \"Password\"", "void cv::batchDistance(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::OutputArray, int, int, cv::InputArray, int, bool)", "\"to_card_in_bank\" : \"\u041d\u0430 \u043a\u0430\u0440\u0442\u043a\u0443 \u0432 \u043c\u0435\u0436\u0430\u0445 \u0431\u0430\u043d\u043a\u0443\"", "edgeDst(o_prev) == edgeOrg(d_next)", "locale::_Impl::_M_replace_facet", "cv::Ptr<cv::FilterEngine> cv::createMorphologyFilter(int, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "\"emptyList\" : \"There are no items\"", "((size_t)src[i] & 15) == 0", "new[]", "void cv::thresh_32f(const cv::Mat&, cv::Mat&, float, float, int)", "\"disconnectCertDialogTitle\" : \"\u0422\u0430\u043a, \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u043a\u043b\u044e\u0447\"", "I[KKKILGMFOFPGQIRMR[ YKYIXGWFUFTGSIRM", "CvRect cvGetImageROI(const IplImage*)", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM", "No Error", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short int, float, float>; VResize = cv::VResizeCubic<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "\"digits_password\" : \"Numbers\"", "\"common_google_play_services_enable_button\" : \"Enable\"", "NSt6locale5facetE", "void cv::GlTexture::bind() const", "\"confirmTransferingToBankID\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u043c\u043e\u0438\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 BankID\"", "void cv::gemm(cv::InputArray, cv::InputArray, double, cv::InputArray, double, cv::OutputArray, int)", "LYONRKRQ VNSKSQ RQPROTOUPWRXSXUWVUVTURSQ RTRUSUSTRT", "operator\"\" ", "\"passwordPatternNotValid\" : \"The password should contain capital and small letters and numbers.\"", "N2cv14MatOp_IdentityE", "LXLLLXXXXLLL", "void cvCrossProduct(const CvArr*, const CvArr*, CvArr*)", "St11__timepunctIcE", "interpolation == 0", "\"new_deposit\" : \"\u041d\u043e\u0432\u0438\u0439 \u0434\u0435\u043f\u043e\u0437\u0438\u0442\"", "src.size == dst.size && src.channels() == dst.channels()", "void icvYMLStartWriteStruct(CvFileStorage*, const char*, int, const char*)", "sz.width % 2 == 0 && sz.height % 2 == 0", "\"addAttachment\" : \"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"", "cv::Ptr<cv::FilterEngine> cv::createSeparableLinearFilter(int, int, cv::InputArray, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "\"next\" : \"\u0414\u0430\u043b\u0435\u0435\"", "rho, theta and threshold must be positive", "edgeDst(e) == edgeDst(d_next)", "LWRMPTOXOZP[R[TYUW", "int cvGraphVtxDegree(const CvGraph*, int)", "\"disable_fingerprint\" : \"Disable Fingerprint\"", "J[XMM[ MMXM M[X[", "I\\MFMU NFMQ MQNOONQMTMWNXPXRWTUV TMVNWPWRTXTZU[W[YY KFNF", "JZZBXCUERHPKNOMSMXN\\O_Qb SHQKOONTN\\ ZBWDTGRJQLPOOSN\\ NTO]P`Qb", "src1.size == window.size", "dvec[j].size() == src.size()", "void cvWrite(CvFileStorage*, const char*, const void*, CvAttrList)", "LC_TIME", "MWOMQV WMQV", "\"qr_scan\" : \"QR scan\"", "E_RIR[ IR[R", "void cv::mulTransposed(cv::InputArray, cv::OutputArray, bool, cv::InputArray, double, int)", "src.depth() == dst.depth() && src.size == dst.size", "\"abc_searchview_description_voice\" : \"Voice search\"", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = float; uchar = unsigned char]", "\"defaultErrorMessage\" : \"\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u043e\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u043d\u043e\u0432\u0430 \u0432\u043e\u0439\u0442\u0438\"", "Division by zero occured", "Y.size() == Angle.size() && Y.type() == Angle.type()", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = float]", "\"pref_scale_listArray_key\" : \"listArray\"", "virtual void cv::_OutputArray::clear() const", "N2cv6RowSumItdEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "void* cv::OutOfMemoryError(size_t)", "mv[i].size == mv[0].size && mv[i].depth() == depth", "NVQKSMSORPQORNSO", "void cv::pyrDown(cv::InputArray, cv::OutputArray, const Size&, int)", "G]IIJKKOKUJYI[ [IZKYOYUZY[[ IIKJOKUKYJ[I I[KZOYUYYZ[[", "Unknown distribution type", "NVQMPNPPQQSQTPTNSMQM", "\"expand_button_title\" : \"Advanced\"", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMR[S[ RMSMS[", "cv::Mat& cv::Mat::setTo(cv::InputArray, cv::InputArray)", "H]XNWPVQTRQROQNPMNMKNIPGSFVFXGYHZKZNYRXUVXTZQ[N[LZKXKVMVMXLXLW OPNNNKOI XHYJYNXRWUUX QRPQOOOKPHQGSF VFWGXIXNWRVUUWSZQ[", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "!src[i].empty() && src[i].dims <= 2 && src[i].cols == src[0].cols && src[i].type() == src[0].type()", "void llcv_equalize_hist(const IplImage *, IplImage *)", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))", "\"pdf_registry\" : \"\u0420\u0435\u0435\u0441\u0442\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0441\u0447\u0435\u0442\u0430 %1$s\"", "N2cv12ColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "HYLFL[ L[X[", "\"newVersion\" : \"\u041d\u043e\u0432\u0430 \u0432\u0435\u0440\u0441\u0456\u044f OTP Smart\"", "int cvGetElemType(const CvArr*)", "Invalid graph pointer", "void cvFindCornerSubPix(const void*, CvPoint2D32f*, int, CvSize, CvSize, CvTermCriteria)", "double cv::threshold(cv::InputArray, cv::OutputArray, double, double, int)", "CV_IS_MAT(_distCoeffs) && (_distCoeffs->rows == 1 || _distCoeffs->cols == 1) && (_distCoeffs->rows*_distCoeffs->cols == 4 || _distCoeffs->rows*_distCoeffs->cols == 5 || _distCoeffs->rows*_distCoeffs->cols == 8)", "linesMax > 0 && rho > 0 && theta > 0", "JZPOOMOKMKMMNNPOSOUNWL NKNN MLOL MMSO POUN WLWY", "H]TFQGOIMLLOKSKVLYMZO[Q[TZVXXUYRZNZKYHXGVFTF TFRGPINLMOLSLVMYO[ Q[SZUXWUXRYNYKXHVF", "double cvGetReal2D(const CvArr*, int, int)", "G^LML[ LMR[ MMRY XMR[ XMX[ YMY[ IMMM XM\\M I[O[ U[\\[", "void cv::GlArrays::setTexCoordArray(cv::InputArray)", "\"turnOff\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c\"", "Convex hull is larger than the point sequence", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "NVTQSPQPPQPRQSRSSTSURVPVOU", "\"gotoPlayMarket\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 Google Play\"", "\"choose_file\" : \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0444\u0430\u0439\u043b:\"", "F]OFI[ PFJ[ QFK[ \\GMR QOU[ ROV[ SNWZ LFTF YF_F F[N[ R[Y[ MFPG NFOH RFPH SFPG ZF\\G ^F\\G JZG[ JYH[ KYL[ JZM[ UZS[ UYT[ VYX[", "Unknown/unsupported interpolation type", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/gabor.cpp", "Destination must be valid memory storage or matrix", "H]LFL[ MGMZ LFSFVGXIYKZNZSYVXXVZS[L[ MGSGVHWIXKYNYSXVWXVYSZMZ", "\"to_card_in_bank\" : \"\u041d\u0430 \u043a\u0430\u0440\u0442\u0443 \u0432\u043d\u0443\u0442\u0440\u0438 \u0431\u0430\u043d\u043a\u0430\"", "?double cv::contourArea(cv::InputArray, bool)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/color.cpp", "\"common_google_play_services_enable_title\" : \"Enable Google Play services\"", "thresh", "MXOVQVOROPPNRMSMUNVPVRTVVV", "Friday", "void icvYMLWrite(CvFileStorage*, const char*, const char*)", "LWSHRIQKQMRORPPRRTRUQWQYR[S\\ RIQM QKRO RUQY QWR[", "\"inbox\" : \"\u0412\u0445\u043e\u0434\u044f\u0449\u0438\u0435\"", "Invalid sequence header", "PTRMRV", "_roots.data == _roots0.data", "\"generate_cert_text_step_4\" : \"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u044e\u0447\u0430\u2026\"", "mask.empty() || (mask.type() == CV_8UC1 && mask.size() == image.size())", "I[POOPLROTPU OPMROT MRXR", "hu.isContinuous()", "\"caution\" : \"\u0423\u0432\u0430\u0433\u0430\"", "G]LMKNJPJRKUOYP[ JRKTOXP[P]O`MbLbKaJ_J\\KXMTOQRNTMVMYNZPZTYXWZU[T[SZSXTWUXTY VMXNYPYTXXWZ", "_points.type() == CV_32F && !_points.empty()", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "LXTSSTTTTSSRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "KXMONOPPS[T\\ NOOPR[T\\U\\ VOTRNYL\\", "\"days_5_0\" : \"\u0434\u043d\u0435\u0439\"", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "KYPKP[ TKT[ MQWQ MUWU", "7Z:RARRo @RQo ?RRr Z\"VJRr", "N2cv15MatlabFormatterE", "F^KFKZ KFY[ LFXX MFYX YGY[ HFMF VF\\F H[N[ IFKG WFYG [FYG KZI[ KZM[", "void cv::randShuffle(cv::InputOutputArray, double, cv::RNG*)", "terminate called after throwing an instance of '", "PURPRQSQSPRP RURVSVSURU", "\"lookup_code_text\" : \"Please enter LookUp code to confirm the operation. You can find out the code from the SMS sent to you by the issuing bank, or please contact the issuing bank's call center for details\"", "N2cv14NumpyFormatterE", "D`DD``", "void cvSetSeqBlockSize(CvSeq*, int)", "\"doYouReallyWantToAbortProcessAndGoBack\" : \"\u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u043a\u043b\u044e\u0447\u0435\u0439 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d. \u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0435\u0440\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043d\u0430\u0437\u0430\u0434?\"", "box.size.width >= 0 && box.size.height >= 0 && thickness <= 255", "\"available\" : \"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e\"", "virtual void {anonymous}::GHT_Ballard_PosRotation::calcHist()", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "LYQOOPNRNUOWQXTXVWWUWRVPTOQO QOPPOROUPWQX TXUWVUVRUPTO", "cv::ogl::Buffer cv::_InputArray::getOGlBuffer() const", "void cvSplit(const void*, void*, void*, void*, void*)", "IZMFM[ MFNFNZ NZYZY[ M[Y[", "void icvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*)", "N2cv9RowFilterIsfNS_8RowNoVecEEE", "arr != 0 && contour_header != 0 && block != 0", "scn == m.cols || scn + 1 == m.cols", "?void cvMulSpectrums(const CvArr*, const CvArr*, CvArr*, int)", "\"moneybox\" : \"\u0421\u043a\u0430\u0440\u0431\u043d\u0438\u0447\u043a\u0430\"", "unsigned", "\"newMessage\" : \"New message\"", "\"abc_search_hint\" : \"\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u043e\u0448\u0443\u043a\u043e\u0432\u0438\u0439 \u0437\u0430\u043f\u0438\u0442\u2026\"", "MXSMRNSOTNSM P[OZPYQZQ[P]N_", "I[LMR[ MMRY NMSY XNSYR[ JMQM TMZM KMNO PMNN VMXN YMXN", "void cv::perspectiveTransform(cv::InputArray, cv::OutputArray, cv::InputArray)", "\"connectCertFingerprintDescription\" : \"Enabling Fingerprint for key %1$s, %2$s\"", "\"pdf_extract_card\" : \"\u0412\u044b\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043a\u0430\u0440\u0442\u044b %1$s\"", "Sunday", "void cvTransform(const CvArr*, CvArr*, const CvMat*, const CvMat*)", "F^HFM[ RFM[ RFW[ \\FW[", "Images with planar data layout should be used with COI selected", "\"minimalCardRepaymentError\" : \"\u0423\u0432\u0430\u0433\u0430! \u0417\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0432\u0430\u043c\u0438 \u0441\u0443\u043c\u0430 \u043c\u0435\u043d\u0448\u0430 \u0437\u0430 \u0441\u0443\u043c\u0443 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0443. \u041c\u043e\u0436\u043b\u0438\u0432\u0435 \u0432\u0438\u043d\u0438\u043a\u043d\u0435\u043d\u043d\u044f \u043f\u0440\u043e\u0441\u0442\u0440\u043e\u0447\u0435\u043d\u043e\u0457 \u0437\u0430\u0431\u043e\u0440\u0433\u043e\u0432\u0430\u043d\u043e\u0441\u0442\u0456.\"", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", "\"abc_searchview_description_submit\" : \"Submit query\"", "\"passwordForYourPrivateKey\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443:\"", "\"common_google_play_services_update_title\" : \"\u041e\u043d\u043e\u0432\u0456\u0442\u044c \u0441\u0435\u0440\u0432\u0456\u0441\u0438 Google Play\"", "KYVOTVSYR[ WOUVTYR[P\\M\\L[M[N\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "MWRORU OPUT UPOT", "bool cv::eigen(cv::InputArray, bool, cv::OutputArray, cv::OutputArray)", "src.type() == CV_8UC1", "*N12_GLOBAL__N_110CLAHE_ImplE", "H[LMR[ MMRY XMR[P_NaLbKbJaK`La JMPM TMZM", "F]GQHOJMMMNNNPMUMXNZO[ LMMNMPLULXMZO[Q[SZUXWUXRYMYIXGVFTFRHRJSMUPWRZT SZUWVUWRXMXIWGVF", "\"abc_toolbar_collapse_description\" : \"\u0417\u0433\u043e\u0440\u043d\u0443\u0442\u0438\"", "\"copy\" : \"\u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c\"", "Complex keys are not supported", "KYVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUVVS RKPMOONRNVPX RXTVUS SSXS", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZLYNXOUPNP XHYJYLXN UFWGXIXMWOUP RPTQUSWYX[Z[[Y[W WWXYYZZZ TQURXXYYZY[X I[Q[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "void* icvReadGraph(CvFileStorage*, CvFileNode*)", "Input sequence must consist of 2d points or pointers to 2d points", "\"abc_capital_off\" : \"\u0417\u041d\u0418\u0416\u041a\u0410\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/matchcontours.cpp", "\"enterPassword\" : \"Enter your private key password\"", "The library is compiled without OpenGL support", "_CvContourScanner* cvStartFindContours(void*, CvMemStorage*, int, int, int, CvPoint)", "number of removed elements is negative", "/proc/self/auxv", "\"passwordsNotMatch\" : \"\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0435\u0433\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442!\"", "\"generate_cert_text_step_5_open_print_form\" : \"\u041f\u0435\u0440\u0435\u0433\u043b\u044f\u043d\u0443\u0442\u0438 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0434\u0440\u0443\u043a\u0443\"", "std::string cv::getNameOfType(int)", "AcRAPCMDJDGCEABGAKAPBTDXG\\L`Rc RATCWDZD]C_AbGcKcPbT`X]\\X`Rc BHbH", "\"zxing_msg_default_status\" : \"\u0429\u043e\u0431 \u0432\u0456\u0434\u0441\u043a\u0430\u043d\u0443\u0432\u0430\u0442\u0438 \u0448\u0442\u0440\u0438\u0445-\u043a\u043e\u0434, \u043f\u043e\u043c\u0456\u0441\u0442\u0456\u0442\u044c \u0439\u043e\u0433\u043e \u0432 \u043f\u0440\u044f\u043c\u043e\u043a\u0443\u0442\u043d\u0438\u043a \u0432\u0438\u0434\u043e\u0448\u0443\u043a\u0430\u0447\u0430.\"", "connectivity == 8 || connectivity == 4", "N2cv16SymmColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "H\\PFJ[ QFK[ XNWOXPYOYNXMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW MFQF", "\"emptyList\" : \"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0440\u043e\u0436\u043d\u0456\u0439\"", "St9exception", "CbHFH[ IFI[ EFLF E[L[ VFSGQIPKOOORPVQXSZV[X[[Z]X^V_R_O^K]I[GXFVF VFTGRIQKPOPRQVRXTZV[ X[ZZ\\X]V^R^O]K\\IZGXF IPOP", "space", "F^OFI[ PFJ[ LFWFZG[I[KZNYOVPMP WFYGZIZKYNXOVP RPTQURVZW[Y[ZYZX URWYXZYZZY F[M[", "virtual void cv::ColumnSum<int, unsigned char>::operator()(const uchar**, uchar*, int, int, int)", "E_LPIRLT OMJROW JR[R", "angleEpsilon", "\"fingerprint_success\" : \"\u0412\u0456\u0434\u0431\u0438\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u044f \u0440\u043e\u0437\u043f\u0456\u0437\u043d\u0430\u043d\u043e\"", "KYRKLX RMWX RKXX MWVW LXXX", "borderType == BORDER_DEFAULT", "K > 0 && (normType == NORM_L2 || normType == NORM_L1)", "LYMQNOPMSMTNTQRWRZS[ RMSNSQQWQZR[U[WYXW", "anchor.inside(Rect(0, 0, ksize.width, ksize.height))", "G]KFK[ YFY[ KPYP", "\"codeFromSms\" : \"\u041a\u043e\u0434 \u0437 SMS\"", "H[LMR[ MMRY NMSY XNSYP_NaLbJbIaI_K_KaJaJ` JMQM TMZM KMNO PMNN VMXN YMXN", "</opencv_storage>", "\"yesTurnItOn\" : \"Yes, turn it on\"", "\"extCertRequested\" : \"\u0417\u0430\u044f\u0432\u043a\u0430 \u043d\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435\"", "J[OMO[ PMP[ LMSM PTTTWUXWXXWZT[L[ TTVUWWWXVZT[", "N2cv11MatOp_AddExE", "src.type() == dst.type() && src.size == dst.size", "cv::PCA& cv::PCA::computeVar(cv::InputArray, cv::InputArray, int, double)", "__gnu_cxx::__concurrence_unlock_error", "F]HNINJPJUKXMZP[T[VZXXYVZRZNYMXMYPYSXWVZ JNKPKULX XMYNYO GPHNIMJMKNLPLVMYNZP[ QFSb RGRa SFQb QFSF QbSb", "void cvDrawContours(void*, CvSeq*, CvScalar, CvScalar, int, int, int, CvPoint)", "F]OFI[ PFJ[ LFXF[G\\I\\K[NYPUQMQ XFZG[I[KZNXPUQ F[M[", "\"generate_cert_repeate_password_hint\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430\"", "decimal128", "void cv::convertMaps(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, int, bool)", "void cv::cvtColor(cv::InputArray, cv::OutputArray, int, int)", "n >= 0 && m >= 0", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsEEEE", "src.type() == dst.type() && dst.size() == mapx.size()", "Feature table levels.", "CvGraph* cvCloneGraph(const CvGraph*, CvMemStorage*)", "Input COI is not supported", "Invalid histogram type", "virtual void {anonymous}::CLAHE_Impl::apply(cv::InputArray, cv::OutputArray)", "  what():  ", "The total width is not divisible by the new number of channels", "unsigned long long", "integer", "j>=0 && j<(int)vtcs.size()", "\"generateCertificate\" : \"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u044e\u0447\u0438\"", "Size of sequence element (elem_size) is inconsistent with seq->flags", "\"paymentUkraine\" : \"\u041f\u043e \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0432 \u0433\u0440\u0438\u0432\u043d\u0456\"", "\"invalidHost\" : \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u043e\u043b\u044f \u0425\u043e\u0441\u0442\"", "\"home\" : \"\u0413\u043b\u0430\u0432\u043d\u0430\u044f\"", "CV_MAT_TYPE(mtype) == m.type()", "OUSMSNTNTMSM QPRPSQSRRVQXPYOYNX", "\"passwordTooShort\" : \"The new password is too short. The password should be least %1$d characters\"", "\"mtrl_picker_save\" : \"Save\"", "\"google_app_id\" : \"1:1044626685477:android:5da496a51bc350033e09cc\"", "G\\KFK[ YFKT POY[", "void cv::GlArrays::setVertexArray(cv::InputArray)", "void cvLaplace(const void*, void*, int)", "N2cv14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEE", "CV_MAT_DEPTH(ctype) >= CV_32F && CV_MAT_CN(ctype) <= 2", "\"yourPairingCode\" : \"Your pairing code:\"", "\"myCards\" : \"My OTP Bank cards\"", "\"google_storage_bucket\" : \"otpsmart-firebase.appspot.com\"", "H]LRJTIWIZK[L[NZPX MRKTJWJZK[ RRPXPZR[S[UZWXXUXR SRQXQZR[ XRYVZW[W]V", "JZTFRGQHQIRJUKXK UKRLPMOOOQQSTTVT TTPUNVMXMZO\\S^T_TaRbPb", "\"partners\" : \"\u041f\u0430\u0440\u0442\u043de\u0440\u044b\"", "int cvGraphAddEdge(CvGraph*, int, int, const CvGraphEdge*, CvGraphEdge**)", "St8messagesIwE", "cv::Mat cv::Mat::cross(cv::InputArray) const", "F^HOJKOU JMOWRPWPZO[M[KZIXHWHUITKTMUPVRWUWXUZ WHVIUKUMWQXTXWWYUZ", "Unknown/unsupported parameter type", "NWTMSNSOTP UPSPQQQRRSTS SSQTPUPVQWSXSYRZQZ", "\"nightlyCashbox\" : \"Evening cash desk\"", "\"canNotDecryptData\" : \"\u041d\u0435 \u0432\u0434\u0430\u043b\u043e\u0441\u044f \u0440\u043e\u0437\u0448\u0438\u0444\u0440\u0443\u0432\u0430\u0442\u0438 \u0434\u0430\u043d\u0456. \u041c\u043e\u0436\u043b\u0438\u0432\u043e, \u0432\u0438 \u043f\u043e\u043c\u0438\u043b\u0438\u043b\u0438\u0441\u044f \u043f\u0440\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u0456 \u043a\u043e\u0434\u0443 \u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u043d\u043d\u044f \u0432 web-\u043a\u043b\u0456\u0454\u043d\u0442\u0456 \u0442\u0430 / \u0430\u0431\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0432 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043b\u0456\u0454\u043d\u0442\u0456. \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043d\u044f \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u0443 \u043f\u043e\u0447\u043d\u0456\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441 \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443.\"", "\"cityNotFound\" : \"City is not found\"", "tilesY", "CPU variant", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia", "\"scale_default\" : \"Standart\"", "CvArr* cvReshapeMatND(const CvArr*, int, CvArr*, int, int, int*)", "\"dataToTransferedList\" : \"\u2022 \u043f\u0440\u0456\u0437\u0432\u0438\u0449\u0435, \u0456\u043c\u2019\u044f, \u043f\u043e \u0431\u0430\u0442\u044c\u043a\u043e\u0432\u0456 \u0442\u0430 \u0441\u0442\u0430\u0442\u044c\n\n\u2022 \u0434\u0430\u0442\u0430 \u043d\u0430\u0440\u043e\u0434\u0436\u0435\u043d\u043d\u044f\n\n\u2022 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0439 \u043d\u043e\u043c\u0435\u0440\n\n\u2022 \u0430\u0434\u0440\u0435\u0441\u0430 \u0440\u0435\u0454\u0441\u0442\u0440\u0430\u0446\u0456\u0457\n\n\u2022 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0443\n\n\u2022 e-mail \u0430\u0434\u0440\u0435\u0441\u0430\"", "print", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<double, double, float>; VResize = cv::VResizeLanczos4<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "\"deposit_orders\" : \"\u0410\u0440\u0445\u0438\u0432 \u0437\u0430\u044f\u0432\u043e\u043a\"", "!GHT_Ballard_PosScale_info_auto.name().empty()", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "\"approveWithSmsMessage\" : \"To confirm the action enter the code from SMS\"", "\"userNotLegal\" : \"\u042d\u0442\u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \"OTP Smart\", \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u043e \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043b\u0438\u0446. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043b\u0438\u0446 \"OTP Smart Business\".\"", "KXOKOX PKPX MKWKWOVK MXRX", "\"days_5_0\" : \"days\"", "G]LMLXMZP[R[UZWX MMMXNZP[ WMW[ XMX[ IMMM TMXM W[[[", "H\\YMXOVQNWLYK[ LQMOOMRMVO MOONRNVOXO LYNYRZUZWY NYR[U[WYXW", "Bad input sequence", "Preliminary end of the stream", "<NULL>", "Ca].\\.[/[0\\1]1^0^.],[+Y+W,U.T0S3R:QJQjPsOv \\/\\0]0]/\\/ R:Rj U.T1S:SZRjQqPtOvMxKyIyGxFvFtGsHsItIuHvGv GtGuHuHtGt", "\"paymentUpbs\" : \"\u041a\u043e\u043c\u0443\u043d\u0430\u043b\u044c\u043d\u0456\"", "Unknown comparison method", "void cv::adaptiveBilateralFilter(cv::InputArray, cv::OutputArray, cv::Size, double, double, cv::Point, int)", "\"share\" : \"Share\"", "\"language\" : \"\u041c\u043e\u0432\u0430\"", "I[LMOMNSMXL[ YMXPWRUURXOZL[", "coeffs0.rows == 1 || coeffs0.cols == 1", "hdr && hdr->dims == 3", "H\\MMM[ NMN[ JMUMXNYPYQXSUT UMWNXPXQWSUT NTUTXUYWYXXZU[J[ UTWUXWXXWZU[", "\"works_on_weekends\" : \"Works on weekends\"", "\"callTheBank\" : \"Call the bank\"", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "\"nightlyCashbox\" : \"\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u0435\u0447\u0435\u0440\u043d\u0435\u0439 \u043a\u0430\u0441\u0441\u044b\"", "cv::SymmColumnVec_32f::SymmColumnVec_32f(const cv::Mat&, int, int, double)", "I[L+O1R8T=UAVFWNWVV^UcTgRlOsLy O1Q6S<T@UFVNVVU^TdShQnOs", "Subdivision is empty", "*N12_GLOBAL__N_123GHT_Ballard_PosRotationE", "LWTKULUMVMVLTKRKPMPX RKQMQX NOSO NXSX", "\"logins_dont_match\" : \"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u00ab%1$s\u00bb \u0438 \u00ab%2$s\u00bb \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/phasecorr.cpp", "void cvReleaseFileStorage(CvFileStorage**)", "\"description\" : \"Description\"", "io/card/payment/DetectionInfo", "Key may not start with '-'", "\"workTime\" : \"\u0412\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b\"", "G\\XIYLYFXIVGSFQFNGLIKKJNJSKVLXNZQ[S[VZXXYV QFOGMILKKNKSLVMXOZQ[", "scn == 3 && (dcn == 3 || dcn == 4) && (depth == CV_8U || depth == CV_32F)", "void cv::SparseMat::copyTo(cv::Mat&) const", "N2cv16SymmColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "void cv::setIdentity(cv::InputOutputArray, const Scalar&)", "%.16e", "\"changeScaleWarning\" : \"Scale change will take effect after the release of the settings\"", "void cv::dft(cv::InputArray, cv::OutputArray, int, int)", "\"new_deposit\" : \"\u041d\u043e\u0432\u044b\u0439 \u0434\u0435\u043f\u043e\u0437\u0438\u0442\"", "\"pdf_extraction\" : \"PDF-\u0432\u0438\u043f\u0438\u0441\u043a\u0430\"", "UTF-16", "St13basic_fstreamIwSt11char_traitsIwEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_15MorphColumnIVecINS_7VMax16sEEEEE", "int icvDecodeFormat(const char*, int*, int)", "I[VNL[ XMNZ LMXM LMLNVN NZXZX[ L[X[", "\"currentPassword\" : \"Current password\"", "void cvSeqInsertSlice(CvSeq*, int, const CvArr*)", "type == _src2.type() && (type == CV_32F || type == CV_64F)", "\"disconnectExternalAttention\" : \"\u042f\u043a\u0449\u043e \u0432\u0438 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0446\u044e \u0434\u0456\u044e, \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435 \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0432\u0456\u0434 \u043e\u0431\u043b\u0456\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0438\u0441\u0443, \u0456 \u0432\u0438 \u043d\u0435 \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0439\u043e\u0433\u043e \u043d\u0430 \u0456\u043d\u0448\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044f\u0445. \u0412\u0438 \u0434\u0456\u0439\u0441\u043d\u043e \u0431\u0430\u0436\u0430\u0454\u0442\u0435 \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u043a\u043b\u044e\u0447?\"", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a ^G]H^I_H_G]F aFZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja `F\\T[X[Z\\[_[aYbW aF]T\\X\\Z][ DM^M", "G]NYKYJWK[O[MVKRJOJLKIMGPFTFWGYIZLZOYRWVU[Y[ZWYYVY LSKOKLLI XIYLYOXS O[MULPLKMHNGPF TFVGWHXKXPWUU[ KZNZ VZYZ", "N2cv10MatOp_GEMME", "Some of stored vertex indices are out of range", "votesThreshold", "\"abc_activity_chooser_view_see_all\" : \"See all\"", "NVSKQMQORPSORNQO", "\"unknown\" : \"\u041d\u0435\u0432\u0456\u0434\u043e\u043c\u043e\"", "virtual void EmptyFuncTable::convert(const cv::gpu::GpuMat&, cv::gpu::GpuMat&, double, double, cudaStream_t) const", "JZWMQMONNOMQMSNUOVQWWW", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "St10money_base", "Double hyphen '--' is not allowed in the comments", "\"certFingerprintTitle\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0438 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e Fingerprint\"", "G\\KFK[ KFTFWGXHYJYMXOWPTQKQ", "\"error_failed_ssl_handSnake\" : \"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 SSL - \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u0432 \u0431\u0430\u043d\u043a\"", "\"save\" : \"\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438\"", "curve.checkVector(2) >= 0 && (curve.depth() == CV_32F || curve.depth() == CV_32S)", "MXWKXLXKVKTLSNPYO[N\\ VKULTNQYP[N\\L\\L[M\\ POVO", "\"changeCurrentPasswordLabel\" : \"To change the password - enter the current password:\"", "\"mtrl_picker_range_header_title\" : \"Select a Date Range\"", "dst.elemSize() <= 32", "cv::GlTexture::GlTexture(cv::InputArray, bool)", "\"default_web_client_id\" : \"1044626685477-visi3d6re0sqjmm6aa1ibhklvbjhs88j.apps.googleusercontent.com\"", "St10moneypunctIcLb0EE", "method == DECOMP_LU || method == DECOMP_CHOLESKY", "k == MAT", "Some of essential matrix attributes are absent", "F^JMN[ KMNX LMOX RMOXN[ RMV[ SMVX RMTMWX ZNWXV[ GMOM WM]M HMKN NMLN XMZN \\MZN", "NULL object pointer", "virtual thunk to ", "E_GFM[ GFHFMX RFMX RIM[ RIW[ RFWX ]F\\FWX ]FW[", "\"refuse_password_button_ok\" : \"Decline password change\"", "void cvReleaseImageHeader(IplImage**)", "\"viberTitle\" : \"Viber\"", "void cvCalcCovarMatrix(const CvArr**, int, CvArr*, CvArr*, int)", "N2cv9MatOp_CmpE", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/algorithm.cpp", "\"newPasswordMustContain\" : \"\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c:\"", "CvLinePolar llcv_hough(const CvArr *, IplImage *, IplImage *, float, float, int, float, float, bool, float)", "E`RMR[ SMS[ OMVM JNIOHNIMJMKNMRNSPTUTWSXRZN[M\\M]N\\O[N PTNUMVKZJ[ PTNVLZK[I[HZGX UTWUXVZZ[[ UTWVYZZ[\\[]Z^X O[V[", "\"makePhoto\" : \"Take photo\"", "\"enter\" : \"\u0412\u0425\u041e\u0414\"", "KYTPTSUTVTWSWQVOUNSMQMONNOMQMSNUOVQWSWUV TQSPQPPQPSQTSTTS", "\"inbox\" : \"\u0412\u0445\u0456\u0434\u043d\u0456\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/subdivision2d.cpp", "The matrix size does not match to the number of stored elements", "virtual bool EmptyDeviceInfoFuncTable::has(int, int) const", "void cvSeqRemove(CvSeq*, int)", "void cvDCT(const CvArr*, CvArr*, int)", "E_NWLTIRLPNM LPJRLT JRZR VWXT[RXPVM XPZRXT", "OUTKSLRNROSQQRSSRURVSXTY", "The closing '%c' does not match the opening '%c'", "void cvEndWriteStruct(CvFileStorage*)", "Unknown error", "One of indices is out of range", "The wrong closing bracket", "schar* cvSeqInsert(CvSeq*, int, const void*)", "J[XOXPYPYOXNUMRMONNONQORVVWW NPOQVUWVWYVZS[P[MZLYLXMXMY", "N2cv11MatOp_SolveE", "F^GQHOJMLMMNNPNSLX MNMRLVLZ MPKUKXLZN[P[RZTXVU XMVUVXWZX[Z[\\Y]W YMWUWZ XMZMXTWX", "J[WOXMXQWOVNTMPMNNMOMQNRPSUUWVXW MPNQPRUTWUXVXYWZU[Q[OZNYMWM[NY", "construction vtable for ", "void cvCvtColor(const CvArr*, CvArr*, int)", "\"LOCALE\" : \"en\"", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 6>; VecOp = cv::NoVec<int, short int>]", "void cv::scaleAdd(cv::InputArray, double, cv::InputArray, cv::OutputArray)", "lower", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 8>; VecOp = cv::PyrDownVec_32s8u]", "\"common_google_play_services_unsupported_text\" : \"\u0414\u043e\u0434\u0430\u0442\u043e\u043a %1$s \u043d\u0435 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438\u043c\u0435 \u0431\u0435\u0437 \u0441\u0435\u0440\u0432\u0456\u0441\u0456\u0432 Google Play, \u044f\u043a\u0456 \u043d\u0435 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u0443\u044e\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0430\u0448\u043e\u043c\u0443 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457.\"", "\"pushFromNotCurrentLogin\" : \"\u041f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430, \u0432\u0438 \u0443\u0432\u0456\u0439\u0448\u043b\u0438 \u044f\u043a %2$s, \u0437\u043c\u0456\u043d\u0438\u0442\u0438 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043d\u0430 %1$s?\"", "N2cv26BilateralFilter_8u_InvokerE", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "\"expireDate\" : \"Expiry date\"", "data && nsamples > 0", "\"fingerprint_error_no_space\" : \"\u041d\u0435 \u0432\u0434\u0430\u043b\u043e\u0441\u044f \u0437\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u0432\u0456\u0434\u0431\u0438\u0442\u043e\u043a. \u0412\u0438\u0434\u0430\u043b\u0456\u0442\u044c \u043d\u0430\u044f\u0432\u043d\u0438\u0439 \u0432\u0456\u0434\u0431\u0438\u0442\u043e\u043a.\"", "F^ISMSLRKOKMLJNHQGSGVHXJYMYOXRWS[S ITOTMRLOLMMJOHQG SGUHWJXMXOWRUT[T KXYX KYYY", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZVZRUR ZKYKXIWHUGQGOHNIMKLNLSMVNXOYQZUZWYXXYVYSUSUR", "H\\NRMQLRMSNR VRWQXRWSVR", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "\"deposit_orders\" : \"Archive\"", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "NUSMSTRVPVOTOS", "basic_string::_S_construct null not valid", "key_ >= 0", "E_UMXP[RXTUW IR[R", "source image must be 8uC1 and the distance map must be 32fC1 (or 8uC1 in case of simple L1 distance transform)", "depth == tdepth || tdepth == CV_32F", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "LYNNONOONONNOLQKTKVLWNWOVQSRRSRTST TKVMVPUQSR RWRXSXSWRW", "H\\NML[ OMNSMXL[ YMXQVU ZMYPXRVUTWQYOZL[ KMOM", "\"notFoundExternalCertAuth\" : \"\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u043c\"", "K[QOOPNQMSMUNWPXQXSWUUWRXO QOOQNSNUOWPX QOSOUPWWXX SOTPVWXXYX", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallNoVec]", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "MWRXWOMORX RUUP RUOP RRSP RRQP", "untyped", "A.type() == x.type() && A.cols == x.rows && x.cols == b.cols", "bottom", "\"selectDate\" : \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0430\u0442\u0443\"", "*N12_GLOBAL__N_115GHT_Ballard_PosE", "MWOHQJSMTPTTSWQZO\\ QJRLSPSTRXQZ", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZMYOXPUQNQ XHYJYMXO UFWGXIXNWPUQ I[Q[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "\"disconnectExternalAndRemoveLocalAttention\" : \"\u041f\u0440\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d \u043e\u0442 \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438, \u0438 \u0432\u044b \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445. \u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447?\"", "\"masterpass_success_link\" : \"http://www.masterpass.com.ua/\"", "\"privateKeySuccessfullyConnected\" : \"Fingerprint for the key %1$s %2$s is successfully connected\"", "CV_IS_MAT(_cameraMatrix) && _cameraMatrix->rows == 3 && _cameraMatrix->cols == 3", "E_XP[RXT UMZRUW IRZR", "F^MMKLJJJIKGMFNFPGQIQKPONULYJ[H[GZGX MRVOXN[L]J^H^G]F\\FZHXLVRUWUZV[W[YZZY\\V", "I[NII[ VI[[ MM[[ WMI[ NIVI MMWM", "\"refuse_password_button_ok\" : \"\u0412\u0456\u0434\u043c\u043e\u0432\u0438\u0442\u0438\u0441\u044c \u0437\u043c\u0456\u043d\u0438\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\"", "St17moneypunct_bynameIcLb0EE", "GeneralizedHough.POSITION", "G]VGUHVIWHWGUF XFRFOGMILLL[ RFPGNIMLM[ WHW[ XFX[ IMWM I[P[ T[[[", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "\"not_set\" : \"\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\"", "src.size == dst.size && src.depth() == dst.depth()", "\"yourPairingCode\" : \"\u0412\u0430\u0448 \u043a\u043e\u0434 \u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u043d\u043d\u044f:\"", "*N12_GLOBAL__N_121system_error_categoryE", "\"partners\" : \"\u041f\u0430\u0440\u0442\u043d\u0435\u0440\u0438\"", "JXNKNX OKOX SOSS LKVKVOUK OQSQ LXQX", "KYLQNOPORPSSSXR\\ LQNPPPRQSS WOVRSXQ\\", "H]MFM[ NFN[ JFQF NPUPXQYRZTZWYYXZU[J[ UPWQXRYTYWXYWZU[", "\"newMessage\" : \"\u041d\u043e\u0432\u043e\u0435\"", "\"connection\" : \"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\"", "ctype == CV_32F || ctype == CV_64F", "G]PIPGQFSFTGTI GZHXJVKTLPLKMJOIUIWJXKXPYTZV\\X]Z GZ]Z QZP[Q\\S\\T[SZ", "H\\LMW[ MMX[ XML[ JMPM TMZM J[P[ T[Z[", "double cv::Mahalanobis(cv::InputArray, cv::InputArray, cv::InputArray)", "\"pbClientService\" : \"\u041e\u0431\u0441\u043b\u0443\u0433\u043e\u0432\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0456\u0454\u043d\u0442\u0456\u0432 \u0420\u0412\"", "narrays <= 1000", "CvMat* cvInitMatHeader(CvMat*, int, int, int, void*, int)", "\"pref_scale_key\" : \"pref_scale_key\"", "H]OJPKOLNKNJOHPGSFVFYGZIZKYMWOTQPSMUKWI[ VFXGYIYKXMVOPS JYKXMXRZUZWYXW MXR[U[WZXW", "void cv::preprocess2DKernel(const cv::Mat&, std::vector<cv::Point_<int> >&, std::vector<unsigned char>&)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/emd.cpp", "(*each).size() == size && (*each).type() == type", "ksize <= MAX_ESIZE", "NVOPRV UPRV", "void icvReleaseSeq(void**)", "\"fcm_fallback_notification_channel_label\" : \"\u0406\u043d\u0448\u0435\"", "\"confirmWithdrawalCard\" : \"\u00ab%1$s\u00bb \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441 \u043a\u0430\u0440\u0442\u044b %2$s\"", "Mask size should be 3 or 5 or 0 (presize)", "dstOfs.x >= 0 && dstOfs.y >= 0 && dstOfs.x + srcRoi.width <= dst.cols && dstOfs.y + srcRoi.height <= dst.rows", "\"pushRegistrationConfirmationMessage\" : \"\u0425\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e\u0442 OTP Smart \u043d\u0430 \u044d\u0442\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e?\"", "src1.size == dst.size && src1.type() == dst.type()", "!fixedSize()", "const float* cv::KDTree::getPoint(int, int*) const", "\"to\" : \"\u0414\u043e\"", "_kernel.channels() == 1", "\"message\" : \"\u041f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\"", "\"selectKeyTitle\" : \"\u0414\u043b\u044f \u043f\u043e\u0434\u0430\u043b\u044c\u0448\u043e\u0433\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0432\u0438 \u043c\u0430\u0454\u0442\u0435 \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u043a\u043b\u044e\u0447 \u043d\u0430 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439\"", "void cvPerspectiveTransform(const CvArr*, CvArr*, const CvMat*)", "\"address\" : \"\u0410\u0434\u0440\u0435\u0441\u0430\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/lapack.cpp", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", ", line ", "depth == CV_8U", "CvSeq* cvHoughCircles(CvArr*, void*, int, double, double, double, double, int, int)", "F^QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ HMIMJNKQLSMTPUTUWTXSYQZN[M\\M LRKNJLILKN HMIKJKKLLPMSNTPU YN[LZLYNXR TUVTWSXPYLZK[K\\M", "null pointer to header", "I\\PFNMMSMWNYOZQ[S[VZXWYTYRXOWNUMSMQNPOOQNT QFOMNQNWOZ VYWWXTXQWO MFRFPMNT S[UYVWWTWQVNUM NFQG OFPH", "basic_ostream", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "int cv::getKernelType(cv::InputArray, cv::Point)", "opencv-sequence", "\"special_characters\" : \"\u2022 \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u0438\"", "right", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<unsigned char, int, short int, 2048, cv::HResizeNoVec>; VResize = cv::VResizeLinear<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeLinearVec_32s8u>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "\"isValidUntilDate\" : \"\u0414\u0456\u0454 \u0434\u043e\"", "requested size is negative or too big", "\"enable_fingerprint_question\" : \"Enable logging in with a fingerprint sensor?\"", "H\\IPKNMMOMQNROSRSVRZOb JOLNPNRO ZMYPXRSYP^Nb YMXPWRSY", "N9__gnu_cxx24__concurrence_lock_errorE", "cv::gpu::GpuMat& cv::_OutputArray::getGpuMatRef() const", "\"back\" : \"Back\"", "\"masterpass_go_to_site\" : \"To MasterCard website\"", "\"outbox\" : \"Sent\"", "void cvGetTextSize(const char*, const CvFont*, CvSize*, int*)", "H\\UFH[ UFV[ THU[ LUUU F[L[ R[X[", "H\\LFL[M[ LFMFM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "N2cv6RowSumIhdEE", "I[YHXJVOTUSWQZO[ SLRNPONOMMMKNIPGSF\\FZGYHXKVSUVTXRZO[M[KZJYJXKWLXKY UFYGZG", "\"stringLengthMastBeMost2\" : \"\u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0432.\"", "Saturday", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", ")?O_o", "void cvMorphologyEx(const void*, void*, void*, IplConvKernel*, int, int)", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEE", "\"os_info\" : \"Android: %1$s, Api-version: %2$s\"", "virtual size_t EmptyDeviceInfoFuncTable::freeMemory(int) const", "N2cv16MorphologyRunnerE", "MWQMOSPURVTUUSTQRPPQOS", "void cv::Mat::copyTo(cv::OutputArray) const", "N2cv6RowSumIsdEE", "void cvAbsDiff(const CvArr*, const CvArr*, CvArr*)", "LYQOOQOSQUSUUSUQSOQO QOPQPSQU SUTSTQSO TPUOVO PTOUOXPYTYVZ OWPXTXVYV[T\\P\\N[NYPX", "LZLVNSPO SFL[ TFM[ URUSVSURTRRTOU OURVSZT[ OUQVRZT[U[XYZV", "bool icvCheckGlError(const char*, int, const char*)", "I\\UFSGQIOMNPMTLZKb UFWFYHYKXMWNUORO ROTPVRWTWWVYUZS[Q[OZNYMV", "\"common_google_play_services_install_title\" : \"Get Google Play services\"", "E_\\O\\N[MZMYNXPVUTXRZP[L[JZIYHWHUISJRQNRMSKSIRGPFNGMIMKNNPQUXWZY[[[\\Z\\Y", "\"pinSetupCodeLimitText\" : \"(4 characters, valid characters 0\u20139)\"", "\"skypeTitle\" : \"Skype\"", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_15MorphColumnIVecINS_7VMax16uEEEEE", "void cvConvertScale(const void*, void*, double, double)", "J[PKLX QKMX XKTX YKUX NKSK VK[K OQVQ JXOX RXWX", "Number of dimensions can be 0 only if a user-defined metric is used", "LXRMSLRKQLRMRQQRSURV RQSRQURVRZQ[R\\S[RZ POONNOOPPOTOUNVOUPTO PXOWNXOYPXTXUWVXUYTX", "LXSKSURWQX TKTUSWQXPXNWMUNTOUNV QKVK", "virtual void cv::FilterEngine::apply(const cv::Mat&, cv::Mat&, const Rect&, cv::Point, bool)", "virtual void EmptyFuncTable::copy(const cv::gpu::GpuMat&, cv::gpu::GpuMat&) const", "I[LNXN LRXR LVXV", "tlsContainers_[id] == pContainer", "\"rule_error_90075\" : \"\u041f\u043e\u0442\u043e\u0447\u043d\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0435\u0432\u0456\u0440\u043d\u0438\u0439\"", "E_JPLONOPPSTTUVVXVZU[S[QZOXNVNTOSPPTNULUJT ZPXOVOTPQTPUNVLVJUISIQJOLNNNPOQPTTVUXUZT KOJQJSKU YUZSZQYO", "H\\MFXFQO MFMGWG WFPO QNSNVOXQYTYUXXVZS[P[MZLYKWLW POSOVPXS TOWQXTXUWXTZ XVVYSZPZMYLW OZLX", "void cv::rectangle(cv::Mat&, cv::Rect, const Scalar&, int, int, int)", "N2cv18SymmRowSmallFilterIffNS_17SymmRowSmallNoVecEEE", "NVUNTMSMRNRV PPTP", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "delete ", "G]WFW[ XFX[ [FOFLGKHJJJLKNLOOPWP OFMGLHKJKLLNMOOP RPPQORLYKZJZIY PQOSMZL[J[IYIX T[[[", "basic_string::resize", ", file ", "void cvCalcPCA(const CvArr*, CvArr*, CvArr*, CvArr*, int)", "*N12_GLOBAL__N_118CLAHE_CalcLut_BodyE", "void cv::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "opencv-sequence-tree", "ios_base::_M_grow_words allocation failed", "\"confirmWithdrawalCard\" : \"\u00ab%1$s\u00bb \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0456\u0442\u044c \u0441\u043f\u0438\u0441\u0430\u043d\u043d\u044f \u0437 \u043a\u0430\u0440\u0442\u043a\u0438 %2$s\"", "\"shouldUpdateToNewVersion\" : \"\u041c\u044b \u043e\u0431\u043d\u043e\u0432\u0438\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435! \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u0441\u0435\u043c\u0438 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\u043c\u0438 OTP Smart \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438.\"", "scaleFunc != 0", "IZJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "G\\LFL[ MFM[ MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IFMF", "\"menu_exit\" : \"\u0412\u044b\u0445\u043e\u0434\"", "operator", "JZRMLW RMXW", "\"fingerprint_error_unable_to_process\" : \"\u041f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "Number of points should be >= 5", "!)>void cv::mulSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "_param1.channels() == 1 && (_param1.rows == 1 || _param1.cols == 1) && (_param1.rows + _param1.cols - 1 == cn || _param1.rows + _param1.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))", "KYVBTDRGPKOPOTPYR]T`Vb", "maxScale", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "\"pushMessage\" : \"Push - \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\"", "\"PORT\" : \"7002\"", "\"already_fingerprint_question\" : \"Fingerprint \u0432\u0436\u0435 \u0437\u0430\u0440\u0435\u0454\u0441\u0442\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u0434\u043b\u044f \u0456\u043d\u0448\u043e\u0433\u043e \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430. \u0411\u0430\u0436\u0430\u0454\u0442\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438?\"", "\"fingerprint_error_canceled\" : \"Fingerprint operation canceled.\"", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "LYTOUPUQVQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWOVPVPWQX", "G]JIIKIMJOLPOPROTNWKXHXGWFVFTGRIQKPNPQQSSTUTWSYQZO WFUGSIRKQNQRST ZOYSWWUYSZO[L[JZIXIWJVKWJX YSWVUXRZO[", "\"refuse_password_message\" : \"\u041e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u044f\u0441\u044c \u043e\u0442 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0441\u0435\u0431\u044f \u0440\u0438\u0441\u043a\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0435\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0435\u0442\u0430\u0446\u0438\u0435\u0439 \u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442, \u0447\u0442\u043e \u0431\u0430\u043d\u043a \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0441\u0442\u0438 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043f\u0440\u044f\u043c\u043e\u0439 \u0438\u043b\u0438 \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u044b\u0439 \u0443\u0449\u0435\u0440\u0431, \u044f\u0432\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u043c-\u043b\u0438\u0431\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0435\u0442\u0430\u0446\u0438\u0435\u0439 \u043f\u0430\u0440\u043e\u043b\u044f.\"", "\"existingCertificateInfo\" : \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0435\"", "The sequence element is not a numerical scalar", "src.size == dst.size && dst.type() == CV_8UC(src.channels())", "header_size >= (int)sizeof(CvContour)", "PUSMRORQSQSPRP", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "\"internalErrorMessage\" : \"\u0421\u0442\u0430\u043b\u0430\u0441\u044f \u043f\u043e\u043c\u0438\u043b\u043a\u0430 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456. \u0421\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u043d\u043e\u0432\u0443. \u042f\u043a\u0449\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c\u0441\u044f - \u0437\u0432\u0435\u0440\u043d\u0456\u0442\u044c\u0441\u044f \u0432 \u0431\u0430\u043d\u043a\"", "cv::RGB2Lab_b::RGB2Lab_b(int, int, const float*, const float*, bool)", "\"exitMessage\" : \"\u0412\u0438 \u0434\u0456\u0439\u0441\u043d\u043e \u0431\u0430\u0436\u0430\u0454\u0442\u0435 \u0432\u0438\u0439\u0442\u0438 \u0437 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438?\"", "imageFeatures.size() == templFeatures.size()", "std::basic_iostream<char, std::char_traits<char> >", "\"certBlockedText\" : \"Until your certificate is not authorized by the bank you are able to enter documents without a signature, but such documents will not be accepted for processing (you will be able to sign these documents later)\"", "N2cv16BatchDistInvokerE", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<unsigned char, int, short int>; VResize = cv::VResizeLanczos4<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "\"mtrl_picker_invalid_format_example\" : \"Example: %1$s\"", "\"mtrl_picker_toggle_to_text_input_mode\" : \"Switch to text input mode\"", "J[RGR[ SGS[R[ LFYFYG LFLGYG", "int cvRegisterModule(const CvModuleInfo*)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/out.cpp", "\"choose_file\" : \"\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044c \u0444\u0430\u0439\u043b:\"", "JZLKRX MKRV XKRX LKXK NLWL", "MWOPRV UPRVQXPYOY", "=void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = int; uchar = unsigned char]", "\"generate\" : \"Generate\"", "MWOPUV UPOV", "St13bad_exception", "Input array has NULL data pointer", "N2cv6RowSumItiEE", "Null double pointer to graph scanner", "IplImage* cvGetImage(const CvArr*, IplImage*)", "src.type() == CV_8UC1 || src.type() == CV_8UC3", "\"do_change_password\" : \"\u0417\u043c\u0456\u043d\u0438\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\"", "\"full_screen\" : \"Full screen\"", "(D.rows == ((flags & CV_GEMM_A_T) == 0 ? A.rows : A.cols)) && (D.cols == ((flags & CV_GEMM_B_T) == 0 ? B.cols : B.rows)) && D.type() == A.type()", "N2cv11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEE", "F_\\S[UYVWVUUTTQPPONNLNJOIQISJULVNVPUQTTPUOWNYN[O\\Q\\S", "p.checkVector(2, CV_32S) >= 0", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnVec_32f]", "St23__codecvt_abstract_baseIcc9mbstate_tE", "algorithm", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ ZFTXTZV[XZYY[V [FUXUZV[", "I[XPVNTMQMONMPLSLUMXOZQ[T[VZXX XPWQVOTNQNOONPMSMUNXOYQZTZVYWWXX", "?cv::RGB2HSV_b::RGB2HSV_b(int, int, int)", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "\"selectCertificateTitle\" : \"\u0412\u0438\u0431\u0456\u0440 \u043f\u0430\u043f\u043a\u0438 \u0437 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u043c\"", "void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "the source and the destination images must be of the same size", "NWSFRGRM SGRM SFTGRM", "void cvStartReadChainPoints(CvChain*, CvChainPtReader*)", "\"scale\" : \"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\"", "MXVFTHSJSKTLUKTJ", "St7codecvtIwc9mbstate_tE", "The size of element calculated from \"dt\" and the elem_size do not match", "\"enterPassword\" : \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443\"", "java resource ", "PUUDSGQKPPPTQYS]U`", "columnBorderType != BORDER_WRAP", "\"material_slider_range_start\" : \"Range start,\"", "Bayer->Gray demosaicing only supports 8u and 16u types", "IZWNUMRMONMPLSLVMYNZQ[T[VZ RMPNNPMSMVNYOZQ[ MTUT", "\"actionBarTitle\" : \"\"", "\"password_secret_key\" : \"Private key password\"", "\"amount\" : \"\u0421\u0443\u043c\u0430\"", "OTSMQSQURVSV", "\"noFileReader\" : \"No program is found to open the file\"", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = double; uchar = unsigned char]", "virtual int cv::FilterEngine::start(const cv::Mat&, const Rect&, bool, int)", "\"enable_fingerprint_question\" : \"\u0410\u043a\u0442\u0438\u0432\u0443\u0432\u0430\u0442\u0438 \u0432\u0445\u0456\u0434 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0441\u0435\u043d\u0441\u043e\u0440\u0430 \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u0430 \u043f\u0430\u043b\u044c\u0446\u044f?\"", "G]HQIOKMMMNNOPOSMX NNNRMVMZ NPLULXMZO[Q[SZUXWT YMU[T^RaPb ZMV[T_ YM[MW[U_SaPbMbKaJ`J^L^L`K`K_", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/accum.cpp", "void cvInitUndistortRectifyMap(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cv::extractChannel(cv::InputArray, cv::OutputArray, int)", "\"changeGcmMessage\" : \"\u0417\u0430\u0440\u0430\u0437 \u0432\u0438 \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u0442\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u0432\u0456\u0434 OTP Smart \u043d\u0430 \u0456\u043d\u0448\u0438\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439. \u0411\u0430\u0436\u0430\u0454\u0442\u0435 \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0442\u0438 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043d\u0430 \u0446\u0435\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439? (\u043d\u0430 \u0456\u043d\u0448\u0438\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043d\u0430\u0434\u0445\u043e\u0434\u0438\u0442\u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0443\u0442\u044c)\"", "\"abc_action_mode_done\" : \"Done\"", "void cv::rectangle(cv::Mat&, cv::Point, cv::Point, const Scalar&, int, int, int)", "!_mv.fixedType() || CV_MAT_TYPE(_mv.flags) == m.depth()", "JZNKNX OKOX LKSKVLWNVPSQ SKULVNUPSQ OQSQVRWTWUVWSXLX SQURVTVUUWSX", "\"setChangePin\" : \"Set / Change PIN\"", "(evals0.cols == 1 || evals0.rows == 1) && ecount0 <= ecount && evects0.cols == evects.cols && evects0.rows == ecount0", "o\"eBo\"eBo\"eBo\"eB", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "H\\QIK[ SIY[ RIX[ MUVU I[O[ U[[[ QBOCNENGOIQJSJUIVGVEUCSBQB", "Null key element", "\"branches\" : \"\u0412\u0456\u0434\u0434\u0456\u043b\u0435\u043d\u043d\u044f\"", "H\\PBP_ TBT_ XIWJXKYJYIWGTFPFMGKIKKLMMNOOUQWRYT KKMMONUPWQXRYTYXWZT[P[MZKXKWLVMWLX", "void cvInRange(const void*, const void*, const void*, void*)", "St8numpunctIwE", "__float128", "F^JFN[ KFNV RFN[ RFV[ SFVV ZFV[ GFNF WF]F", "void cvMulSpectrums(const CvArr*, const CvArr*, CvArr*, int)", "CV_IS_MASK_ARR( src ) && CV_MAT_TYPE( dst->type ) == CV_8UC1", "\"pdf_extraction\" : \"PDF-\u0432\u044b\u043f\u0438\u0441\u043a\u0430\"", "N2cv12RemapInvokerE", "0 <= i && i < (int)v.size()", "\"refuse_change\" : \"Refuse change\"", "coeffs[j] >= 0 && coeffs[j + 1] >= 0 && coeffs[j + 2] >= 0 && coeffs[j] + coeffs[j + 1] + coeffs[j + 2] < 1.5f*LabCbrtTabScale", "src.channels() == dst.channels()", "LWTSSQQPOQNSOUQVSUTS UPTSTUUVVV", "unsigned short", "KYQKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "\"weekendsWork\" : \"\u0420\u0430\u0431\u043e\u0442\u0430 \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435\"", "void cv::resize(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "\"error_failed_ssl_handSnake\" : \"\u041d\u0435 \u0432\u0434\u0430\u043b\u043e\u0441\u044f \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 \u0431\u0435\u0437\u043f\u0435\u0447\u043d\u0435 SSL. \u0417\u0432\u0435\u0440\u043d\u0456\u0442\u044c\u0441\u044f \u0432 \u0431\u0430\u043d\u043a\"", "virtual int EmptyDeviceInfoFuncTable::minorVersion(int) const", "j < nimages", "\"generate_cert_text_step_1\" : \"To send payments, you need to generate an EDS key. The process consists of 3 simple steps\"", "\"saveKey\" : \"\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u043a\u043b\u044e\u0447\"", "NVRMOV UPTPRQPS PSQUSVTV", "void cvSolvePoly(const CvMat*, CvMat*, int, int)", "void cv::medianBlur(cv::InputArray, cv::OutputArray, int)", "!hasVotes || voteOutBuf.size() == oldSize", "virtual cv::gpu::GpuMat cv::_InputArray::getGpuMat() const", "\"between_accounts\" : \"Between own accounts\"", "St10moneypunctIcLb1EE", "MXNPOPPQPSNY PSQUSVUUVSUQSPQQPS", "E_IO[O IU[U", "UiTDS!R", "\"currency_rate\" : \"\u041a\u0443\u0440\u0441\u044b \u0432\u0430\u043b\u044e\u0442\"", "F^[GZH[I\\H[GXFUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea YMWTVXVZW[Z[\\Y]W ZMXTWXWZX[ JMZM", "H\\JQKOLNNMZM LONNYN JQKPMOZO ROQZR[SZRO ZMZO RORZ", "\"defaultDialogTitle\" : \"OTP Smart\"", "Non-positive or too large number of dimensions", "src2.size == dst.size && src2.channels() == dst.channels()", "K == 1 && update == 0 && mask.empty()", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF OIMLLOKSKWLY UXWUXRYNYJXH SFQGOJNLMOLSLXMZN[ Q[SZUWVUWRXNXIWGVF", "\"next\" : \"Next\"", "basic_string::substr", "AcPALBJCGEEGCJBLAPATBXCZE]G_JaLbPcTcXbZa]__]aZbXcTcPbLaJ_G]EZCXBTAPA", "\"new_cert\" : \"\"", "void cv::DFT(const cv::Complex<_Tp>*, cv::Complex<_Tp>*, int, int, const int*, const int*, const cv::Complex<_Tp>*, int, const void*, cv::Complex<_Tp>*, int, double) [with T = float]", "N2cv12CSVFormatterE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "\"signDocumentCertFingerprintDescription\" : \"\u041f\u0456\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 %1$s, %2$s \u043a\u043b\u044e\u0447\u043e\u043c %3$s, %4$s\"", "\"error\" : \"\u041f\u043e\u043c\u0438\u043b\u043a\u0430\"", "templEdges.type() == CV_8UC1", "I[V+VRVy W+WRWy L+W+ LyWy", "void {anonymous}::GHT_Guil_Full::calcOrientation()", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "\"step1Paring\" : \"\u0428\u0430\u0433 1: \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u0435\"", "F]VFNb GQHOJMLMMNMPLULXMZO[Q[TZVXXUZP[M", "QSRQQRRSSRRQ", "I[RMONMQLTLWMYNZP[R[UZWWXTXQWOVNTMRM RMPNNQMTMXNZ R[TZVWWTWPVN", "\"do_change_password\" : \"Change password\"", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[[[[`Z[", "void cvMin(const void*, const void*, void*)", "void cvClearHist(CvHistogram*)", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = signed char]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<unsigned char>; VecOp = cv::MorphIVec<cv::VMin8u>; cv::Point = cv::Point_<int>]", "func != 0 && cn <= 4", "\"notes\" : \"\u0417\u0430\u043f\u0438\u0441\u0438: %1$s\"", "JYNKNX OKOX SOSS LKVKVOUK OQSQ LXVXVTUX", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "\"generate_certificate_print_form_sent\" : \"\u041f\u0435\u0447\u0430\u0442\u043d\u0443 \u0444\u043e\u0440\u043c\u0443 \u0437\u0430\u043f\u0438\u0442\u0443 \u043d\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442 \u0432\u0456\u0434\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0430 \u0432\u0430\u0448\u0443 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 %1$s\"", "op == CV_REDUCE_SUM || op == CV_REDUCE_MAX || op == CV_REDUCE_MIN || op == CV_REDUCE_AVG", "void cvBackProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)", "scaleStep > 0.0", "H\\LJMKLLKKKJLHMGPFTFWGXHYJYLXNUPPRNSLUKXK[ TFVGWHXJXLWNTPPR KYLXNXSZVZXYYX NXS[W[XZYXYV", "\"between_accounts\" : \"\u041c\u0456\u0436 \u0441\u0432\u043e\u0457\u043c\u0438 \u0440\u0430\u0445\u0443\u043d\u043a\u0430\u043c\u0438\"", "std::basic_string", "void icvXMLWriteString(CvFileStorage*, const char*, const char*, int)", "F]KMILHJHIIGKFLFNGOIOKNOMRLVLXMZN[P[RZTXVUWSYM [FYMVWT]RbPfNgMfMdNaP^S[VY[V", "F^IMN[ IMJMNX RMNX RPN[ RPV[ RMVX [MZMVX [MV[", "ranges[i] && ranges[i][0] < ranges[i][1]", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM MPLRLVMX WXXVXRWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNSM", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK OWOVPUQURVRZS[T[UZ RVSZT[", "JYTFRGQHQIRJUKXK XKTMQONRMUMWNYP[S]T_TaSbQbP`", "N2cv8Filter2DIfNS_4CastIffEENS_11FilterNoVecEEE", "\"stringLengthMastBeMost2\" : \"characters.\"", "I[N.Q1S4U8V=VCUITMQXP\\ObOgPlQoSs Q1S5T8U=UBTHSLPWO[NaNgOlQpSsVv", "Inplace operation is not supported", "H\\YIWGTFPFMGKIKKLMMNOOUQWRXSYUYXWZT[P[MZKX", "regex_error", "G\\LFL[MZOZ MGMY IFNFNZ NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ JFLG KFLH", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && src1.type() == CV_8U)", "s >= 0", "\"path_password_eye\" : \"M12,4.5C7,4.5 2.73,7.61 1,12c1.73,4.39 6,7.5 11,7.5s9.27,-3.11 11,-7.5c-1.73,-4.39 -6,-7.5 -11,-7.5zM12,17c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5 5,2.24 5,5 -2.24,5 -5,5zM12,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3 3,-1.34 3,-3 -1.34,-3 -3,-3z\"", "\"connect\" : \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\"", "\"allow_geolocation\" : \"\u0412\u0432\u0456\u043c\u043a\u043d\u0456\u0442\u044c \u0441\u0435\u0440\u0432\u0456\u0441 \u0433\u0435\u043e\u043b\u043e\u043a\u0430\u0446\u0456\u0457, \u0449\u043e\u0431 \u0434\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456 \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u0442\u0438 \u0432\u0430\u0448\u0443 \u0433\u0435\u043e\u043f\u043e\u0437\u0438\u0446\u0456\u044e\"", "\"fingerprint_error_hw_not_available\" : \"\u0421\u043a\u0430\u043d\u0435\u0440 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d\"", "H\\MFLO NGMN MFWFWG NGWG MNPMSMVNXPYSYUXXVZS[P[MZLYKWLW LOMOONSNVOXR TNWPXSXUWXTZ XVVYSZPZMYLW OZLX", "src.size == dst.size && src.depth() == CV_8U && dst.type() == CV_8U", "\"payment\" : \"\u041f\u0435\u0440\u0435\u043a\u0430\u0437\u0438\"", "The output array size is incorrect", "PUSNRNRMSMSORQ", "\"qr_scan_code\" : \"\u0421\u043a\u0430\u043d\u0443\u0432\u0430\u0442\u0438 QR\"", "MWTMQY RPPQOSPURVSVUUVSUQSPRP", "Invalid numeric value in the string", "Convex hull is neither sequence nor matrix", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "type == CV_64FC2", "!_seq || _seq->elem_size == sizeof(_Tp)", "CvMat* cvGetCols(const CvArr*, CvMat*, int, int)", "KXUGTHUIVHVGUFSFQGPIP[ SFRGQIQ[ MMUM M[T[", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK", "The number of channels must be 1, 2, 3 or 4", "The matrix should be 1-dimensional and continuous array of int's", "FALSE", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<double, double>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "double cvContourArea(const void*, CvSlice, int)", "\"numberText\" : \"Number\"", "MWSZR[QZRYSZS\\R^Q_", "D`DR`R JYZY P`T`", " type, ", "MWRLRX MOWU WOMU", "\"passwordForYourPrivateKey\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0432\u0430\u0448\u043e\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430:\"", "MWPHTRP\\", "MXQMNV QMUMVOVQUTTURVNV", "KZPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb RDSGSKRN RVSYS]R`", "Input image depth is not supported by function", "void cvReleaseHist(CvHistogram**)", "hdr && hdr->dims == 2", "\"currentPassword\" : \"\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\"", "\"connectExternalKey\" : \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0430 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0426\u0421\u041a\"", "\"disable_fingerprint_question\" : \"Are you sure you want to disable logging in with the fingerprint sensor?\"", "double cvMatchShapes(const void*, const void*, int, double)", "F]NMLNJQITIWJZK[M[OZQW RSQWRZS[U[WZYWZTZQYNXM", "\"refuse_password_dialog_title\" : \"Password change refuse\"", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 8>; VecOp = cv::NoVec<int, unsigned char>]", "H\\LJMKLLKKKJLHMGPFTFWGXIXLWNTOQO TFVGWIWLVNTO TOVPXRYTYWXYWZT[P[MZLYKWKVLUMVLW WQXTXWWYVZT[", "H\\MFKP KPMNPMSMVNXPYSYUXXVZS[P[MZLYKWKVLUMVLW SMUNWPXSXUWXUZS[ MFWF MGRGWF", "F]NMNQMWLZK[ WMW[ XMX[ KM[M I[H`H[[[[`Z[", "void cv::meanStdDev(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::InputArray)", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ SOUNWNXOXPZPZNXMVMTNQQOTNW XNYOYP PSQSWYYYZX TWWZYZ RTUZV[X[YZZX L[N[", "The source image must be 8-bit, single-channel", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 6>; VecOp = cv::NoVec<int, short unsigned int>]", "\"no\" : \"\u041d\u0435\u0442\"", "\"common_google_play_services_enable_text\" : \"%1$s won't work unless you enable Google Play services.\"", "The lower boundary can not be calculated if the cost matrix is used", "void cvReleaseImage(IplImage**)", "char* icvYMLSkipSpaces(CvFileStorage*, char*, int, int)", "\"amountToMustExceedAmountFrom\" : \"'To' amount must be greater than 'From' amount\"", "HZLFL[ LFYF LPTP", "NULL pointer to array or destination header", "\"fingerprint_acquired_insufficient\" : \"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443\"", "\"contacts\" : \"Contacts\"", "cv::Mat cv::getGaborKernel(cv::Size, double, double, double, double, double, int)", "__gnu_cxx::__concurrence_lock_error", "MVQMNV QMVM PQSQ NVSV", "F^NMLNKNIMHKHJIHKGLGNHOJOKNMKQJTJVKYM[P\\T\\W[YYZVZTYQVMUKUJVHXGYG[H\\J\\K[MYNXNVM JVKXMZP[T[WZYXZV", "src.checkVector(2, CV_32F) == 4 && dst.checkVector(2, CV_32F) == 4", "St10moneypunctIwLb0EE", "Could not determine sparse matrix dimensionality", "\"currencyExchangeArchive\" : \"\u0412\u0430\u043b\u044e\u0442\u043e\u043e\u0431\u043c\u0456\u043d\"", "CV_IS_MAT(img) && CV_MAT_TYPE(img->type) == CV_8UC1", "\"abc_action_mode_done\" : \"\u0413\u043e\u0442\u043e\u0432\u043e\"", "m == n", "MWNPOPPQPROTOUPVRVSUTS UPTSTUUVVV", "MWNMRQRV VMRQ", "void cv::merge(const cv::Mat*, size_t, cv::OutputArray)", "pt1 && pt2", "KYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb", "templFeatures.size() == static_cast<size_t>(levels + 1)", "F]OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[U[WV MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[ P[UZ R[UY UYWV", "N2cv11MorphFilterINS_5MaxOpIhEENS_9MorphIVecINS_6VMax8uEEEEE", "MWTKTLULUKTK ORPPQOSOTPTRRYQ[O\\M\\M[N\\ ROSPSRQYP[O\\", "Bad CvMat header", "\"useFingerpintInsteadKey\" : \"\u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0432\u0456\u0434\u0431\u0438\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u044f \u0437\u0430\u043c\u0456\u0441\u0442\u044c \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\"", "void icvXMLStartWriteStruct(CvFileStorage*, const char*, int, const char*)", "\"uploadCertificate\" : \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\"", "MWRFRT RYQZR[SZRY", "No associated state", "MATLAB", "\"masterpass_success_path_3\" : \"\n\n\u0422\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0430\u0448\u0438\u0445 \u043a\u0430\u0440\u0442\u0430\u0445.\"", "KXMQNPOPPQPUQVSVTUUSVP", "_Sat ", "\"existingCertificateFailureType\" : \"The DS key stored on this device is outdated. For security reasons, the key will be deleted. You can transfer a new key through the web client or by copying the key and certificate files to the device\u2019s memory.\"", "N2cv11MorphFilterINS_5MaxOpItEENS_9MorphIVecINS_7VMax16uEEEEE", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF QGNHLKKNKSLVNYQZSZVYXVYSYNXKVHSGQG", "NUMPY", "cv::Mat cv::getStructuringElement(int, cv::Size, cv::Point)", "\"keyAttachedUnsuccessfully\" : \"\u0406\u043c\u043f\u043e\u0440\u0442\u043e\u0432\u0430\u043d\u0456 \u043a\u043b\u044e\u0447 \u0415\u0426\u041f \u0442\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442 \u0454 \u043d\u0435\u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0438\u043c\u0438 \u043e\u0434\u0438\u043d \u0434\u043e \u043e\u0434\u043d\u043e\u0433\u043e.\"", "MWPHP\\ QHQ\\ PHUH P\\U\\", "CvMat** cvCreatePyramid(const CvArr*, int, double, const CvSize*, CvArr*, int, int)", "dst.data != src.data", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "dcn == 3 || dcn == 4", "\"password_must_contain\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u043c\u0456\u0441\u0442\u0438\u0442\u0438:\"", "void cv::polylines(cv::InputOutputArray, cv::InputArrayOfArrays, bool, const Scalar&, int, int, int)", "\"requisitesTransitiveModeMessage\" : \"IBAN:%1$s\n\u0420/\u0441: %2$s\n\u0432 %3$s, \u041c\u0424\u041e %4$s,\n\u041f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044c: %5$s,\n\u041a\u043e\u0434 \u0415\u0413\u0420\u041f\u041e\u0423 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f: %6$s\"", "St10bad_typeid", "MWOMOV OMRMTNUPUSTURVOV", "\"sign_in\" : \"\u0412\u0445\u043e\u0434\"", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 1.5f", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "!fixedType() && !fixedSize()", "AbBQCOEMHMINIPHTF[ GMHNHPGTE[ HTJPLNNMPMRNSOSQP[ PMRORQO[ RTTPVNXMZM\\N]O]Q[W[Z\\[ ZM\\O\\QZWZZ[[^[`YaW", "cv::ogl::Buffer& cv::_OutputArray::getOGlBufferRef() const", "void cvSetData(CvArr*, void*, int)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/generalized_hough.cpp", "August", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "H\\YFK[ KFYF K[Y[", "\"abc_searchview_description_submit\" : \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\"", "double cv::norm(cv::InputArray, int, cv::InputArray)", "Scale threshold.", "Too long string literal", "KYUBUb NBUB NbUb", "H\\MMM[ NMN[ JMQM NTPTSSTRVNWMXMYNXOWN PTSUTVVZW[ PTRUSVUZV[X[YZZX J[Q[", "LC_MONETARY", "MWMWWM", "\"selectDateRangeFrom\" : \"\u0421 \u0434\u0430\u0442\u044b\u2026\"", "N2cv18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "\"canNotDecryptData\" : \"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0432\u044b \u043e\u0448\u0438\u0431\u043b\u0438\u0441\u044c \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043a\u043e\u0434\u0430 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0432 web-\u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0438/\u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0432 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0435. \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043d\u043e\u0432\u043e.\"", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "flags", "F^KFK[ LGLZ MFM[ WFW[ XGXZ YFY[ HF\\F H[P[ T[\\[ IFKG JFKH NFMH OFMG UFWG VFWH ZFYH [FYG KZI[ KYJ[ MYN[ MZO[ WZU[ WYV[ YYZ[ YZ[[", "LYLVNSPRRRTSTVSXPZN[ RRSSSVRXPZ N[P\\Q^QaPdNfLgKfKdLaO^R\\VYYV N[O\\P^PaOdNf", "LYSKQLPMOONRNUOWPXRXTWUVVTWQWNVLUKSK SKQMPOOSOVPX RXTVUTVPVMUK OQVQ", "JZMMSMUNVOWQWSVUUVSWMW", "KZPKLX QKMX OQPPROTOVPVRUUUWVX TOUPURTUTWUXWXXWYU NKQK", "Image step is wrong", "Wrong argument type", "MWRMNV RMVV", "char32_t", "/sys/devices/system/cpu/possible", "virtual int EmptyDeviceInfoFuncTable::majorVersion(int) const", "\"abc_searchview_description_submit\" : \"\u041d\u0430\u0456\u0441\u043b\u0430\u0442\u0438 \u0437\u0430\u043f\u0438\u0442\"", "St15time_get_bynameIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "int cv::KDTree::findNearest(cv::InputArray, int, int, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols", "A.step[d-1] == A.elemSize()", "\"newPinAndRepeatNotEquals\" : \"Make sure that PIN numbers are identical\"", "MXRMPNOPOSPURVSVUUVSVPUNSMRM QQTR TQQR", "MXQMNV WMTV PQUQ", "generic", "\"abc_menu_shift_shortcut_label\" : \"Shift+\"", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF NHMJLNLSMWNY VYWWXSXNWJVH QFOGNIMNMSNXOZQ[ S[UZVXWSWNVIUGSF LPXQ LQXP", "E]JMHLGJGIHGJFKFMGNINKMOLRKVKXLZN[P[RZSYUUXMZF XMWQVWVZW[X[ZZ[Y]V", "\"abc_toolbar_collapse_description\" : \"Collapse\"", "Element size doesn't match to the size of predefined element type (try to use 0 for sequence element type)", "Unsupported YAML version (it must be 1.x)", "\"new_login\" : \"New login\"", "\"change_the_password_user\" : \"\u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f %1$s\"", "Unknown/unsupported border type", "\"exitMessage\" : \"\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f?\"", "uchar* cv::SparseMat::ptr(int, int, int, bool, size_t*)", "\"paymentBank\" : \"\u0412\u043d\u0443\u0442\u0440\u0438 \u0431\u0430\u043d\u043a\u0430\"", "NVSLRMQLRKSLSNQP", "N2cv14MorphRowFilterINS_5MinOpIsEENS_12MorphRowIVecINS_7VMin16sEEEEE", "vals[ofs[k]] <= pivot", "\"pref_scale_listValue_key\" : \"listValue\"", "N2cv34adaptiveBilateralFilter_8u_InvokerE", "CaDQEOGMIMJNKPKSIX JNJRIVIZ JPHUHXIZK[M[OZQXRU TMRURXSZU[W[YZ[X]U^Q^M]M]N^P UMSUSZ TMVMTTSX", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "IZNMN[ OMO[ OSPPRNTMWMXNXOWPVOWN KMOM K[R[", "Incorrect element name %s", "\"sign\" : \"\u041f\u0456\u0434\u043f\u0438\u0441\u0430\u0442\u0438\"", "\"internalErrorMessage\" : \"There was an error in the program. Try again. If the error persists - please contact your bank\"", "JZRIPOJOOSMYRUWYUSZOTORI", "H\\SMQMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMPLNKMJMHNGPFSFWH MPLSLUMX WXXUXSWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNOKNJNIOHQGTGWH", "\"ruleError1312\" : \"\u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u043e\u043b\u0456\u0432 '\u041d\u043e\u0432\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c' \u0442\u0430 '\u041f\u043e\u0442\u043e\u0447\u043d\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c' \u043c\u0430\u044e\u0442\u044c \u0432\u0456\u0434\u0440\u0456\u0437\u043d\u044f\u0442\u0438\u0441\u044f.\"", "\"abc_menu_alt_shortcut_label\" : \"Alt\u00a0+\"", "MWQPOV UPTPRQPS PSQUSVTV", "<?xml", "std::string cv::AlgorithmInfo::paramHelp(const char*) const", "St8numpunctIcE", "ncZOLH", "basic_string", "MWUMQV OMUM", "\"connectExternalKey\" : \"External CA key connection\"", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "dims > 0 && dims == H2.dims() && H1.type() == H2.type() && H1.type() == CV_32F", "[Start]FindContours support only 8uC1 and 32sC1 images", "basic_filebuf::underflow incomplete character in file", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "void cv::SparseMat::convertTo(cv::Mat&, int, double, double) const", "H\\LFL[ MGM[L[ LFTFWGXHYJYMXOWPTQMQ MGTGWHXJXMWOTPMP RQX[Y[ SQY[", "height", "\"choosePhoto\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0444\u043e\u0442\u043e\"", "HZMMM[ NMN[ JMXMXRWM J[Q[", "idx0.data == idx.data", "\"certFingerprintAdditionalBtn\" : \"Enter a password\"", "I[LRXR", "PURMRR SMSR RURVSVSURU", "\"generate_cert_text_step_5\" : \"\u041a\u043b\u044e\u0447 \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u0437\u0433\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u0442\u0430 \u0433\u043e\u0442\u043e\u0432\u0438\u0439 \u0434\u043e \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u0432\u0430\u043d\u043d\u044f \u043d\u0430 \u0446\u044c\u043e\u043c\u0443 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457.\n\n\u042f\u043a\u0449\u043e \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0441\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0442\u0438\u0441\u044f \u0446\u0438\u043c \u043a\u043b\u044e\u0447\u0435\u043c \u043d\u0430 \u0456\u043d\u0448\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044f\u0445, \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0456\u0442\u044c \u0439\u043e\u0433\u043e \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0446\u0456\u0454\u0457 \u0444\u043e\u0440\u043c\u0438 \u0430\u0431\u043e \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0434\u043e\u0434\u0430\u0442\u043a\u0443\"", "cv::SparseMat::SparseMat(const CvSparseMat*)", "void cv::circle(cv::Mat&, cv::Point, int, const Scalar&, int, int, int)", "Type name should contain only letters, digits, - and _", "type == srcB.type() && srcA.size() == srcB.size()", "\"latin_simbol_upper_case\" : \"\u041b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0456 \u043b\u0456\u0442\u0435\u0440\u0438 \u0443 \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u043c\u0443 \u0440\u0435\u0433\u0456\u0441\u0442\u0440\u0456\"", "op == CMP_LT || op == CMP_LE || op == CMP_EQ || op == CMP_NE || op == CMP_GE || op == CMP_GT", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXVRUWUZV[W[YZZY\\V", "cv::Mat::operator IplImage() const", "\"user_info\" : \"User\"", "dims == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))", "\"pinSetupChangeCodeDescPart1\" : \"\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f PIN-\u043a\u043e\u0434\u0430 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\"", "\"download_certificate\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447\"", "H]TBL_ YBQ_ ZKZJYJYL[L[JZHYGVFRFOGMIMLNNPPVSWUWXVZ NLONVRWT OGNINKOMUPWRXTXWWYVZS[O[LZKYJWJULULWKWKV", "\"rule_error_90075\" : \"\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0435\u0432\u0435\u0440\u0435\u043d\"", "void cv::Mat::locateROI(cv::Size&, cv::Point&) const", "\"passwordTooShort\" : \"\u041d\u043e\u0432\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0437\u0430\u043d\u0430\u0434\u0442\u043e \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439. \u041f\u0430\u0440\u043e\u043b\u044c \u043c\u0430\u0454 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043d\u0435 \u043c\u0435\u043d\u0448\u0435 \u043d\u0456\u0436 %1$d \u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0432\"", "OWOVQSTNULVIVGUFSGRIQMPTPZQ[R[TZUYWV", "I\\VNTMRMONMQLTLWMYNZP[R[UZWWXTXQWOSJRHRFSEUEWFYH RMPNNQMTMXNZ R[TZVWWTWPVNTKSISGTFVFYH", " [@W:[", "rhs.data == 0 || (rhs.type() == type && rhs.rows == m)", "long long", "top-left", "rows == mat->cols", "\"mtrl_picker_range_header_only_start_selected\" : \"%1$s \u2013 End date\"", "I\\MRORSQVOXMYKYHXFVFUGTISNRSQVPXNZL[J[IZIXJWLWNXQZT[V[YZ[X", "void cv::calcHist(const cv::Mat*, int, const int*, const cv::Mat&, cv::SparseMat&, int, const int*, const float**, bool, bool, bool)", "NULL <sizes> pointer", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = float; VecOp = cv::RowNoVec]", "NVRFRM", "void cv::bilateralFilter_32f(const cv::Mat&, cv::Mat&, int, double, double, int)", "\"i_understand\" : \"I realize\"", "\"choose_key\" : \"\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u043b\u044e\u0447\"", "!fixedType() || ((Mat*)obj)->type() == mtype", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L \\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ [KXVXWYX[X\\W]U \\KYVYWZX IOZO", "\"fingerprint_acquired_imager_dirty\" : \"\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u0435 \u0441\u043a\u0430\u043d\u0435\u0440 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443\"", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "rsz == dims*2 || (rsz == 0 && images.depth(0) == CV_8U)", "KYNOUX OOVX VONX LOQO TOXO LXPX SXXX", "H\\LMV[ MMW[ NMX[ WNMZ JMQM TMZM J[P[ S[Z[ KMMN PMNN UMWN YMWN MZK[ MZO[ VZT[ WZY[", "KYMPMV MSNQOPPPQQRSRV RSSQTPUPVQWSWV", "-.Inf", "void cvCopyHist(const CvHistogram*, CvHistogram**)", "The hull matrix size might be not enough to fit the hull", "Only curves with integer coordinates are supported in case of contour slice", "unrecognized or unsupported array type", "font != 0 && hscale > 0 && vscale > 0 && thickness >= 0", "Insufficient memory", "\"codeFromSms\" : \"\u041a\u043e\u0434 \u0438\u0437 SMS\"", "void cv::accumulate(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "0 <= coi && coi < dst.channels() && src.channels() == 1", "void icvDistanceATS_L1_8u(const CvMat*, CvMat*)", "E_RIQJRKSJRI IR[R RYQZR[SZRY", "MWQFRGSISKRLQKRJ", "i>=0 && i<(int)vtcs.size()", "K[YOQOOPNQMSMUNWPXRXTWUVVTVRUPYP QOOQNSNVPX RXTVUTUQSO", "I\\RFOGMILLLMMPORRSSSVRXPYMYLXIVGSFRF RSR[ SSS[ NWWW", "\"common_google_play_services_notification_channel_name\" : \"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0456\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0456\u0441\u0456\u0432 Google Play\"", "void cvSVD(CvArr*, CvArr*, CvArr*, CvArr*, int)", "%s: __pos (which is %zu) > this->size() (which is %zu)", "uchar* cvPtr1D(const CvArr*, int, int*)", "PYTHON", "void llcv_canny7_precomputed_sobel(IplImage *, IplImage *, IplImage *, IplImage *, double, double)", "\"change_password\" : \"Change password\"", "\"fab_transformation_scrim_behavior\" : \"com.google.android.material.transformation.FabTransformationScrimBehavior\"", "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_15MorphColumnIVecINS_7VMin16sEEEEE", "\"fingerprint_hint\" : \"Touch sensor\"", "\"pref_syncConnectionType\" : \"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\"", "MWONQMSMUNUPTROVUV", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = unsigned char; uchar = unsigned char]", "E^MFMLLTKXJZI[H[GZGYHXIYHZ XFX[ YFY[ JF\\F U[\\[", "void cv::dct(cv::InputArray, cv::OutputArray, int)", "Expected CvMatND", "CvTermCriteria cvCheckTermCriteria(CvTermCriteria, double, int)", "i1 >= 0 && j < ndsts && dst[j].depth() == depth", "H\\LMMNNPT_VaXbZb[a NOOPU_V` INJMLMNNPPV_WaXb VSXPYMZMYOVSN\\K`JbKbL_N\\", "St15numpunct_bynameIwE", "Bad CvMatND header", "H]SFQGOIMLLNKRKVLYMZO[Q[TZVXXUYSZOZKYHXGWGUHSJQNPSPV QGOJMNLRLVMYO[", "JZJVLSNRPRQSQZR[U[XYZV WSVRTRSSOZN[L[KZ", "(icvFitLine2D( (CvPoint2D32f*)points, ptseq->total, dist, (float)param, (float)reps, (float)aeps, line )) >= 0", "I[MTXTXQWOVNTMQMONMPLSLUMXOZQ[T[VZXX MSWSWQVOTNQNOONPMSMUNXOYQZTZVYWWXX", "J[XPWNTMQMNNMPNRPSUUWV VUWWWXVZ WYTZQZNY OZNXMX XPWPVN WOTNQNNO ONNPOR NQPRUTWUXWXXWZT[Q[NZMX", "N2cv18ResizeArea_InvokerItfEE", "\"abc_searchview_description_search\" : \"\u041f\u043e\u0448\u0443\u043a\"", "%YAML:", "LC_CTYPE", "F^JFJ[ KKK[J[ KKR[ JFRX ZFRX YKR[ YKY[Z[ ZFZ[", "virtual int EmptyDeviceInfoFuncTable::multiProcessorCount(int) const", "\"back\" : \"\u041d\u0430\u0437\u0430\u0434\"", "mask.size == src1.size", "m.dims >= 2", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "J[PFNGOIQJ PFOGOI UFWGVITJ UFVGVI QJOKNLMNMQNSOTQUTUVTWSXQXNWLVKTJQJ RUR[ SUS[ NXWX", "\"common_google_play_services_wear_update_text\" : \"\u0412\u0435\u0440\u0441\u0438\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 Google\u00a0Play \u0443\u0441\u0442\u0430\u0440\u0435\u043b\u0430. \u041e\u043d\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f.\"", "Bad parameter of type CvPoint", "H\\KFKL KJLHNFPFUIWIXHYF LHNGPGUI YFYIXLTQSSRVR[ XLSQRSQVQ[", "H\\KFX[Y[ KFLFY[ YFXFK[ YFL[K[", "void cv::line(cv::Mat&, cv::Point, cv::Point, const Scalar&, int, int, int)", "\"uppercase_letters\" : \"\u2022 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435\"", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "const int* cv::getFontData(int)", "\"pushChangeFromSmsConfirmationMessage\" : \"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043e\u0434\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0432 PUSH-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 (\u0432\u043c\u0435\u0441\u0442\u043e SMS) \u043d\u0430 \u044d\u0442\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e. \u042d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043a\u043e\u0434\u043e\u0432 PUSH-\u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f\u043c\u0438?\"", "The object does not have write function", "JYPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR JXOX", "void cv::Mat::create(int, const int*, int)", "G]LFL[ MFM[ IFUFXGYHZJZLYNXOUPMP UFWGXHYJYLXNWOUP I[P[ RPTQURXYYZZZ[Y TQUSWZX[Z[[Y[X", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short int; uchar = unsigned char]", "\"selectDateRange\" : \"Select dates\"", "char* icvGetFormat(const CvSeq*, const char*, CvAttrList*, int, char*)", "\"connectCertFingerprintDescription\" : \"\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s, %2$s\"", "The matrix has NULL data pointer", "E[EPFRHTJUMVQVUUXSZP[NZLWLSMQNNPLSKVKYL\\M^", "Null pointer to the written object", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_12MorphRowIVecINS_7VMax16sEEEEE", "KXOOOX POPX PRQPSOUOVPVQUQUPVP MOPO MXRX", "this->ksize == 3", "\"HOST\" : \"uaapifcpit.intranet\"", "E_YIK[ IO[O IU[U", "decimal32", "mat.rows == mat.cols && (type == CV_32F || type == CV_64F)", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin8u; uchar = unsigned char]", "G[MJSV KPSL G\\[\\[RG\\", "\"no\" : \"No\"", "\"password_force_change_message\" : \"\u0421\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0441\u044f. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c\"", "N2cv9FormatterE", "cv::gpu::GpuMat::GpuMat(const cv::gpu::GpuMat&, cv::Range, cv::Range)", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "St21__ctype_abstract_baseIwE", "\"changeGcmYes\" : \"\u0422\u0430\u043a, \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0442\u0438 \u043d\u0430 \u0446\u0435\u0439\"", "void cv::transpose(cv::InputArray, cv::OutputArray)", "Unknown/unsupported norm type", "The output header should be CvMatND", "H\\YMXOVQNWLYK[ XOOOMPLR VORNONNO VORMOMMOLR LYUYWXXV NYRZUZVY NYR[U[WYXV", "\"fcm_fallback_notification_channel_label\" : \"\u0414\u0440\u0443\u0433\u043e\u0435\"", "M\\MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "\"fingerprint_error_no_space\" : \"Fingerprint can't be stored. Please remove an existing fingerprint.\"", "NUSMQSQURVSV PPTP", "\"withdrawalCardConfirmed\" : \"\u00ab%1$s\u00bb c\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441 \u043a\u0430\u0440\u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043e %2$s\"", "\"disable_fingerprint\" : \"\u0412\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 Fingerprint\"", "module != 0 && module->name != 0 && module->version != 0", "\"yes\" : \"\u0414\u0430\"", "KYK^YF", "All the sequence tree nodes should contain \"level\" field", "\"bankName\" : \"OTP Smart\"", "MXOMOSPURVSVUUVSVM", "N2cv17MorphColumnFilterINS_5MinOpItEENS_15MorphColumnIVecINS_7VMin16uEEEEE", "npoints >= 0 && (depth == CV_32S || depth == CV_32F)", "LXRKQLRMSLRK RMRQ RQQSRVSSRQ RVR\\ POONNOOPPOTOUNVOUPTO", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "scn == 2 && depth == CV_8U", "double cvGetReal1D(const CvArr*, int)", "The input image must have 8uC1 type and the output one must have 32fC1 type", "double cv::pointPolygonTest(cv::InputArray, cv::Point2f, bool)", "so it should be set by integer value, ", "*N12_GLOBAL__N_120GHT_Ballard_PosScale6WorkerE", "Tag should start with '<'", "src.dims <= 2", "H\\NJPISFS[ NJNKPJRHR[S[", "CV_MAT_CN(sumType) == CV_MAT_CN(dstType)", "Custom memory allocator is not supported", "typeinfo for ", "VTT for ", "basic_filebuf::underflow invalid byte sequence in file", "\"mtrl_picker_range_header_only_end_selected\" : \"Start date \u2013 %1$s\"", "H\\VJVKWLYLZKZIYGVFRFOGNINLONPOSPPPMQLRKTKWLYMZP[S[VZXXYV", "int cvInitNArrayIterator(int, CvArr**, const CvArr*, CvMatND*, CvNArrayIterator*, int)", "Too long data type specification", "\"selectDateRangeFrom\" : \"From date\u2026\"", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "but the getter was called to get a ", "!fixedType() || ((gpu::GpuMat*)obj)->type() == mtype", "G^XIYLYFXIVGSFQFNGLIKKJNJSKVLXNZQ[S[VZXX QFOGMILKKNKSLVMXOZQ[ XSX[ YSY[ US\\S", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = int]", "Some of required array pointers is NULL", "\"abc_searchview_description_voice\" : \"\u0413\u043e\u043b\u043e\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u0438\u0441\u043a\"", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "\"accountMenu\" : \"Accounts\"", "\"passwordsNotMatch\" : \"The new password and its confirmation do not match!\"", "-+xX0123456789abcdefABCDEF", "\"drawer_close\" : \"Close navigation drawer\"", "void cvGoodFeaturesToTrack(const void*, void*, void*, CvPoint2D32f*, int*, double, double, const void*, int, int, double)", "#x%02x", "G\\TFQGOIMMLPKTJZIb TFRGPINMMPLTKZJb TFVFXGYHYKXMWNTOPO VFXHXKWMVNTO POTPVRWTWWVYUZR[P[NZMYLV POSPURVTVWUYTZR[", "cv::Ptr<cv::BaseColumnFilter> cv::getMorphologyColumnFilter(int, int, int, int)", "\"password_secret_key\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043a \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443\"", "\"uploadCertificate\" : \"Transfer the key to another device\"", "\"logins_dont_match\" : \"\u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u043e\u043b\u0456\u0432 \u00ab%1$s\u00bb \u0442\u0430 \u00ab%2$s\u00bb \u043c\u0430\u044e\u0442\u044c \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u0442\u0438\"", "void cv::mixChannels(const cv::Mat*, size_t, cv::Mat*, size_t, const int*, size_t)", "void cvCopyMakeBorder(const CvArr*, CvArr*, CvPoint, int, CvScalar)", "The destination matrix data type is inappropriate, see the manual", "\"enterPairingCodeDescription\" : \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432\u0430\u0448\u0435\u0433\u043e web-\u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c. \u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u043f\u043e\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u043a\u043b\u044e\u0447\u0435\u0439 \u0438\u0437 web \u0432 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0435\u0442 \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0448\u0430\u0433.\"", "KYNBPDRGTKUPUTTYR]P`Nb", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "opencv-hist", "JZWLMRWX", "\"phoneAsLoginText\" : \"Now you may use the phone number (that you indicated as a contact) to log in the mobile application.\nIf you have any questions, please call %1$s\"", "CN10__cxxabiv117__class_type_infoE", "double cv::contourArea(cv::InputArray, bool)", "complete", "basic_string::replace", "NXOYQXRWSUSSRRQROSNUNXOZQ[S[UZVYXV", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const string&)", "\"photoPayment\" : \"\u0424\u043e\u0442\u043e\u043a\u0430\u0441\u0441\u0430\"", "COI is not supported", "H\\KFMFOGPHQJWXXZY[ MFOHPJVXWZY[Z[ RMJ[ RMK[", "Wrong argument type in the setter", "void cv::Mat::convertTo(cv::OutputArray, int, double, double) const", "edgeOrg(e) == edgeOrg(o_prev)", "void cv::convexHull(cv::InputArray, cv::OutputArray, bool, bool)", "KZMVNXQXMRMONMOLQKTKVLWMXOXRTXWXXV OUNRNOOMQK TKVMWOWRVU NWPW UWWW", "G]TFN[ UFO[ VFP[ MFKL ]F\\L MF]F K[S[ NFKL PFLI RFMG YF\\G ZF\\H [F\\I \\F\\L OZL[ OYM[ PYQ[ OZR[", "KYKVKNYVYN", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "void cv::read(const cv::FileNode&, cv::Mat&, const cv::Mat&)", "F]OFI[ PFJ[ ]FLS SOW[ ROV[ LFSF YF_F F[M[ S[Y[", "N2cv9ColumnSumIiiEE", "schar* cvSeqSearch(CvSeq*, const void*, CvCmpFunc, int, int*, void*)", "MWONQMSMUNUPSQ RQSQURUUSVQVOU", "\"fingerprint_error_timeout\" : \"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "OpenGL API call", "vertex_count", "RURUTTURTPRO", "\"deposit\" : \"Deposits\"", "\"serialNumber\" : \"\u0421\u0435\u0440\u0438\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440\"", "CvMemStorage* cvCreateChildMemStorage(CvMemStorage*)", "The total number of matrix elements is not divisible by the new number of rows", "src.type() == dst.type()", "\"phoneAsLoginTitle\" : \"Attention!\"", "St13basic_filebufIwSt11char_traitsIwEE", "G^QHRFR[ THSFS[ JHKFKMLPNRQSRS MHLFLNMQ [HZFZMYPWRTSSS XHYFYNXQ NWWW", "Graph edges should start with 2 integers and a float", "\"common_signin_button_text\" : \"Sign in\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/persistence.cpp", "op == MORPH_ERODE || op == MORPH_DILATE", "I[NKMX OKNV TKMX TKSX UKTV ZKSX LKQK XK\\K", "type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2)", "src2.type() == CV_64F && (src2.rows == 4 || src2.rows == 1)", "double GMM::operator()(int, cv::Vec3d) const", "void icvDeleteNode(CvSparseMat*, const int*, unsigned int*)", "\"full_screen\" : \"\u041d\u0430 \u0432\u0435\u0441\u044c \u0435\u043a\u0440\u0430\u043d\"", "\"map_api_key\" : \"YOUR_RELEASE_MAPS_API_KEY\"", "Convex hull must represented as a sequence of indices or sequence of pointers", "\"ok\" : \"\u041e\u043a\"", "\"pushRegistrationConfirmationMessage\" : \"Do you want to receive notifications from OTP Smart to this device?\"", "St7collateIcE", "\"phoneAsLoginText\" : \"\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0445\u043e\u0434 \u0432 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u044c \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0412\u044b \u0443\u043a\u0430\u0437\u0430\u043b\u0438, \u043a\u0430\u043a \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439.\n\u041f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043f\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0443 %1$s\"", "\"search_amount\" : \"\u041f\u043e\u0448\u0443\u043a \u0437\u0430 \u0441\u0443\u043c\u043e\u044e\"", "ssize.area() > 0", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "src.channels() == 1 && func != 0", "void cv::calcCovarMatrix(cv::InputArray, cv::OutputArray, cv::InputOutputArray, int, int)", "void {anonymous}::GHT_Guil_Full::calcPosition(double, int, double, int)", "mean.data && eigenvectors.data && ((mean.rows == 1 && eigenvectors.rows == data.cols) || (mean.cols == 1 && eigenvectors.rows == data.rows))", "\"card\" : \"\u041a\u0430\u0440\u0442\u044b\"", "St8ios_base", "WKC9U", "\"withdrawalCardConfirmed\" : \"\u00ab%1$s\u00bb withdrawal from the card is confirmed %2$s\"", "\"mtrl_picker_announce_current_selection\" : \"Current selection: %1$s\"", "I\\KKKILGMFOFPGQIRMR[ KIMGOGQI ZKZIYGXFVFUGTISMS[ ZIXGVGTI O[V[", "St13messages_base", "void cvAvgSdv(const CvArr*, CvScalar*, CvScalar*, const void*)", "void cvChangeSeqBlock(void*, int)", "When the input arrays in add/subtract/multiply/divide functions have different types, the output array type must be explicitly specified", "\"common_google_play_services_notification_ticker\" : \"\u041f\u043e\u043c\u0438\u043b\u043a\u0430 \u0441\u0435\u0440\u0432\u0456\u0441\u0456\u0432 Google Play\"", "\"zxing_msg_camera_framework_bug\" : \"\u041d\u0430\u0436\u0430\u043b\u044c, \u0432\u0438\u043d\u0438\u043a\u043b\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0430 \u043a\u0430\u043c\u0435\u0440\u0438. \u041c\u043e\u0436\u043b\u0438\u0432\u043e, \u0432\u0430\u043c \u0437\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439.\"", "void cv::adaptiveBilateralFilter_8u(const cv::Mat&, cv::Mat&, cv::Size, double, double, cv::Point, int)", "void cvWriteString(CvFileStorage*, const char*, const char*, int)", "\"connection\" : \"Connection\"", "idx.isContinuous()", "N2cv15ThresholdRunnerE", "G^XIYFYLXIVGTFQFNGLIKKJNJSKVLXNZQ[T[VZXZY[YS MILKKNKSLVMX QFOGMJLNLSMWOZQ[ XTXY WSWYVZ TS\\S USWT VSWU ZSYU [SYT", "MXRFR[S[ RFSFS[ OMVMVN OMONVN", "Maximal size of inner buffers.", "NULL pointer to line parameters", "G]MFQPN[ NFRPO[ OFSPP[ \\GSP KFRF YF_F K[S[ LFNG PFOH QFNG ZF\\G ^F\\G OZL[ OYM[ PYQ[ OZR[", "non-positive or too large number of dimensions", "F]UFOb VFNb GQHOJMMMNNNPMUMXOZRZTYWVYS LMMNMPLULXMZO[R[TZVXXUYS[M", "@cAQBODMFMGNHPHSF[ GNGSE[ GPFTD[F[ HSJPLNNMPMRNSPSSQ[ RNRSP[ RPQTO[Q[ SSUPWNYM[M]N^P^S\\X ]N]R\\V\\Z ]P[U[X\\Z][_[aYbW", "G]KMKb LNLa MMMb VMVXWZX[Z[[Z\\X WNWXXZY[ XMXXYZZ[ MXNZP[R[TZUYVW KMMM VMXM KbMb", "\"refuse_password_message\" : \"\u0412\u0456\u0434\u043c\u043e\u0432\u043b\u044f\u044e\u0447\u0438\u0441\u044c \u0432\u0456\u0434 \u0437\u043c\u0456\u043d\u0438 \u043f\u0430\u0440\u043e\u043b\u044f, \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447 \u043f\u0440\u0438\u0439\u043c\u0430\u0454 \u043d\u0430 \u0441\u0435\u0431\u0435 \u0440\u0438\u0437\u0438\u043a\u0438, \u043f\u043e\u0432\u2019\u044f\u0437\u0430\u043d\u0456 \u0437 \u0439\u043e\u0433\u043e \u0439\u043c\u043e\u0432\u0456\u0440\u043d\u043e\u044e \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0435\u0442\u0430\u0446\u0456\u0454\u044e \u0442\u0430 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0443\u0454, \u0449\u043e \u0431\u0430\u043d\u043a \u043d\u0435 \u0431\u0443\u0434\u0435 \u043d\u0435\u0441\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u043b\u044c\u043d\u0456\u0441\u0442\u044c \u0437\u0430 \u0431\u0443\u0434\u044c-\u044f\u043a\u0456 \u043f\u0440\u044f\u043c\u0456 \u0447\u0438 \u043e\u043f\u043e\u0441\u0435\u0440\u0435\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0437\u0431\u0438\u0442\u043a\u0438, \u044f\u043a\u0456 \u0454 \u043d\u0430\u0441\u043b\u0456\u0434\u043a\u043e\u043c \u0447\u0438 \u044f\u043a\u0438\u043c-\u043d\u0435\u0431\u0443\u0434\u044c \u0447\u0438\u043d\u043e\u043c \u043f\u043e\u0432\u2019\u044f\u0437\u0430\u043d\u0456 \u0437 \u0456\u043c\u043e\u0432\u0456\u0440\u043d\u043e\u044e \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0435\u0442\u0430\u0446\u0456\u0454\u044e \u043f\u0430\u0440\u043e\u043b\u044f.\"", "Duplicated edge has occured", "G]ZFH[ [FI[ \\FJ[ \\FNFLL H[V[XU OFLL PFMI RFNG R[VZ T[WX U[XU", "Memory block has been corrupted", "Invalid matrix initializer type", "\"lowercase_letters\" : \"\u2022 \u043b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0456 \u043b\u0456\u0442\u0435\u0440\u0438 \u0443 \u043d\u0438\u0436\u043d\u044c\u043e\u043c\u0443 \u0440\u0435\u0433\u0456\u0441\u0442\u0440\u0456\"", "\"decide_later\" : \"\u0412\u0438\u0440\u0456\u0448\u0443 \u043f\u0456\u0437\u043d\u0456\u0448\u0435\"", "opencv-sparse-matrix", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "The arrays must have equal number of columns (which is number of dimensions but 1)", "\"rao_pass_length_from\" : \"From %1$d to %2$d characters\"", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhEEEE", "void icvSetOpenGlFuncTab(const CvOpenGlFuncTab*)", "\"common_google_play_services_unknown_issue\" : \"%1$s is having trouble with Google Play services. Please try again.\"", "F^JIZRJ[", "\"loadCertificate\" : \"Transfer key via web client\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/grabcut.cpp", "void cv::minEnclosingCircle(cv::InputArray, cv::Point2f&, float&)", "\"masterpass_info_text\" : \"Masterpass is a digital wallet provided by MasterCard. It stores all the data about your payment cards and makes online shopping to be safe and easy. \n\nWhen you pay with Masterpass, online stores and other services do not gain an access to your card's secret data: validity period or CVV code. \n\nTo find out where you can pay using the Masterpass Digital Wallet, please go to MasterCard website.\"", "!nestedAlgo.empty()", "KYOKPX PKQV YKPX MKRK VK[K", "void cv::approxPolyDP(cv::InputArray, cv::OutputArray, double, bool)", "cv::gpu::GpuMat cv::gpu::GpuMat::reshape(int, int) const", "PURPRQSQSPRP SVRVRUSUSWRY", "St14basic_iostreamIwSt11char_traitsIwEE", "templDy.type() == templDx.type() && templDy.size() == templSize", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "topEdge", "LWTSSQQPOQNSOUQVSUTS VMTSTUUVVV", "{parm#", "H\\WQVOUNSMQMNNLPKSKULXNZQ[S[VZWYXWYSYNXJWHVGSFQFNGMHNHOGQF MPLRLVMX VYWWXSXNWJVH QMONNOMRMVNYOZQ[ S[UZVXWTWMVIUGSF", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "F^RJR[ JJZJ JRZR", "so it should be get as integer value, ", "vertex_dt", "H\\XMWPURRSQSNRLPKMKLLINGQFRFUGWIXMXRWWUZR[P[MZLX", "decltype (", "GeneralizedHough.POSITION_SCALE_ROTATION", "F_GLJIMLMX IJLMLX MLPISLSX OJRMRX SLVIYLYW[Y UJXMXXZZ]W", "void cvCmp(const void*, const void*, void*, int)", "G]KFK[ KFY[ YFY[", "\"fingerprint_not_recognized\" : \"Not recognized\"", "\"confirmationCode\" : \"\u041a\u043e\u0434 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f\"", "void cv::polarToCart(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "LXTLSLSMTMTLSKQKPLPNQPTRUS PNQOTQUSUUSW QPOROTPVSXTY OTPUSWTYT[S\\Q\\P[PZQZQ[P[", "KYWOWPVQNVMWMX NQOOROUQ OPRPUQVQ NVOVRWUW OVRXUXVV", "cv::SymmColumnVec_32s8u::SymmColumnVec_32s8u(const cv::Mat&, int, int, double)", "virtual bool EmptyDeviceInfoFuncTable::hasEqualOrGreater(int, int) const", "void cv::sorted_vector<_KeyTp, _ValueTp>::add(const _KeyTp&, const _ValueTp&) [with _KeyTp = std::basic_string<char>; _ValueTp = cv::Algorithm* (*)()]", "vfpv3", "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == CV_8U", "JXKRLPMOOOPPPROUOWPX NOOPORNUNWPXQXSWUUVRVOUOVP", "src.type() == CV_8UC1 || src.type() == CV_32FC1", "\"search\" : \"\u041f\u043e\u0448\u0443\u043a\"", "JZWNUMRMPNNPMSMVNYOZQ[T[VZ MTUT", "JZMMMSNUOVQWSWUVVUWSWM", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "I\\RBR_S_ RBSBS_ WIYIWGTFQFNGLILKMMNNVRWSXUXWWYTZQZOYNX WIVHTGQGNHMIMKNMVQXSYUYWXYWZT[Q[NZLXNX XXUZ", "src.size() == idx.size() && idx.type() == CV_32S && src.data != idx.data", "\"change_login\" : \"\u0417\u043c\u0456\u043d\u0430 \u043b\u043e\u0433\u0456\u043d\u0430\"", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "\"fingerprint_acquired_partial\" : \"Partial fingerprint detected. Please try again.\"", "cv::Point2d cv::weightedCentroid(cv::InputArray, cv::Point, cv::Size, double*)", "\"generate_cert_text_step_3\" : \"\u0414\u043b\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u044e\u0447\u0430 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u0434 \u0438\u0437 SMS\"", "14EmptyFuncTable", "KYO@RCTFUIULTOQVPYP\\Q_Ra RCSETHTKSNPUOXO[P^RaUd", "I[LSXSXQWOVNTMQMONMPLSLUMXOZQ[T[VZXX", "Bad or unsupported metric type", "St13basic_ostreamIwSt11char_traitsIwEE", " volatile", "\"days_2_4\" : \"\u0434\u043d\u0456\"", "\"map_service\" : \"Bank branches\"", "scaleThresh > 0", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/convhull.cpp", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "\"pinSetupChangeCodeDescPart3\" : \"\u042f\u043a\u0449\u043e \u0432\u0438 \u0454 \u0443\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0447\u0435\u043c \u043a\u0430\u0440\u0442\u043a\u0438 \u0437 \u0447\u0456\u043f\u043e\u043c, \u0434\u043b\u044f \u043a\u043e\u0440\u0435\u043a\u0442\u043d\u043e\u0457 \u0440\u043e\u0431\u043e\u0442\u0438 \u043d\u043e\u0432\u043e\u0433\u043e PIN-\u043a\u043e\u0434\u0443 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e, \u0449\u043e\u0431 \u043f\u0435\u0440\u0448\u043e\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0454\u044e \u043f\u0456\u0441\u043b\u044f \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f/\u0437\u043c\u0456\u043d\u0438 PIN-\u043a\u043e\u0434\u0443 \u0431\u0443\u043b\u043e \u0437\u043d\u044f\u0442\u0442\u044f \u0433\u043e\u0442\u0456\u0432\u043a\u0438 \u0430\u0431\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0443 \u0432 \u0431\u0430\u043d\u043a\u043e\u043c\u0430\u0442\u0456 \u041e\u0422\u041f \u0411\u0430\u043d\u043a\u0443 \u0430\u0431\u043e \u0431\u0430\u043d\u043a\u043e\u043c\u0430\u0442\u0430\u0445 \u0456\u043d\u0448\u0438\u0445 \u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u0431\u0430\u043d\u043a\u0456\u0432 \u0423\u043a\u0440\u0430\u0457\u043d\u0438.\"", "\"certNotExistInOperationsGenerate\" : \"\u0423 \u0432\u0430\u0441 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456\u0439 \u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u0415\u0426\u041f. \u041e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u0431\u0435\u0437 \u043f\u0456\u0434\u043f\u0438\u0441\u0443 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0437\u044f\u0442\u0456 \u0434\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f. \u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438/\u0437\u0433\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u043a\u043b\u044e\u0447 \u0432\u043d\u0443\u0442\u0440\u0456\u0448\u043d\u044c\u043e\u0431\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u0426\u0421\u041a \u0430\u0431\u043e \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u043a\u043b\u044e\u0447 \u0437\u043e\u0432\u043d\u0456\u0448\u043d\u044c\u043e\u0433\u043e \u0426\u0421\u041a\"", "\"clear\" : \"\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u044c\"", "void cvRestoreMemStoragePos(CvMemStorage*, CvMemStoragePos*)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/undistort.cpp", "(unsigned)labels[i] < (unsigned)K", "\"bankIdConnectionError\" : \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0438\u0441\u0442\u0435\u043c\u0435 BankID \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043f\u043e\u0437\u0436\u0435 \u0438\u043b\u0438 \u0441\u0432\u044f\u0436\u0438\u0442\u0435\u0441\u044c, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441 \u043a\u043e\u043d\u0442\u0430\u043a\u0442-\u0446\u0435\u043d\u0442\u0440\u043e\u043c.\"", "MXVFUFTGRT VGUGRT VGVHRT VFWGWHRT PXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "basic_istream", "NULL structure pointer", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "The hull matrix must have the same type as input or 32sC1 (integers)", "JZNFNX VLV^ NNVL NOVM NWVU NXVV", "int cvSolveCubic(const CvMat*, CvMat*)", "G]KFKULXNZQ[S[VZXXYUYF KFLFLUMXNYQZSZVYWXXUXFYF", "F^KFK[ LFL[ XFX[ YFY[ HF\\F H[O[ U[\\[", "The source image must be 8-bit single-channel (CV_8UC1)", "F_\\MZMXNWPUVTXSYQZMZKYJWJUKSLRQOSMTKTISGQFPFNGMIMKNNPQUWXZZ[\\[ \\M\\NZNWP ZMXPVVUXSZQ[M[KZJYIWIUJSLQQNRMSKSIRG SHQGPGNH OGNINKONQQVWXYZZ\\Z\\[", "locale::facet::_S_create_c_locale name not valid", "focusScore", "\"changeCurrentPasswordLabel\" : \"\u0414\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c:\"", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM QNOONPMSMUNXOYQZTZVYWXXUXSWPVOTNQN", "N2cv9ColumnSumIitEE", "\"enter_card_no\" : \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u044b\"", "const void* cv::initInterTab2D(int, bool)", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[", "LXNKOMQNSNUMVK NKONQOSOUNVK", "\"owner\" : \"Owner\"", "I[PFNM QFNM YFWM ZFWM", "\"masterpass_success_path_1\" : \"We have sent you an SMS with a password to your Masterpass wallet. Use it to enter your personal account at\"", "H\\KFLHNJQKSKVJXHYF KFLINKQLSLVKXIYF", "KYOBOb UBUb", "N2cv9ColumnSumIdsEE", "\"pref_syncConnectionType\" : \"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\"", "N2cv8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEE", "cv::Mat::Mat(const cv::Mat&, const cv::Range*)", "H\\NIMKMMNOPPSPVOXN[K\\H\\G[FZFXGWHVJUMSTRWPZN[ VJUNTUSXQZN[K[IZHXHWIVJWIX", "Invalid histogram header", "\"fingerprints\" : \"\u0412\u0456\u0434\u0431\u0438\u0442\u043a\u0438:\"", "\"selectKeyTitle\" : \"\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\"", "){O)I*E+@-;073370;-@+E*I)O)U*[+_-d0i3m7q;t@wEyIzO{U{[z_ydwitmqqmtiwdy_z[{U{OzIyEw@t;q7m3i0d-_+[*U)O)", "npoints > 0", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<double, double, float>; VResize = cv::VResizeCubic<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "KZWLXLYKXNWLUKRKPLOMOOPPUSVT ONPOURVSVVUWSXPXNWMULXMWNW", "\"pushChangeFromSmsConfirmationMessage\" : \"You can receive confirmation codes in PUSH messages (instead of SMS) to this device. It is fast and safe. Enable code forwarding by PUSH notifications?\"", "Multi-line text literals are not supported", "void cv::initInterTab1D(int, float*, int)", "\"SERVICE_PHONE_NUMBER\" : \"5595\"", "void cvMerge(const void*, const void*, const void*, const void*, void*)", "\"yesAndTerminate\" : \"\u0414\u0430, \u043f\u0440\u0435\u0440\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\"", "N2cv17MatOp_InitializerE", "N2cv14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEE", "sumCount == ksize-1", "void icvGoNextMemBlock(CvMemStorage*)", "\"dataToTransferedList\" : \"\u2022 \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u043e\u043b\n\n\u2022 \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f\n\n\u2022 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440\n\n\u2022 \u0430\u0434\u0440\u0435\u0441\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n\n\u2022 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430\n\n\u2022 e-mail \u0430\u0434\u0440\u0435\u0441\"", "\"cancel\" : \"Cancel\"", "\"atms\" : \"\u0411\u0430\u043d\u043a\u043e\u043c\u0430\u0442\u044b\"", "\"disconnectCertFingerprintDescription\" : \"Disabling Fingerprint for key %1$s, %2$s\"", "This method is not implemented for oclMat yet", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[", "void cvInitFont(CvFont*, int, double, double, double, int, int)", "St15basic_streambufIwSt11char_traitsIwEE", "F^ZIJRZ[ ZIZJLRZZZ[", "Input curves have uknown type", "CPU implementer", "The written string is too long", "I[J[Z[ZZJZJ[", "lowerBound.size == upperBound.size && lowerBound.isContinuous() && upperBound.isContinuous() && lowerBound.type() == upperBound.type() && lowerBound.type() == CV_32F && lowerBound.total() == (size_t)ptdims", "H\\VNVb WOWa UNWNXMXb VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ Sb[b VaTb V`Ub X`Yb XaZb", "cv::GlBuffer::GlBuffer(cv::Size, int, cv::GlBuffer::Usage)", "temp.ptr<Point2f>() == dst", "Only one of \"header_user_data\", \"rect\" and \"origin\" tags may occur", "23EqualizeHistLut_Invoker", "F^GRHPIOKOLPLQJX JOKPKQIX LQMPOOQOSPSQQX QORPRQPX SQTPVOXOZPZRYUYWZX XOYPYRXUXWYX[X\\W]U", "Invalid histogram pointer[s]", "H\\KFYFO[ KFKGXG XFN[O[", "LXRLNWXPLPVWRL RRRL RRLP RRNW RRVW RRXP", "void cvClearMemStorage(CvMemStorage*)", "void cvReleaseData(CvArr*)", "unsigned long", "The vertex is not found", "G^LML[ MNMZ IMNMN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JMLN KMLO LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "AcFMF[ GNGZ CMHMH[ HQIOJNLMOMQNROSRS[ QORRRZ OMPNQQQ[ SQTOUNWMZM\\N]O^R^[ \\O]R]Z ZM[N\\Q\\[ C[K[ N[V[ Y[a[ DMFN EMFO FZD[ FYE[ HYI[ HZJ[ QZO[ QYP[ SYT[ SZU[ \\ZZ[ \\Y[[ ^Y_[ ^Z`[", "\"changeGcmNo\" : \"\u041d\u0435\u0442, \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u043a\u0430\u043a \u0435\u0441\u0442\u044c\"", "\"currentDirectory\" : \"\u041f\u043e\u0442\u043e\u0447\u043d\u0430 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0456\u044f\"", "N2cv9RowFilterIhiNS_8RowNoVecEEE", "KZPKTX QKUX YKLX NKSK VK[K JXOX RXWX", "\"outbox\" : \"\u0412\u0456\u0434\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0456\"", "double cvArcLength(const void*, CvSlice, int)", "H[YUWUUTTSRPQOONNNLOKQKRLTNUOUQTRSTPUOWNYN", "void cvFlushSeqWriter(CvSeqWriter*)", "\"mustUpdateToNewVersion\" : \"\u0414\u043b\u044f \u043a\u043e\u0440\u0435\u043a\u0442\u043d\u043e\u0457 \u0440\u043e\u0431\u043e\u0442\u0438 OTP Smart \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u043e\u043d\u043e\u0432\u0438\u0442\u0438 \u0434\u043e\u0434\u0430\u0442\u043e\u043a \u0434\u043e \u043e\u0441\u0442\u0430\u043d\u043d\u044c\u043e\u0457 \u0432\u0435\u0440\u0441\u0456\u0457.\"", "\"fingerprint_description\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u0430 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u043e\u043c \u043f\u0430\u043b\u044c\u0446\u0430\"", "CV_MAT_CN(sumType) == CV_MAT_CN(srcType)", "H\\RFKZ QIW[ RIX[ RFY[ I[O[ T[[[ KZJ[ KZM[ WZU[ WYV[ XYZ[", " hole", "JZWOVNTMQMONOPPRSS SSOTMVMXNZP[S[UZWX", "\"exitTitle\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0432\u0438\u0445\u043e\u0434\u0443\"", "\"generate_cert_text_step_5_require_otp\" : \"\u041a\u043b\u044e\u0447 \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u0437\u0433\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u0439, \u0437\u0430\u043f\u0438\u0442 \u043d\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0456\u044e \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u0430 \u0432\u0456\u0434\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0434\u043e \u0431\u0430\u043d\u043a\u0443. \u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0456\u0457 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u0430 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0440\u043e\u0437\u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438 \u0444\u043e\u0440\u043c\u0443 \u0437\u0430\u043f\u0438\u0442\u0443, \u043f\u0456\u0434\u043f\u0438\u0441\u0430\u0442\u0438 \u0457\u0457 \u0442\u0430 \u0437\u0432\u0435\u0440\u043d\u0443\u0442\u0438\u0441\u044f \u0434\u043e \u0432\u0456\u0434\u0434\u0456\u043b\u0435\u043d\u043d\u044f \u0431\u0430\u043d\u043a\u0443.\n\n\u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e\u0441\u0442\u0456 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0456\u043d\u0448\u0456 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0446\u0456\u0454\u0457 \u0444\u043e\u0440\u043c\u0438 \u0430\u0431\u043e \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438.\"", "void cv::warpAffine(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "MWQMNV QMUMVNVPUQSRPR", "channels() == CV_MAT_CN(dtype)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, unsigned char>; VecOp = cv::FilterVec_8u; cv::Point = cv::Point_<int>]", "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == CV_8U)", "<hP<K=G?DAAD?G=K<P<T=Y?]A`DcGeKgPhThYg]e`cc`e]gYhThPgKeGcD`A]?Y=T<P<", "basic_iostream", "I[KFRPK[ KFYF K[Y[", "H\\XFK[ YFL[ KFYF KFKGXG LZYZY[ K[Y[", "IZMFM[ WMMW QSX[", "G[GJGLHOIQLTNUQVUVXUZT[S[QZPXOUNQNNOLPISHUGXGZ", "\"yesAndTerminate\" : \"Yes, abort the process\"", "The number of extra layers must be non negative", "\"inside_ukraine\" : \"Within Ukraine in UAH\"", "N2cv12ColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "COI is not supported by the function", "void cvSaveMemStoragePos(const CvMemStorage*, CvMemStoragePos*)", "G]JFQQQ[ KFRQRZ LFSQS[ YGSQ HFOF VF\\F N[V[ IFKG NFLG WFYG [FYG QZO[ QYP[ SYT[ SZU[", "dstm1type == CV_16SC2 || dstm1type == CV_32FC1 || dstm1type == CV_32FC2", "maxSize", "St12future_error", "JYSBTDUGVLVPUUSYQ\\N_Jb SBTEUJUOTTSWQ[N_", "St11range_error", "double cv::Mat::dot(cv::InputArray) const", "LYQKOLNNOPQQTQVPWNVLTKQK QKPLONPPQQ TQUPVNULTK QQORNTNUOWQXTXVWWUWTVRTQ QQPROTOUPWQX TXUWVUVTURTQ", "depth == CV_32F || depth == CV_64F", "I[MFM[ NGN[M[ MFYF NGYGYF NPTPTQ NQTQ", "KYOBVROb", "H]KHRQJ\\ JHQQ JHYHZMXH K[X[ J\\Y\\ZWX\\", "E`VNULSKQKOLNMMOMRNTOUQVSVUUVS OMNONROT QKPLOOORPUQV VKVSWUYVZV\\U]R]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYXYWZ WLWSXU VKXKXSYUZV", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "\"invalidHost\" : \"\u041d\u0435\u0432\u0456\u0440\u043d\u0438\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044f \u0425\u043e\u0441\u0442\"", "F^ISJSLTMVMXLZ ISIRJQLQMRNTNWMYLZ RGPIOLOOQUQXPZR\\ RGTIULUOSUSXTZR\\ [S[RZQXQWRVTVWWYXZ [SZSXTWVWXXZ KVYV", "N10__cxxabiv120__si_class_type_infoE", "\"logins_equals\" : \"\u041d\u043e\u0432\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e\"", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[I[ [F\\FI[ YTWTUUTWTYV[X[ZZ[X[VYT NFJGIKMMPJNF LFIIKMOLPHLF YTUUTYX[[XYT WTTWV[ZZ[VWT", "\"match\" : \"match\"", "The output map must be (W-w+1 x H-h+1), where the input images are (W x H) each and the patch is (w x h)", "cn == CV_MAT_CN(_dstType)", "NULL ranges pointer", "\"exitTitle\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u0430\"", "I[TMVNXPXOWNTMQMNNMOLQLSMUOWSZ QMONNOMQMSNUSZT\\T^S_Q_", "H]ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[S[UZWXXV TFRGPINLMOLSLVMYNZP[", "_kernel.type() == DataType<KT>::type", "float cv::medianPartition(size_t*, int, int, const float*)", "\"common_google_play_services_enable_text\" : \"\u0414\u043e\u0434\u0430\u0442\u043e\u043a %1$s \u043d\u0435 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438\u043c\u0435, \u044f\u043a\u0449\u043e \u043d\u0435 \u0432\u0432\u0456\u043c\u043a\u043d\u0443\u0442\u0438 \u0441\u0435\u0440\u0432\u0456\u0441\u0438 Google Play.\"", "void cv::ogl::Arrays::setVertexArray(cv::InputArray)", "\"certNotAuthorized\" : \"\u0417\u0430\u044f\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u0431\u0443\u0432\u0430\u0454 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0456 \u043e\u0431\u0440\u043e\u0431\u043a\u0438\"", "void cvGetQuadrangleSubPix(const void*, void*, const CvMat*)", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "The image has NULL data pointer", "\"google_api_key\" : \"AIzaSyBSPicEGF3NL1mOp3fF9EBwuX9Z-ibxN2A\"", "dy.type() == dx.type() && dy.size == edges.size", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a `G_H`IaH`G]FZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja ^M\\T[X[Z\\[_[aYbW _M]T\\X\\Z][ DM_M", "void cv::normalize(const cv::SparseMat&, cv::SparseMat&, double, int)", "\"generate_cert_text_step_1_next_button\" : \"Start\"", "void cv::getScharrKernels(cv::OutputArray, cv::OutputArray, int, int, bool, int)", "NULL or empty filename", "\"currentPassword\" : \"\u041f\u043e\u0442\u043e\u0447\u043d\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\"", "Subdiv2D::locate returned invalid location = %d", "\"port\" : \"\u041f\u043e\u0440\u0442\"", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "\"generate_cert_text_step_5\" : \"The key is successfully generated and ready for use on this device.\n\nIf you need to use this key on other devices, transfer it using this form or via app settings\"", "\"certNotExistGenerate\" : \"\u0423 \u0432\u0430\u0441 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456\u0439 \u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u0415\u0426\u041f. \u041f\u0435\u0440\u0435\u043a\u0430\u0437\u0438 \u0431\u0435\u0437 \u043f\u0456\u0434\u043f\u0438\u0441\u0443 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0437\u044f\u0442\u0456 \u0434\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f. \u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438/\u0437\u0433\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u043a\u043b\u044e\u0447 \u0432\u043d\u0443\u0442\u0440\u0456\u0448\u043d\u044c\u043e\u0431\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u0426\u0421\u041a \u0430\u0431\u043e \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u043a\u043b\u044e\u0447 \u0437\u043e\u0432\u043d\u0456\u0448\u043d\u044c\u043e\u0433\u043e \u0426\u0421\u041a\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/distransform.cpp", "0 <= thickness && thickness <= 255", "G]IWHVGTGQHOINKMMMONPOTUUVWWYW[V\\U]S]P\\N[M", "Gpu API call", "MXPXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "\"fingerprint_acquired_insufficient\" : \"\u041d\u0435 \u0432\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u0440\u043e\u0431\u0438\u0442\u0438 \u0432\u0456\u0434\u0431\u0438\u0442\u043e\u043a. \u041f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "\"extract\" : \"\u0412\u044b\u043f\u0438\u0441\u043a\u0430\"", "it.planes[0].isContinuous() && it.planes[1].isContinuous()", "CvFileNode* cvGetRootFileNode(const CvFileStorage*, int)", "unsigned int64", "H\\NJPISFS[ RGR[ N[W[", "Bad type of mask argument", "\"login_not_in_range\" : \"The login should be %1$d to %2$d characters long (Latin symbols, numbers 0\u20139, symbols @ _ ~)\"", "\"invalidPort\" : \"\u041d\u0435\u0432\u0456\u0440\u043d\u0438\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044f \u041f\u043e\u0440\u0442\"", "G]KEJJ ZEYJ ONNS VNUS KWJ\\ ZWY\\ KGYG KHYH OPUP OQUQ KYYY KZYZ", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEE", "non-virtual thunk to ", "\"approveWithSmsMessage\" : \"\u0414\u043b\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u0434 \u0438\u0437 SMS\"", "short", "F^KFKULXNZQ[S[VZXXYUYF LFLUMXOZQ[ HFOF VF\\F", "k == OPENGL_TEXTURE", "src.size() == dst.size() && src.type() == dst.type()", "\"changeScaleWarning\" : \"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 \u0432\u0441\u0442\u0443\u043f\u0438\u0442 \u0432 \u0441\u0438\u043b\u0443 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\"", "St15messages_bynameIcE", "G\\ZHYJWOVRUTSWQYOZL[ SLRNPONOMMMKNIPGSF]F[GZHYKXOVUTXQZL[H[GZGXHWJWLXOZQ[T[WZYX VFZG[G", "H\\NFNHOYO[ OGPX PFQW [GO[ LFSF XF^F MFNH QFPH RFOG YF[G ]F[G", "\"text\" : \"\u0422\u0435\u043a\u0441\u0442 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\"", "\"makePhoto\" : \"\u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u043e\u0442\u043e\"", "Input array is not a sequence nor matrix", "I\\N+R1T5U:U>TBPJPLQNROWRRUQVPXPZTbUfUjToRsNy P.R2S5T:T>SCRF R^SaTfTjSoRrPv", "H\\RUJPRTZPRU", "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", "The matrix can not be converted to point sequence because of inappropriate element type", " __vector(", "double cvCompareHist(const CvHistogram*, const CvHistogram*, int)", "KXVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUU RKPMOONRNVPX", "KZKVMSNQMUGg MUNSPRRRTSUUUWTYSZQ[ MZO[R[UZWYZV", "idivt", "\"contacts\" : \"\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b\"", "\"passwordPatternNotValid\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0446\u0438\u0444\u0440\u044b \u0438 \u0431\u0443\u043a\u0432\u044b \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0438 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0445.\"", "Input contour is neither a valid sequence nor a matrix", "MWOSTSURUQSPRPPQOSPURVTV", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "N2cv9RowFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "User-defined distance is not allowed", "Only 8-bit, 3-channel input images are supported", "void cv::GlCamera::setupModelViewMatrix() const", "H]SFLb YFRb LQZQ KWYW", "src1.type() == window.type()", "CvMat* cvGetMat(const CvArr*, CvMat*, int*, int)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/dynamicuda/include/opencv2/dynamicuda/dynamicuda.hpp", "\"abc_action_menu_overflow_description\" : \"More options\"", "G^ZH[H\\F[L[JZHYGVFRFOGMIMKNMONVRXT MKOMVQWRXTXWWYVZS[O[LZKYJWJUI[JYKY", "\"languageChange\" : \"Language change\"", "F^IOLLPN KMOORLUN QMTOWLYN VMXO[L IULRPT KSOURRUT QSTUWRYT VSXU[R", "\"abc_activitychooserview_choose_application\" : \"Choose an app\"", "\"abc_menu_meta_shortcut_label\" : \"Meta+\"", "\"day_1\" : \"\u0434\u0435\u043d\u044c\"", "iterator != 0", "void cvFilter2D(const CvArr*, CvArr*, const CvMat*, CvPoint)", "whitept[1] == 1.f", "\"create\" : \"Create\"", "Input sequence is not a sequence of points", "CV_IS_IMAGE(arr)", "\"invalidPort\" : \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u043e\u043b\u044f \u041f\u043e\u0440\u0442\"", "(scn == 3 || scn == 4) && depth == CV_8U", "!GHT_Guil_Full_info_auto.name().empty()", "ncorners >= 0 && corners.depth() == CV_32F", "G]]R]P\\MZJWHTGPGMHJJHMGPGR", "image is empty", "\"paymentConfirmed\" : \"Payment is confirmed!\"", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "\"myCards\" : \"\u041c\u043e\u0457 \u043a\u0430\u0440\u0442\u043a\u0438 \u041e\u0422\u041f \u0411\u0430\u043d\u043a\u0443\"", "\"fingerprint_error_timeout\" : \"\u0427\u0430\u0441 \u043e\u0447\u0456\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u0430 \u043c\u0438\u043d\u0443\u0432. \u041f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "k == GPU_MAT", "\"zxing_app_name\" : \"\u0421\u043a\u0430\u043d\u0435\u0440 \u0448\u0442\u0440\u0438\u0445-\u043a\u043e\u0434\u043e\u0432\"", "Invalid destination sequence header", "St14basic_ifstreamIwSt11char_traitsIwEE", "I[X+U1R8P=OANFMNMVN^OcPgRlUsXy U1S6Q<P@OFNNNVO^PdQhSnUs", "G]IL[b", "Incorrect number of arrays", "MXRMQNQORPSPTOTNSMRM RNROSOSNRN RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "N2cv21YUV420p2RGB888InvokerILi0EEE", "Invalid pointer to file storage", "mask.empty() || mask.type() == CV_8UC1", "void cv::Mat::reserve(size_t)", "header_size is negative. Pass 0 to make the destination header_size == input header_size", "virtual bool EmptyDeviceInfoFuncTable::isCompatible(int) const", "F^JIZRJ[ JIJJXRJZJ[", "Bad flag (parameter or structure field)", "H^ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[R[UZWXYT QHOJNLMOLSLWMY VXWWXT TFRGPJOLNOMSMXNZP[ R[TZVWWT TT\\T UTWU VTWW ZTXV [TXU", "\"fingerprint_error_lockout\" : \"\u0417\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0441\u043f\u0440\u043e\u0431. \u0421\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u0456\u0437\u043d\u0456\u0448\u0435.\"", "\"common_google_play_services_unknown_issue\" : \"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \"%1$s\" \u043d\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c Google Play. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "opencv-graph", "MXRFR[ SFS[ OFVF O[V[", "Processor", "KZXHM\\", "int cvKMeans2(const CvArr*, int, CvArr*, CvTermCriteria, int, CvRNG*, int, CvArr*, double*)", "0 <= contourIdx && contourIdx < (int)last", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "data.rows <= evects.rows && dst.cols == data.cols", "\"generate_cert_text_step_5_upload_cert\" : \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\"", "\"workTime\" : \"\u0427\u0430\u0441 \u0440\u043e\u0431\u043e\u0442\u0438\"", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "sequences", "H\\UIU[V[ VFV[ VFKVZV UILV LUZUZV", "void cvGetRawData(const CvArr*, uchar**, int*, CvSize*)", "Incorrect indentation", "J[NONX OOOX ORPPROTOVPWRWX TOUPVRVX LOOO LXQX TXYX", "LZQOPPPQOQOPQOTOVQVWWXXX TOUQUWWX URRSPTOUOWPXSXTWUU RSPUPWQX", "G]PMMNKPJSJUKXMZP[T[WZYXZUZSYPWNTMPM LPKSKULX XXYUYSXP PMNNMOLRLVMYNZP[T[VZWYXVXRWOVNTM QFSb RGRa SFQb QFSF QbSb", "void cvCalcArrBackProject(CvArr**, CvArr*, const CvHistogram*)", "N2cv14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEE", "\"requisitesIbanModeMessage\" : \"\u0421\u0447\u0435\u0442: %1$s\n\u0432 %2$s,\n\u041f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044c: %3$s,\n\u041a\u043e\u0434 \u0415\u0413\u0420\u041f\u041e\u0423 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f: %4$s\"", "cv::ogl::Texture2D& cv::_OutputArray::getOGlTexture2DRef() const", "\"month\" : \"month\"", "\"choosePhotoSource\" : \"Select photo source\"", "D`F^^^^FFFF^", "N2cv9ColumnSumIdtEE", "/data/local/tmp/__opencv_temp.XXXXXX", "\"settingsConnection\" : \"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\"", "COI is not supported by this operation", "PUSVRVRUSUSWRY", "void cv::render(const string&, const cv::Ptr<cv::GlFont>&, cv::Scalar, cv::Point2d)", "\"telegramTitle\" : \"Telegram\"", "MXRFQGRHSGRF RMR[ SMS[ OMSM O[V[", "NULL histogram array pointer", "\"newVersion\" : \"\u041d\u043e\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f OTP Smart\"", "\"userNotLegal\" : \"This user may not sign in with \"OTP Smart\" app, because it is for individuals only. Please, use app for legal clients \"OTP Smart Business\".\"", "(func( src->data.ptr, src_step, src_size, dst->data.ptr, dst_step, dst_size, center )) >= 0", "N2cv11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEE", "H\\WFW[X[ WFXFX[ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "JZPLRITL MORJWO RJR[", "void cvGetModuleInfo(const char*, const char**, const char**)", "Angle difference in degrees between two points in feature.", "\"not_found_services\" : \"\u0414\u043b\u044f \u0440\u043e\u0431\u043e\u0442\u0438 \u0437 \u043c\u0430\u043f\u043e\u044e \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 Google Play Services\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/contours.cpp", "\"generateCertificate\" : \"Generate keys\"", "\"to_card_in_bank\" : \"To a card within the bank\"", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "void cv::transform(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::undistort(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "\"abc_menu_meta_shortcut_label\" : \"Meta\u00a0+\"", "\"account\" : \"\u041c\u043e\u0457 \u0440\u0430\u0445\u0443\u043d\u043a\u0438\"", "dims > 0 && hist.data", "\"dataToTransfered\" : \"\u0414\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b:\"", "CvSeq* cvEndFindContours(_CvContourScanner**)", "\"paymentBank\" : \"Within the bank\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/datastructs.cpp", "JYT^R[PVOPOJPGRFTFUGVJVMURR[PaOdNfLgKfKdLaN^P\\SZWX", "\"privateKeySuccessfullyConnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\"", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "dvec[j].depth() == src.depth()", "?int cvSolveCubic(const CvMat*, CvMat*)", "dsize.area() || (inv_scale_x > 0 && inv_scale_y > 0)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = float; VecOp = cv::RowNoVec]", "vecmat.isContinuous() && vecmat.type() == CV_32F && vecmat.total() == (size_t)points.cols", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF OMOT UMUT OPUP OQUQ ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS", "k == STD_VECTOR_MAT", "\"checkConnection\" : \"\u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0437\u0430\u0447\u0435\u043a\u0430\u0439\u0442\u0435\u2026\"", "0 <= idx0 && idx0 < ptnum", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "ucwsifdr", "void cvClearGraph(CvGraph*)", "E_MFK[ NFLY UFK[ UFS[ VFTY ]FS[ JFQF ZF`F", "D`DR`R", "\"outbox\" : \"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435\"", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZV", "src.type() == srcType && dst.type() == dstType", "\"address\" : \"Address\"", "F^YGXHYIZHZGXF \\FUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea [FWTVXVZW[Z[\\Y]W \\FXTWXWZX[ JMYM", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "void cv::adaptiveThreshold(cv::InputArray, cv::OutputArray, double, int, int, int, double)", "N2cv8Filter2DIhNS_4CastIfhEENS_11FilterNoVecEEE", "\"atms\" : \"\u0411\u0430\u043d\u043a\u043e\u043c\u0430\u0442\u0438\"", "MWOPUPOVUV", "io/card/payment/CardScanner", "scaleThresh", "\"accountMenu\" : \"\u0421\u0447\u0435\u0442\u0430\"", "void cvAnd(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "LXMRNPOOQORPRQPX POQPQQOX RQSPUOVOWPWQVQWP", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "\"mtrl_exceed_max_badge_number_content_description\" : \"More than %1$d new notifications\"", "\"amountMustExceedZero\" : \"Amount must exceed 0.00\"", "F^RHNLKPJSJUKWMXOXQWRU RHVLYPZSZUYWWXUXSWRU RUQYP\\ RUSYT\\ P\\T\\", "\"allow_geolocation\" : \"\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0433\u0435\u043e\u043b\u043e\u043a\u0430\u0446\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0432\u0430\u0448\u0443 \u0433\u0435\u043e\u043f\u043e\u0437\u0438\u0446\u0438\u044e\"", "The sequence has no points", "lo_diff and up_diff must be non-negative", "St11regex_error", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/histogram.cpp", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF QGNHLKKNKSLVNYQZSZVYXVYSYNXKVHSGQG SXX]Y] SXTXY]", "retainedVariance > 0 && retainedVariance <= 1", "\"month\" : \"\u043c\u0456\u0441.\"", "\"common_google_play_services_install_text\" : \"%1$s won't run without Google Play services, which are missing from your device.\"", "\"pushFromNotCurrentLogin\" : \"\u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f %1$s, \u0432\u044b \u0432\u043e\u0448\u043b\u0438 \u043a\u0430\u043a %2$s, \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 %1$s?\"", "Transformation matrix must be 2x3", "No GPU support", "\"password_expires_message\" : \"\u0422\u0435\u0440\u043c\u0456\u043d \u0434\u0456\u0457 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0432\u0445\u0456\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 %1$s\"", "KZNMONPPPXQZS[U[WZXX OMPNQPQXRZ LPMNNMPMQNRPRXSZT[", "Unsupported format", "Angle.size() == X.size() && Angle.type() == X.type()", "\"pushChangeFromSmsConfirmationMessage\" : \"\u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0442\u0438 \u043a\u043e\u0434\u0438 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0432 PUSH-\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\u0445 (\u0437\u0430\u043c\u0456\u0441\u0442\u044c SMS) \u043d\u0430 \u0446\u0435\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439. \u0426\u0435 \u0448\u0432\u0438\u0434\u043a\u043e \u0456 \u0431\u0435\u0437\u043f\u0435\u0447\u043d\u043e. \u0423\u0432\u0456\u043c\u043a\u043d\u0443\u0442\u0438 \u0432\u0456\u0434\u043f\u0440\u0430\u0432\u043a\u0443 \u043a\u043e\u0434\u0456\u0432 PUSH-\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\u043c\u0438?\"", "future", "void cv::normalize(cv::InputArray, cv::OutputArray, double, double, int, int, cv::InputArray)", "Cvoid cv::crossCorr(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Size, int, cv::Point, double, int)", "!bgdSamples.empty() && !fgdSamples.empty()", "void cv::hconcat(const cv::Mat*, size_t, cv::OutputArray)", "\"quickTransfer\" : \"\u0428\u0432\u0438\u0434\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u0430\u0437\"", "void cv::sortIdx(cv::InputArray, cv::OutputArray, int)", "double cvDet(const CvArr*)", "virtual cv::GlTexture cv::_InputArray::getGlTexture() const", "int cv::Subdiv2D::insert(cv::Point2f)", "\"requisitesNoIbanModeMessage\" : \"C/a: %1$s\nin %2$s, Bank code %3$s,\nRecipient: %4$s,\nRecipient TAX Id: %5$s\"", "void cvCalcProbDensity(const CvHistogram*, const CvHistogram*, CvHistogram*, double)", "void cvCanny(const CvArr*, CvArr*, double, double, int)", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "Some of essential image attributes are absent", "Bilateral filtering is only implemented for 8u and 32f images", "EYETHVKWPWSVVTXQYNYLXKVKSLPNNQMTMYN\\P_", "N2cv16SymmColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "F_[NZO[P\\O\\N[MZMYNXPVUTXRZP[M[JZIXIUJSPORMSKSIRGPFNGMIMKNNPQUXWZZ[[[\\Z\\Y M[KZJXJUKSMQ MKNMVXXZZ[", "The flow matrix size does not match to the signatures' sizes", "width", "MXVPUSTURVPUOSPQRPTQUUVV", "void cvLogPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "_r.data == _r0.data", "The hull matrix should be continuous and have a single row or a single column", "H]SFPGOHNJNMOOQPTPXOYNZLZIYGVFSF SFQGPHOJOMPOQP TPWOXNYLYIXGVF QPMQKSJUJXKZN[R[VZWYXWXTWRVQTP QPNQLSKUKXLZN[ R[UZVYWWWSVQ", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_15MorphColumnIVecINS_6VMin8uEEEEE", "void cv::GlTexture::copyFrom(cv::InputArray, bool)", "I[JQKOMMOMPNQPQTO[ PNPTN[ PPOTM[O[ YOYNXNXPZPZNYMWMUNSPQT", "The array must have equal types", "srcA.size() == dst.size() && srcA.type() == dst.type()", "\"common_google_play_services_install_text\" : \"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \"%1$s\" \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u044b Google Play.\"", "\"currentDirectory\" : \"\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\"", "Only interleaved images can be read", "\"no\" : \"\u041d\u0456\"", "virtual void {anonymous}::GHT_Ballard_PosRotation::findPosInHist()", "KYTFPTOXOZP[S[UYVW UFQTPXPZQ[ NMWM", "Closing tag should not contain any attributes", "ch.size == mat.size && ch.depth() == mat.depth() && 0 <= coi && coi < mat.channels()", "{default arg#", "PSSRRSQSPRPQQPRPSQSSRUQV QQQRRRRQQQ", "void cv::histPrepareImages(const cv::Mat*, int, const int*, const cv::Mat&, int, const int*, const float**, bool, std::vector<unsigned char*>&, std::vector<int>&, cv::Size&, std::vector<double>&)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/thresh.cpp", "Iterator pointer is NULL", "\"match\" : \"\u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\"", "vals[ofs[k]] >= pivot", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "G]LFL[ MFM[ IFUFXGYHZJZLYNXOUP UFWGXHYJYLXNWOUP MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "void icvXMLWriteScalar(CvFileStorage*, const char*, const char*, int)", "\"login_must_be_longer\" : \"The login should be at least %1$d characters long\"", "NWPMPV UPPT RSUV", "N9__gnu_cxx26__concurrence_unlock_errorE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "edge > 0", "virtual int cv::_InputArray::type(int) const", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[", "virtual void cv::_OutputArray::create(int, int, int, int, bool, int) const", "LYPNSKSX RLRX OXVX", "F\\IIJGLFOFQGRIRLQOPQNSKU OFPGQIQMPPNS VFT[ WFS[ KUYU", "void cv::FilterEngine::init(const cv::Ptr<cv::BaseFilter>&, const cv::Ptr<cv::BaseRowFilter>&, const cv::Ptr<cv::BaseColumnFilter>&, int, int, int, int, int, const Scalar&)", "G]IQJOKNMM[M KOMNZN IQJPLO[O OONZM[LZMWOO UOVZW[XZWWUO [M[O OOMZ UOWZ", "type == src2.type() && src1.cols == src2.cols && (type == CV_32F || type == CV_8U)", "bool cv::isContourConvex(cv::InputArray)", "mask must be 2 pixel wider and 2 pixel taller than filled image", "void cvCalcBayesianProb(CvHistogram**, int, CvHistogram**)", "%s: %s%s", "OURHR\\", "MWOOUU UOOU", "Bad format of floating-point constant", "H\\XIWGTFRFOGMJLOLTMXOZR[S[VZXXYUYTXQVOSNRNOOMQLT", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "Attribute value should be put into single or double quotes", "origin", "basic_string::copy", "void cv::matchTemplate(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "cv::Mat cv::getPerspectiveTransform(cv::InputArray, cv::InputArray)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/rotcalipers.cpp", "G]KFK[ KFLFL[K[ YFXFX[Y[ YFY[ LPXP LQXQ", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short int>; VecOp = cv::MorphIVec<cv::VMax16s>; cv::Point = cv::Point_<int>]", "\"save_without_sign\" : \"Save without signature\"", "basic_ios::clear", "int cvGraphRemoveVtx(CvGraph*, int)", "\"pay\" : \"Pay\"", "CvFileStorage* cvOpenFileStorage(const char*, CvMemStorage*, int, const char*)", "CaGO]OXI L[GU]U", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "H\\IQJOLMNMONOPNTL[ NTPPRNTMVMXOXRWWTb", "H\\JFJL QFQ[ RGRZ SFS[ ZFZL JFZF N[V[ KFJL LFJI MFJH OFJG UFZG WFZH XFZI YFZL QZO[ QYP[ SYT[ SZU[", "I\\MMMWNZP[S[UZXW XMX[", "Unspecified error", "std::istream", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = double; VecOp = cv::RowNoVec]", "KYOBQDSGUKVPVTUYS]Q`Ob SHTKUOUUTYS\\ QDRFSITOTUS[R^Q`", "Null pointer to source file node or reader", "MVOMOV OMUM OQSQ", "\"stringLengthMastBeMost2\" : \"\u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\"", "F^RBR[ I[[[", "G^TFRGQIPMOSNVMXKZI[G[FZFXGWIWKXMZP[S[VZXXZT[O[KZHYGWFTFRHRJSMUPWRZT\\U", "TLS wrapper function for ", "I[IPKR LKNP RGRO XKVP [PYR", "cv::RGB2Luv_f::RGB2Luv_f(int, int, const float*, const float*, bool)", "color", "The matrix converted to point sequence must be 1-dimensional and continuous", "N2cv14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEE", "nz > 0", "\"noAppForPdf\" : \"You have requested the statement in PDF format but there are no applications on the device to view it. Get the statement anyway?\"", "The cost matrix must be 32fC1", "top >= 0 && bottom >= 0 && left >= 0 && right >= 0", "F^[FI[ NFPHPJOLMMKMIKIIJGLFNFPGSHVHYG[F WTUUTWTYV[X[ZZ[X[VYTWT", "G^_BEbFb _B`BFb", "AbDMIMRY HNR[ b:R[", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "\"amountExceedsBalance\" : \"The entered amount exceeds the available balance\"", "NWTKPX UKQX RKWK NXSX", "J[TFRGPJOLNOMTMXNZO[Q[SZUWVUWRXMXIWGVFTF NPWP", "edgeDst(edge, &t) > 0", "I[NFN[ OGOZ PFP[ KFSF K[Z[ZU LFNG MFNH QFPH RFPG NZL[ NYM[ PYQ[ PZR[ U[ZZ W[ZY X[ZX Y[ZU", "\"state\" : \"\u0421\u0442\u0430\u0442\u0443\u0441\"", "H\\TLTMUNWNYMZKZIYGWFTFQGOIMLLNKRKVLYMZO[Q[TZVXWV", "void cvPutText(CvArr*, const char*, CvPoint, const CvFont*, CvScalar)", "void icvFSCreateCollection(CvFileStorage*, int, CvFileNode*)", "\"payment\" : \"Transfers\"", "\"registration_fingerprint\" : \"\u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u0430\"", "\"demoAlertMessage\" : \"The application is running in the demo mode. Functionality is limited.\"", "MWUQSPRPPQOSPURVSVUU OSSS", "\"choose\" : \"\u0412\u044b\u0431\u0440\u0430\u0442\u044c\"", "virtual cv::GlBuffer cv::_InputArray::getGlBuffer() const", "(dcn == 3 || dcn == 4) && scn == 2 && depth == CV_8U", "LULRUWUMLR ORTU ORTO RRTS RRTQ", "\"password_secret_key\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\"", "E_NFH[ OFI[ PFJ[ ZFT[ [FU[ \\FV[ KFSF WF_F LPXP E[M[ Q[Y[ LFOG MFNH QFOH RFOG XF[G YFZH ]F[H ^F[G IZF[ IYG[ JYK[ IZL[ UZR[ UYS[ VYW[ UZX[", "MVQMNV VMOS RQTV", "\"mtrl_picker_text_input_year_abbr\" : \"y\"", "KYUBSDQGOKNPNTOYQ]S`UbVb UBVBTDRGPKOPOTPYR]T`Vb", "int cvGraphVtxDegreeByPtr(const CvGraph*, const CvGraphVtx*)", "Connectivity must be 4, 0(=4) or 8", "\"exit\" : \"Exit\"", "void cv::writeElems(std::ostream&, const void*, int, int, char)", "\"invalidPort\" : \"Invalid format for field Port\"", "N2cv14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEE", "one of dimesion sizes is non-positive", "\"branches\" : \"Branches\"", "\"bankIdConnectionError\" : \"Connection to the BankID system is unavailable. Please try again later or call the contact center.\"", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<float>; VecOp = cv::MorphFVec<cv::VMax32f>; cv::Point = cv::Point_<int>]", "NVQQQSSSSQQQ QQSS SQQS", "\"to\" : \"To\"", "Formats of input arguments do not match", "Invalid character in the stream", "size() == mask.size()", "LXQFQHSHSFQF RFRH QGSG QMQ[ RNRZ NMSMS[ N[V[ OMQN PMQO QZO[ QYP[ SYT[ SZU[", "NYNVPSQQQSSVTXTZR[ NZP[T[VZWYYV", "H\\XFWGQINKLNKQKULXNZQ[S[VZXXYUYSXPVNSMQMNNLPKS XFWHUIQJNLLN QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "\"required\" : \"\u041f\u043e\u043b\u0435 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u0435 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u0432\u043d\u0435\u043d\u043d\u044f\"", "J[UPSOQOPQPRQTSTUS UOUSVTXTYRYQXNVLSKRKOLMNLQLRMUOWRXSXVW", "H\\QMNNLQKTKVLYMZP[S[VZXWYTYRXOWNTMQM NOMQLTLWMY VYWWXTXQWO QMOONQMTMWNZP[ S[UYVWWTWQVNTM", "Bad sequence slice", "*N12_GLOBAL__N_122generic_error_categoryE", "\"certNotExistInOperationsGenerate\" : \"\u0423 \u0432\u0430\u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u042d\u0426\u041f. \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044b \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438/\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u044e\u0447 \u0432\u043d\u0443\u0442\u0440\u0438\u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0426\u0421\u041a \u0438\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0426\u0421\u041a\"", "Monday", "MWVLNX", "\"system_setting\" : \"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\"", "Input array must be 1d continuous array of 2d or 3d points", "(src.type() == CV_32FC1 || src.type() == CV_32FC3) && src.type() == dst.type() && src.size() == dst.size() && src.data != dst.data", "\"setting\" : \"Settings\"", "\"eca_list_header\" : \"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0426\u0421\u041a\"", "mtype == type0 || (CV_MAT_CN(mtype) == 1 && ((1 << type0) & fixedDepthMask) != 0)", "\"error_failed_ssl_handSnake\" : \"Unable to establish a secure SSL - connection. Check with your bank\"", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_15MorphColumnFVecINS_7VMax32fEEEEE", "F_OQMQKRJSIUIWJYKZM[O[QZRYSWSURSQROQ SHPQ ZJRR \\QST", "JZNKNX OKOX WKOS QQVX RQWX LKQK TKYK LXQX TXYX", "void icvGrowSeq(CvSeq*, int)", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi1EEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "system", "\"pbClientService\" : \"PB clients servicing\"", "\"toConfirmKeyAccessAndSaveKeys\" : \"To confirm key access and save keys, please enter the password for your private key and tap \"Save key\" button\"", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[P[ T[[[ WNMZ OGOFNFNGOIQJSJUIVG", "JZNKNX OMVX OKVV VKVX LKOK TKXK LXPX", "CvScalar cvGet2D(const CvArr*, int, int)", "F]UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWJWLXNZP[S[UZWXYTZOZLYIWGUFPFMGKIJKJMKNMNNMOK", "\"do_change_password\" : \"\u0421\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c\"", "angleStep > 0.0 && angleStep < 360.0", "JZXKLX OKPLPNOOMOLNLLMKOKSLVLXK UTTUTWUXWXXWXUWTUT", "St15messages_bynameIwE", "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", "levels > 0", "MWQMNV QMTMVNVPSQPQ SQURUTTURVNV", "NRRROPNNNLOKPK", "H]WFW[ XFX[ WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ TFXF W[[[", "void cvLinearPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "\"match_passwords_message\" : \"Password and confirmation %1$s\"", "\"credit\" : \"Loans\"", "CvMat* cvGetSubRect(const CvArr*, CvMat*, CvRect)", "\"clear\" : \"Clear\"", "void icvDestroyMemStorage(CvMemStorage*)", "void cvPyrUp(const void*, void*, int)", "void cvSetMemoryManager(CvAllocFunc, CvFreeFunc, void*)", "\"icon_content_description\" : \"Dialog Icon\"", "detectedCard", "\"keyTransfer\" : \"\u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u043a\u043b\u044e\u0447\u0430\"", "\"year\" : \"\u0440\u0456\u043a\"", "void cv::GeneralizedHough::setTemplate(cv::InputArray, int, cv::Point)", "dx.type() == CV_32FC1 && dx.size == edges.size", "LYOMONNNNMOLQKTKVLWNVPTQQROSNUNX TKULVNUPTQ NWOVPVSWVWWV PVSXVXWVWU", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2", "char16_t", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_22VResizeLinearVec_32f16ILi0EEEEEEE", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/pyramids.cpp", "k == OPENGL_BUFFER", "void cv::convertAndUnrollScalar(const cv::Mat&, int, uchar*, size_t)", "DaIMI[ JMJ[ FMMM F[M[ VMSNQPPSPUQXSZV[X[[Z]X^U^S]P[NXMVM VMTNRPQSQURXTZV[ X[ZZ\\X]U]S\\PZNXM JTPT", "\"abc_action_bar_home_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u0433\u043e\u043b\u043e\u0432\u043d\u0443\"", "\"between_accounts\" : \"\u041c\u0435\u0436\u0434\u0443 \u0441\u0432\u043e\u0438\u043c\u0438 \u0441\u0447\u0435\u0442\u0430\u043c\u0438\"", "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", "I\\JPLNNMOMQNROSRSVR[ ZMYPXRR[P_Ob", "\"zxing_app_name\" : \"\u0421\u043a\u0430\u043d\u0435\u0440 \u0448\u0442\u0440\u0438\u0445-\u043a\u043e\u0434\u0456\u0432\"", "%H:%M", "void cvCreateData(CvArr*)", "(unsigned)k < (unsigned)points.rows", "void cv::copyMakeBorder(cv::InputArray, cv::OutputArray, int, int, int, int, int, const Scalar&)", "I\\XMX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/clahe.cpp", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "CvSeq* cvConvexHull2(const CvArr*, void*, int, int)", "\"choose_csk\" : \"\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0426\u0421\u041a\"", "\"changeGcmMessage\" : \"You currently receive notifications from OTP Smart to another device. Do you want to receive notifications to this device? (sending notifications to another device will be stopped)\"", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZVZS USZS", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "LYNKRRRX OKSR WKSRSX LKQK TKYK PXUX", "\"fingerprint_acquired_too_fast\" : \"\u0412\u0438 \u0437\u0430\u0431\u0440\u0430\u043b\u0438 \u043f\u0430\u043b\u0435\u0446\u044c \u043d\u0430\u0434\u0442\u043e \u0448\u0432\u0438\u0434\u043a\u043e. \u041f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "Unrecognized method id", "vfpv3d16", "H]TFQGOIMLLOKSKVLYMZO[Q[TZVXXUYRZNZKYHXGVFTF QHOJNLMOLSLWMY TYVWWUXRYNYJXH TFRGPJOLNOMSMXNZO[ Q[SZUWVUWRXNXIWGVF", "@@333?", "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE", "\"languageChange\" : \"\u0421\u043c\u0435\u043d\u0430 \u044f\u0437\u044b\u043a\u0430\"", "CaHQGRHSIRHQ RQQRRSSRRQ \\Q[R\\S]R\\Q", "\"uppercase_letters\" : \"\u2022 \u043b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0456 \u043b\u0456\u0442\u0435\u0440\u0438 \u0443 \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u043c\u0443 \u0440\u0435\u0433\u0456\u0441\u0442\u0440\u0456\"", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F H[\\[ [[\\b \\[\\b", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short unsigned int>; VecOp = cv::MorphIVec<cv::VMin16u>; cv::Point = cv::Point_<int>]", "\"auto_exit\" : \"\u0410\u0432\u0442\u043e\u0432\u0438\u0445\u0456\u0434\"", "Neither accuracy nor maximum iterations number flags are set in criteria type", "\"generate_cert_header\" : \"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0456\u044f \u043a\u043b\u044e\u0447\u0430\"", "The passed sequence is not a valid contour", "CvSeq* cvSeqSlice(const CvSeq*, CvSlice, CvMemStorage*, int)", "int cv::solveCubic(cv::InputArray, cv::OutputArray)", "\"match_passwords_message\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 %1$s\"", "\"extract\" : \"Statement\"", "static_cast", "Unknown threshold type", "JZZHZGYGYI[I[GZFXFVGTISKRNQRO[N^M`Kb TJSMRRP[O^ XFVHUJTMSRQZP]O_MaKbIbHaH_J_JaIaI` NMYM", "\"fingerprint_not_recognized\" : \"\u041d\u0435 \u0440\u043e\u0437\u043f\u0456\u0437\u043d\u0430\u043d\u043e\"", "Mag.size() == Angle.size() && Mag.type() == Angle.type()", "cv::adaptiveBilateralFilter_8u_Invoker::adaptiveBilateralFilter_8u_Invoker(cv::Mat&, const cv::Mat&, cv::Size, double, double, cv::Point)", "CV_SEQ_ELTYPE(contour) == CV_32FC2", "\"common_signin_button_text\" : \"\u0412\u043e\u0439\u0442\u0438\"", "\"noAppForPdf\" : \"\u0412\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u043b\u0438 \u0432\u044b\u043f\u0438\u0441\u043a\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PDF, \u043d\u043e \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0435\u0433\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430. \u0412\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u044b\u043f\u0438\u0441\u043a\u0443?\"", "mask.empty() || (mask.size == src1.size && mask.type() == CV_8U)", "\"fingerprint_error_hw_not_available\" : \"Fingerprint hardware not available.\"", "Bayer->RGB demosaicing only supports 8u and 16u types", "H]YJYIXIXKZKZIYGWFTFQGOIMLLOKSKVLYMZO[R[UZWXXVXSWQVPTOQOOPNQMS PINLMOLSLWMY VXWVWSVQ TFRGPJOLNOMSMXNZO[ R[TZUYVVVRUPTO", "cv::LineIterator::LineIterator(const cv::Mat&, cv::Point, cv::Point, int, bool)", "double cv::norm(cv::InputArray, cv::InputArray, int, cv::InputArray)", "Storage block size is too small to fit the sequence elements", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "Number of dimensions is the same for all arrays", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "G][BIb", "MWRMQNROSNRM R[QZRYSZS\\R^Q_", "', the parameter has ", "N9__gnu_cxx20recursive_init_errorE", "I\\WIVJVLWMYMZKZIYGWFTFRGQHPJPLQNSO TFRHQJQMSO SOQONPLRKTKWLYMZO[R[UZWXXVXTWRURSSRU QOOPMRLTLXMZ", "\"certificationCenter\" : \"\u0426\u0435\u043d\u0442\u0440 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\"", "punct", "L[VKVX WKWX VRUPSOQOOPNRNUOWQXSXUWVU QOPPOROUPWQX TKWK VXYX", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/matop.cpp", "CvMatND* cvGetMatND(const CvArr*, CvMatND*, int*)", "\"confirm\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0438\"", "The output header should be CvMat or CvMatND", "' of the algorithm '", "\"apiVersion\" : \"1.0.6\"", "a_size.width == len", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 8>; VecOp = cv::NoVec<double, double>]", "D`DOGQKSPTTTYS]Q`O", "void GCGraph<TWeight>::addTermWeights(int, TWeight, TWeight) [with TWeight = double]", "\"card\" : \"Cards\"", "St23__codecvt_abstract_baseIwc9mbstate_tE", "\"alreadyRegistered\" : \"\u042f \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\"", "\"fingerprint_acquired_imager_dirty\" : \"\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u0435 \u0441\u043a\u0430\u043d\u0435\u0440 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "MWRLMUWURL ROOT ROUT RRQT RRST", "src2.size && src1.size && src2.type() == src1.type()", "dst.size() == src.size() && src.channels() == dst.channels()", "\"empty_file_error\" : \"\u0424\u0430\u0439\u043b %1$s \u043c\u0430\u0454 \u0440\u043e\u0437\u043c\u0456\u0440 0 \u0431\u0430\u0439\u0442. \u041d\u0435 \u043c\u043e\u0436\u043d\u0430 \u0432\u043a\u043b\u0430\u0434\u0430\u0442\u0438 \u043f\u043e\u0440\u043e\u0436\u043d\u0456 \u0444\u0430\u0439\u043b\u0438.\"", "utf-16", "G^OFObPb OFPFPb UFUbVb UFVFVb JP[P[Q JPJQ[Q JW[W[X JWJX[X", "\"mtrl_chip_close_icon_content_description\" : \"Remove %1$s\"", "N2cv9ColumnSumIifEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "void cvSetSeqReaderPos(CvSeqReader*, int, int)", "\"atc\" : \"\u041a\u0440\u0443\u0433\u043b\u043e\u0441\u0443\u0442\u043e\u0447\u043d\u043e\"", "\"appbar_scrolling_view_behavior\" : \"com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior\"", "\"menu\" : \"\u041c\u0435\u043d\u044e\"", "src1.type() == src2.type()", "\"common_google_play_services_updating_text\" : \"\u0421\u0435\u0440\u0432\u0438\u0441\u044b Google\u00a0Play, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \"%1$s\", \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f.\"", "\"phoneAsLoginPhone\" : \"0444965020\"", "void cv::LUT(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "\"paymentCurrencyBuySell\" : \"Currency purchase/sale\"", "The key is an empty", "Invalid fs.state", "Unsupported combination of source format (=%d), and buffer format (=%d)", "std::exception", "J[NKNUOWQXTXVWWUWK OKOUPWQX LKQK UKYK", "\"common_google_play_services_wear_update_text\" : \"\u041f\u043e\u0442\u0440\u0456\u0431\u043d\u0430 \u043d\u043e\u0432\u0430 \u0432\u0435\u0440\u0441\u0456\u044f \u0441\u0435\u0440\u0432\u0456\u0441\u0456\u0432 Google Play. \u0412\u043e\u043d\u0438 \u043d\u0435\u0432\u0434\u043e\u0432\u0437\u0456 \u043e\u043d\u043e\u0432\u043b\u044f\u0442\u044c\u0441\u044f.\"", "\"toEdit\" : \"Edit\"", "\"amount\" : \"\u0421\u0443\u043c\u043c\u0430\"", "Only uniform bin ranges can be used here (to avoid memory allocation)", "\"changeCurrentPasswordLabel\" : \"\u0414\u043b\u044f \u0437\u043c\u0456\u043d\u0438 \u043f\u0430\u0440\u043e\u043b\u044f - \u0432\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u043e\u0442\u043e\u0447\u043d\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c:\"", "KYTKKX SMTX TKUX NTTT IXNX RXWX", "\"fingerprint_error_canceled\" : \"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u043e\u043c \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430.\"", "CvScalar cvAvg(const void*, const void*)", "void cv::calcBackProject(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<float>&, double)", "\"service\" : \"\u0406\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044f\"", "\"certFingerprintTitle\" : \"Confirm with Fingerprint\"", "\"logins_equals\" : \"\u041d\u043e\u0432\u0438\u0439 \u043b\u043e\u0433\u0456\u043d \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u0432\u0456\u0434\u0440\u0456\u0437\u043d\u044f\u0442\u0438\u0441\u044f \u0432\u0456\u0434 \u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0433\u043e\"", "\"refuse_password_dialog_title\" : \"\u041e\u0442\u043a\u0430\u0437 \u043e\u0442 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f\"", "void cvUndistortPoints(const CvMat*, CvMat*, const CvMat*, const CvMat*, const CvMat*, const CvMat*)", "cv::RotatedRect cv::fitEllipse(cv::InputArray)", "JZRYQ\\ RYS\\ Q\\S\\ RYUZXZZXZUYTWTYRZOYMWLUMVJUHSGQGOHNJOMMLKMJOKRMTKTJUJXLZOZRY", "_filter == CV_GAUSSIAN_5x5 && src.type() == dst.type()", "\"pinSetupChangeCodeDescPart1\" : \"\u0423\u0432\u0430\u0433\u0430! \u0412\u0430\u0440\u0442\u0456\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0443\u0433\u0438 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f/\u0437\u043c\u0456\u043d\u0438 PIN-\u043a\u043e\u0434\u0443 \u0441\u043f\u043b\u0430\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u0437\u0433\u0456\u0434\u043d\u043e \u0434\u0456\u044e\u0447\u0438\u0445\"", "JZLMR[ XMR[P_NaLbKb", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/corner.cpp", "void cv::calcHist(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<int>&, const std::vector<float>&, bool)", "The lower bounary is neither an array of the same size and same type as src, nor a scalar", "delta.channels() == 1 && (delta.rows == src.rows || delta.rows == 1) && (delta.cols == src.cols || delta.cols == 1)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "\"certNotExistGenerate\" : \"You have no key for DS. Transfers without a signature will not be accepted for execution. You can either transfer/generate a key of an internal CA or connect a key issued by external CA\"", "\"pinSetupCodeLimitText\" : \"(4 \u0441\u0438\u043c\u0432\u043e\u043b\u0438, \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0456 \u0441\u0438\u043c\u0432\u043e\u043b\u0438 0\u20139)\"", "?cv::RGB2Lab_b::RGB2Lab_b(int, int, const float*, const float*, bool)", "\"gcm_defaultSenderId\" : \"1044626685477\"", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_15MorphColumnFVecINS_7VMin32fEEEEE", "void cvRegisterType(const CvTypeInfo*)", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "G]QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ OKLLKMJOJRKTLUOVUVXUYTZRZOYMXLUKOK LMKOKRLT XTYRYOXM OKMLLOLRMUOV UVWUXRXOWLUK", "int cvCheckContourConvexity(const CvArr*)", "MWRHSGRFQGQIRKSL", "G\\JMKNLPLUMXOZQ[S[UZWXXVYRYNXMWMXPXSWWUZ KMLNMPMUNX WMXNXO HPINJMLMMNNPNVOYQ[", "\"change_the_password_user\" : \"\u0417\u043c\u0456\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 %1$s\"", "src->dims <= CV_MAX_DIM", "dst.size == src.size && dst.channels() == cn", "H\\YIWGTFPFMGKIKKLMMNOOTQVRWSXUXXWYTZPZNYMXKX YIWIVHTGPGMHLILKMMONTPVQXSYUYXWZT[P[MZKX", "void cv::ellipse(cv::Mat&, cv::Point, cv::Size, double, double, double, const Scalar&, int, int, int)", "virtual size_t EmptyDeviceInfoFuncTable::sharedMemPerBlock(int) const", "Only continuous nD arrays are supported here", "\"v7_preference_off\" : \"OFF\"", "CvMat* cv2DRotationMatrix(CvPoint2D32f, double, double, CvMat*)", "Literal ' or > are not allowed. Use &apos; or &gt;", "N2cv9RowFilterIffNS_8RowNoVecEEE", "\"add_cert_header\" : \"\u041f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430\"", "H]KHJJJLKNNOQOUNWMYKZIZGYFWFTGQJOMMQLULXMZP[R[UZWXXVXTWRURSSRU WFUGRJPMNQMUMXNZP[", "\"menu_greetings\" : \"\u0414\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c,\"", "MWUNSMQMONOOPPTRUSUUSVQVOU", "clone function pointer is NULL", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short unsigned int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "\"character_counter_overflowed_content_description\" : \"Character limit exceeded %1$d of %2$d\"", "JZLMR[ LMMMRY XMWMRY XMR[", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "\"paymentCurrencyDocuments\" : \"\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a\"", "F]KFKQLSOTRTUSWQ LFLQMSOT WFW[ XFX[ HFOF TF[F T[[[", "cv::gpu::GpuMat cv::GlBuffer::mapDevice()", "\"password_must_contain\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c:\"", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallNoVec]", "N2cv9ColumnSumIihEE", "src && dst && count > 0", "(int)nelems >= 0", "\"choose_cert\" : \"\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\"", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi1EEE", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX YKZL[L[KUKSLRNRX UKTLSNSX ZOZX [O[X HO[O HXMX PXUX XX]X", "cv::Point2d cv::phaseCorrelateRes(cv::InputArray, cv::InputArray, cv::InputArray, double*)", "\"selectCertificateTitle\" : \"Select a folder with certificate\"", "\"abc_action_bar_up_description\" : \"Navigate up\"", "JZPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR SRTWUXVXWW SRTSUWVX JXOX", "I\\MKMX NNRX NKRU WKRX WKWX XKXX KKNK WKZK KXOX UXZX", "H]UFO[ VFP[ OFLLNF]F\\L\\F L[S[", "MXQHRISKSMRORPTRRTRUSWSYR[Q\\ RISM SKRO RUSY SWR[", "\"stringLengthMastBeMost\" : \"\u0414\u043e\u0432\u0436\u0438\u043d\u0430 \u043f\u043e\u043b\u044f \u043f\u043e\u0432\u0438\u043d\u043d\u0430 \u0431\u0443\u0442\u0438 \u0431\u0456\u043b\u044c\u0448\u0435\"", "src.rows == dst.rows && src.cols*6 == dst.cols*dst.channels() && dst.depth() == CV_32F", "I[TFRGQHQIRJUKZKZJWKSMPOMRLULWMYP[S]T_TaSbQbPa ULQONRMUMWNYP[", "void cv::AlgorithmInfo::set(cv::Algorithm*, const char*, int, const void*, bool) const", "H]YIXJYKZJZIYGWFTFQGOIMLLOKSKWLYMZO[R[UZWXXVXSWQVPTOQOOPMRLT TFRGPINLMOLSLXMZ R[TZVXWVWRVP", "idxmat.isContinuous() && idxmat.type() == CV_32S && (idxmat.cols == 1 || idxmat.rows == 1)", "NWPNRMSMUNUPRQRRSRSQUP RURVSVSURU", "I][MQMONMPLSLVMYNZP[R[TZVXWUWRVOUNSM", "\"works_on_weekends\" : \"\u041f\u0440\u0430\u0446\u044e\u0454 \u0443 \u0432\u0438\u0445\u0456\u0434\u043d\u0456\"", "void icvXMLParse(CvFileStorage*)", "MVSMPV PMVM", "%s(%d): %s", "double cv::compareHist(const cv::SparseMat&, const cv::SparseMat&, int)", "\"canNotDecryptData\" : \"Error decrypting the data. Probably you have entered an invalid pairing code in the web client and/or an invalid private key password in the mobile client. To transfer the certificate, please start the process from the beginning.\"", "Wrong parameter type in the setter", "\"accountMenu\" : \"\u0420\u0430\u0445\u0443\u043d\u043a\u0438\"", "F^ZJSJOKMLKNJQJSKVMXOYSZZZ SFS^", "St14collate_bynameIcE", "H[YGUGQHNJLMKPKSLVNYQ[U\\Y\\ YGVHSJQMPPPSQVSYV[Y\\", "St19basic_ostringstreamIcSt11char_traitsIcESaIcEE", "CV_IS_MAT(matP) && matP->rows == 3 && (matP->cols == 3 || matP->cols == 4)", "KYTFN[ UFO[ VFP[ QFYF K[S[ RFUG SFTH WFUH XFUG OZL[ OYM[ PYQ[ OZR[", "St9basic_iosIwSt11char_traitsIwEE", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/precomp.hpp", "MXPYOZP[QZPY", "void icvCalcAndWritePtIndices(CvPoint**, int*, int, int, CvSeq*, CvSeqWriter*)", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "\"yes\" : \"Yes\"", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "MXUSTQRPPQOSPURVTUUS VPSY", "float cvCalcEMD2(const CvArr*, const CvArr*, int, CvDistanceFunction, const CvArr*, CvArr*, float*, void*)", "KXRFRHTHTFRF SFSH RGTG RMR^QaPb SNS]R` OMTMT]S`RaPbMbLaL_N_NaMaM` PMRN QMRO", "bufType == srcType", "E^^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FE[ ^FF[ ^FG[ XTVTTUSWSYU[W[YZZXZVXT PGMFJIKLNMQJPG OFKGJK LMPLQH YUVTSWTZW[ZXYU XTTUSY U[YZZV E[G[", "H\\PFMGLILLMNPOTOWNXLXIWGTFPF PFNGMIMLNNPO TOVNWLWIVGTF POMPLQKSKWLYMZP[T[WZXYYWYSXQWPTO PONPMQLSLWMYNZP[ T[VZWYXWXSWQVPTO", "std::bad_array_new_length", "MWUPUY USTQRPPQOSPURVTUUS", "void cvStartNextStream(CvFileStorage*)", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZV ZKYKXIWHUGQGOHMKLNLSMVOYQZUZWYXXYVZV", "N2cv9ColumnSumIdhEE", "\"branches\" : \"\u041e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u044f\"", "Invalid sparse array header", "MWRKQMOPMR RKSMUPWR RMOQ RMUQ ROPQ ROTQ QQSQ MRWR", "void cvStartAppendToSeq(CvSeq*, CvSeqWriter*)", "virtual void {anonymous}::GHT_Ballard_Pos::processTempl()", "void icvSeqElemsClearFlags(CvSeq*, int, int)", "void cvStartReadRawData(const CvFileStorage*, const CvFileNode*, CvSeqReader*)", "*N12_GLOBAL__N_120GHT_Ballard_PosScaleE", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[ [FI[ [FJ[ YTWTUUTWTYV[X[ZZ[X[VYT OGLFIIJLMMPJOG NFJGIK KMOLPH ZUWTTWUZX[[XZU YTUUTY V[ZZ[V H[J[", "Null pointer to image", "!map2.data || (map2.size() == map1.size())", "\"message\" : \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\"", "\"canNotUnPackData\" : \"Failed to unpack the transferred key. Perhaps you've entered a wrong password or paring code. To transfer the key, you need to start the process from the beginning.\"", "\"disconnectCertDialogText\" : \"\u042f\u043a\u0449\u043e \u0432\u0438 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0446\u044e \u0434\u0456\u044e, \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435 \u0432\u0438\u0434\u0430\u043b\u0435\u043d\u0438\u0439 \u0437 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044e \u0442\u0430 \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0432\u0456\u0434 \u043e\u0431\u043b\u0456\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0438\u0441\u0443. \u0412\u0438 \u0434\u0456\u0439\u0441\u043d\u043e \u0431\u0430\u0436\u0430\u0454\u0442\u0435 \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u043a\u043b\u044e\u0447?\"", "src.type() == dst.type() && src.rows == dst.cols && src.cols == dst.rows", "\"added_new_fingerprint\" : \"\u041d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043d\u043e\u0432\u044b\u0439 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a. \u0414\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043d \u0438 \u043f\u0430\u0440\u043e\u043b\u044c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0445\u043e\u0434 \u043f\u043e \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u0443 \u043f\u0430\u043b\u044c\u0446\u0430 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\"", "0 <= coi && coi < mat.channels()", "\"paymentCurrencyExchange\" : \"Currency exchange\"", "OUPKRNSQSSRVPY", "CvMat* cvGetDiag(const CvArr*, CvMat*, int)", "I[NFN[ OFO[ KFZFZLYF K[R[", "double", "F^YXWZU[R[PZMXKWIWHXHZI[K[MZOWPURQTKWGYFZF[G\\H[IZH[G[FZFYFWGVHTLRPPVNZMZ OPUP", "Angle threshold.", "virtual void cv::_InputArray::getMatVector(std::vector<cv::Mat>&) const", "-i.D/!0", "MWRMQNROSNRM SZR[QZRYSZS\\R^Q_", "\"checkConnection\" : \"Please wait\u2026\"", "\"noPdfReader\" : \"\u041d\u0435 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u200b\u200b\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434\u0443 PDF\"", "\"expireDate\" : \"\u0421\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\"", "dst.type() == src.type() && dst.channels() == m.rows-1", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<float, float, float>; VResize = cv::VResizeLanczos4<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "\"step1Paring\" : \"\u041a\u0440\u043e\u043a 1: \u0417\u0432'\u044f\u0437\u0443\u0432\u0430\u043d\u043d\u044f\"", "Features", "virtual void EmptyFuncTable::copy(const cv::Mat&, cv::gpu::GpuMat&) const", "int cvGetDims(const CvArr*, int*)", "\"yesAndTerminate\" : \"\u0422\u0430\u043a, \u043f\u0435\u0440\u0435\u0440\u0432\u0430\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\"", "H\\OKUY UKOY KOYU YOKU", "IZWVUTSQROQLQIRGSFUFVGWIWLVQTVSXQZO[M[KZJXJVKUMUOV", "mask must have CV_8UC1 type", "dst.type() == CV_64F && dst.isContinuous() && (dst.cols == 1 || dst.rows == 1) && dcn >= cn", "void cv::NAryMatIterator::init(const cv::Mat**, cv::Mat*, uchar**, int)", "\"zxing_msg_default_status\" : \"Place a barcode inside the viewfinder rectangle to scan it.\"", "St9time_base", "\"create\" : \"\u0421\u0442\u0432\u043e\u0440\u0438\u0442\u0438\"", "\"certBlockedText\" : \"\u041f\u043e\u043a\u0430 \u0432\u0430\u0448 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0431\u0430\u043d\u043a\u043e\u043c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438, \u043d\u043e \u0442\u0430\u043a\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044b \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 (\u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0437\u0436\u0435)\"", " curve", "H\\KFK[ HF[FQP[Z ZV[Y\\[ ZVZY WYZY WYZZ\\[", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF SFPIQMUNXKWGSF UFQGPKSNWMXIUF", "std::allocator", "\"common_google_play_services_updating_text\" : \"\u0414\u043e\u0434\u0430\u0442\u043e\u043a %1$s \u043d\u0435 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438\u043c\u0435 \u0431\u0435\u0437 \u0441\u0435\u0440\u0432\u0456\u0441\u0456\u0432 Google Play, \u044f\u043a\u0456 \u0437\u0430\u0440\u0430\u0437 \u043e\u043d\u043e\u0432\u043b\u044e\u044e\u0442\u044c\u0441\u044f.\"", "MWOMUV UMOV", "PUSLRMSNTMSL SPSXRYQYPX", "Input sequence must consist of 2d points or 3d points", "JZLMR[ XMR[", "NVQNOONQNSOUQVSVUUVSVQUOSNQN OQOS PPPT QOQU RORU SOSU TPTT UQUS", "\"turnOff\" : \"\u0412\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438\"", "F^LLKKKILGOFRFOQMWLYKZI[G[FZFXGWHXGY RFOONRLWKYI[ JTKSMRVOXN[L]J^H^G]F\\FZGXJWLURTVTYV[W[YZ[X \\FZHXLVRUVUYV[", "\"hide_bottom_view_on_scroll_behavior\" : \"com.google.android.material.behavior.HideBottomViewOnScrollBehavior\"", "The function/feature is not implemented", "LYPFSCSP RDRP OPVP MRXR SVSa TTTa TTM]X] QaVa", "void cvSeqRemoveSlice(CvSeq*, CvSlice)", "i != j", "\"cancel\" : \"\u041e\u0442\u043c\u0435\u043d\u0438\u0442\u044c\"", "void cv::Subdiv2D::checkSubdiv() const", "F]MMGb NMHb MPLVLYN[P[RZTXVU XMUXUZV[Y[[Y\\W YMVXVZW[", "\"K\"K\"K\"K\"K\"K\"K\"K", "mask.empty() || (mask.size == src.size && mask.type() == CV_8U)", "MWRFSGTFSERF SMS^RaPbNb", "\"privateKeySuccessfullyDisconnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\"", "\"news\" : \"\u041d\u043e\u0432\u043e\u0441\u0442\u0438\"", "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", "void {anonymous}::throw_nogl()", "\"zxing_app_name\" : \"Barcode Scanner\"", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "\"turnOff\" : \"Disconnect\"", "int cvClipLine(CvSize, CvPoint*, CvPoint*)", "F^IUISJPLONOPPTSVTXTZS[Q ISJQLPNPPQTTVUXUZT[Q[O", "\"login\" : \"\u041b\u043e\u0433\u0456\u043d\"", "void cvGEMM(const CvArr*, const CvArr*, double, const CvArr*, double, CvArr*, int)", "PURURVSVSURU", "LXNMPV RMPV RMTV VMTV", "src.size() > 0", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "Wednesday", "void* cvClone(const void*)", "N2cv22KMeansDistanceComputerE", "\"masterpass_go_to_site\" : \"\u041d\u0430 \u0441\u0430\u0439\u0442 MasterCard\"", "basic_string::basic_string", "void cv::equalizeHist(cv::InputArray, cv::OutputArray)", "G]PMMNKPJSJUKXMZP[R[UZWXXUXSWPUNRM LPKRKVLX VXWVWRVP PMNNMOLRLVMYNZP[ R[TZUYVVVRUOTNRM RMZO[N[MPM RMZN", "28EqualizeHistCalcHist_Invoker", "std::iostream", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = double]", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "False", "\"openGooglePlay\" : \"Open Google Play\"", "Duplicated key", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF", "\"enterPairingCodeDescription\" : \"\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u0446\u0435\u0439 \u043a\u043e\u0434 \u0443 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u043f\u043e\u043b\u0435 \u0432\u0430\u0448\u043e\u0433\u043e web-\u043a\u043b\u0456\u0454\u043d\u0442\u0430 \u0442\u0430 \u0432\u0438\u043a\u043e\u043d\u0443\u0439\u0442\u0435 \u043f\u043e\u0434\u0430\u043b\u044c\u0448\u0456 \u0456\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0456\u0457. \u0417\u0430\u0447\u0435\u043a\u0430\u0439\u0442\u0435, \u043f\u043e\u043a\u0438 \u0432\u0456\u0434\u0431\u0443\u0434\u0435\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0456\u0432 \u0437 web \u0434\u043e \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043b\u0456\u0454\u043d\u0442\u0430, \u0456 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u043f\u0435\u0440\u0435\u0439\u0434\u0435 \u0434\u043e \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u043a\u0440\u043e\u043a\u0443.\"", "\"passwordSymbolPatternNotValid\" : \"The password should contain capital and small letters, numbers and special characters%1$s\"", "\"dot\" : \".\"", "void cv::AlgorithmInfo::write(const cv::Algorithm*, cv::FileStorage&) const", "void cv::inRange(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "int cv::AlgorithmInfo::paramType(const char*) const", "KYRJKVYVRJ RZYNKNRZ", "\"rub\" : \"RUB\"", "\"fingerprint_error_timeout\" : \"Fingerprint time out reached. Try again.\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/opengl_interop_deprecated.cpp", "N2cv12ColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "axes.width >= 0 && axes.height >= 0 && thickness <= 255 && 0 <= shift && shift <= XY_SHIFT", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 6>; VecOp = cv::NoVec<int, unsigned char>]", "F^NLLLKKKILGNFPFRGSISLQUQXRZT[V[XZYXYVXUVU ]I]G\\FZFXGVITLPUNXLZJ[H[GZGX", "\"passwordPatternNotValid\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043c\u0430\u0454 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u0446\u0438\u0444\u0440\u0438 \u0456 \u043b\u0456\u0442\u0435\u0440\u0438 \u0443 \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u043c\u0443 \u0442\u0430 \u043d\u0438\u0436\u043d\u044c\u043e\u043c\u0443 \u0440\u0435\u0433\u0456\u0441\u0442\u0440\u0430\u0445\"", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnVec_32f]", "CPU part", "\"credit\" : \"\u041a\u0440\u0435\u0434\u0438\u0442\u0438\"", "contour1.checkVector(2) >= 0 && contour2.checkVector(2) >= 0 && (contour1.depth() == CV_32F || contour1.depth() == CV_32S) && contour1.depth() == contour2.depth()", "N2cv16TLSDataContainerE", "nlabels == n", "N2cv11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEE", "(src.type() == CV_8UC1 || src.type() == CV_8UC3) && src.type() == dst.type() && src.size() == dst.size() && src.data != dst.data", "MVQMNV OSPQQPSPTQTRSTSUTVUV", "F_JM[M[N JMJN[N JU[U[V JUJV[V", "JZRFR[ KFYF", "cv::Point2f cv::mapPointSpherical(const Point2f&, float, cv::Vec4d*, int)", "H\\YFKFKL WFK[ XFL[ YFM[ K[Y[YU LFKL MFKI NFKH PFKG T[YZ V[YY W[YX X[YU", "void cv::fillPoly(cv::InputOutputArray, cv::InputArrayOfArrays, const Scalar&, int, int, cv::Point)", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "I[WQWPVPVRXRXPWNUMRMONMQLTLVMYNZP[R[UZWW OONQMTMWNY RMPOOQNTNWOZP[", "St12ctype_bynameIcE", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F LPXP H[O[ U[\\[", "\"abc_activitychooserview_choose_application\" : \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\"", "A.size() == Size(3,3) && A.size() == R.size()", "\"password\" : \"\u041f\u0430\u0440\u043e\u043b\u044c\"", "H\\KFR[ LFRX YFR[ IFOF UF[F", "H[RLPLNKMINGQFTFXG[G]F XGVNTTRXPZN[L[JZIXIVJULUNV", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short unsigned int, float, float>; VResize = cv::VResizeCubic<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeCubicVec_32f16<-32768> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "I[LMR[ MMRY XMR[ JMPM TMZM", "\"internalErrorMessage\" : \"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u043d\u043e\u0432\u0430. \u0415\u0441\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0441\u044f - \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u0432 \u0431\u0430\u043d\u043a\"", "\"newPasswordMustContain\" : \"\u041d\u043e\u0432\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u043c\u0456\u0441\u0442\u0438\u0442\u0438:\"", "void cvExp(const CvArr*, CvArr*)", "\"newPassword\" : \"\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\"", "\"v7_preference_on\" : \"ON\"", "\"appDv_name\" : \"DVBank\"", "KZVMWKWOVMULSKQKOLNMNOOPQQTRVSWT NNOOQPTQVRWSWVVWTXRXPWOVNTNXOV", "\"parentDirectory\" : \"Back\"", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "LXVQUQURVRVQUPSOQOOPNRNUOWQXSXUWVV QOPPOROUPWQX", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_22VResizeLinearVec_32f16ILin32768EEEEEEE", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<unsigned char>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "St13basic_fstreamIcSt11char_traitsIcEE", "static cv::Ptr<cv::GeneralizedHough> cv::GeneralizedHough::create(int)", "MWRMNV RMVV PSTS", "J\\K[NZQXSVUSWOXKXIWGUFSGRHQJPOPTQXRZT[V[XZYY", "\"cancelPayment\" : \"\u0421\u043a\u0430\u0441\u0443\u0432\u0430\u0442\u0438 \u043f\u043b\u0430\u0442\u0456\u0436\"", "\"abc_shareactionprovider_share_with_application\" : \"\u041f\u043e\u0434\u0456\u043b\u0438\u0442\u0438\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u0434\u0430\u0442\u043e\u043a %s\"", "The key is too long", "void cv::GlArrays::setColorArray(cv::InputArray, bool)", "Utf-16", "H\\NFO[ OFPY \\FO[ LFRF XF^F", "MWOMOV UMOS QQUV", "\"google_maps_key\" : \"AIzaSyDeROaiqo1Qak7seBs6_dMzHtUU4NkOlPU\"", "JZNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX SRTSUWVXWXXW SRUSVWWX", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "void cvCartToPolar(const CvArr*, const CvArr*, CvArr*, CvArr*, int)", "\"abc_searchview_description_query\" : \"\u041f\u043e\u0448\u0443\u043a\u043e\u0432\u0438\u0439 \u0437\u0430\u043f\u0438\u0442\"", "F^KFK[ LGLZ MFM[ WFW[ XGXZ YFY[ HFPF TF\\F MPWP H[P[ T[\\[ IFKG JFKH NFMH OFMG UFWG VFWH ZFYH [FYG KZI[ KYJ[ MYN[ MZO[ WZU[ WYV[ YYZ[ YZ[[", "CvGraphScanner* cvCreateGraphScanner(CvGraph*, CvGraphVtx*, int)", "nelems <= (size_t)size.p[0]", "N2cv22RGB888toYUV420pInvokerILi0EEE", "H\\MFKPMNPMSMVNXPYSYUXXVZS[P[MZLYKWKVLUMUNVNWMXLX WPXRXVWX SMUNVOWRWVVYUZS[ LVLWMWMVLV MFWF MGUG MHQHUGWF", "LXPMNSNUOVRVTUUSWM", "KYTBTb UBUb NBUB NbUb", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "depth == CV_8S || depth == CV_16S || depth == CV_32S || depth == CV_32F || depth == CV_64F", "coeffs[i] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << lab_shift)", "H\\PBP_ TBT_ YIWGTFPFMGKIKKLMMNOOUQWRXSYUYXWZT[P[MZKX", "\"city24\" : \"\u0411\u0430\u043d\u043a24\"", "\"pinSetupCodeLimitText\" : \"(4 \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b 0\u20139)\"", "void cv::GlCamera::setProjectionMatrix(const cv::Mat&, bool)", "void cv::accumulateWeighted(cv::InputArray, cv::InputOutputArray, double, cv::InputArray)", "COI must be non-null in case of planar images", "H]QFLP QF[F QGYG PHUHYG[F LPMOPNSNVOWPXRXUWXUZQ[N[LZKYJWJULULWKWKV VPWRWUVXTZ SNUOVQVUUXSZQ[", "void cv::Mat::copyTo(cv::OutputArray, cv::InputArray) const", "RVRRUPVNVLUKTK", "\"keyAttachedSuccessfully\" : \"\u041a\u043b\u044e\u0447 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\"", "H\\LKLJMHNGPFTFVGWHXJXLWNUQK[Y[", "IZNMN[ ONOZ KMPMP[ WOWNVNVPXPXNWMUMSNQPPS K[S[ LMNN MMNO NZL[ NYM[ PYQ[ PZR[", "\"amountMustExceedZero\" : \"\u0421\u0443\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 0.00\"", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "H\\XFK[ YFL[ LFKLKFYF K[Y[YUX[", "\"bankid\" : \"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437\n\u0421\u0438\u0441\u0442\u0435\u043c\u0443 BankID \u041d\u0411\u0423\"", "St13runtime_error", "Null <sizes> pointer", "JZVFVVUYTZR[P[NZMYLVLT", "dx >= 0 && dy >= 0 && dx+dy == 1", "G\\LFL[ MFM[ WMMW RSX[ QSW[ IFMF TMZM I[P[ T[Z[", "N2cv12ColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "basic_string::erase", "j < nsrcs && src[j].depth() == depth", "MXRFRTST RFSFST RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "LXSOVRSU NRVR", "\"mustUpdateToNewVersion\" : \"In order for OTP Smart to work properly, it is necessary to update the add-on to the latest version.\"", "I[KMMMONPPU_VaWb MMNNOPT_UaWbYb ZMYOWRM]K`Jb", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short unsigned int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 3 && M0.cols == 3", "St16__numpunct_cacheIwE", "St18__moneypunct_cacheIwLb1EE", "void cvPow(const CvArr*, CvArr*, double)", ">f>RfR", "Null pointer", "H\\RFJ[ QIX[ RIY[ RFZ[ KYXY KZXZ J[Z[", "void cvTranspose(const CvArr*, CvArr*)", "KXQOOPNQMSMUNWPXRXTWUVVTVRUPSOQO QOOQNSNVPX RXTVUTUQSO", "N2cv16SymmColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "CvBox2D cvFitEllipse2(const CvArr*)", "\"currency_rate\" : \"\u041a\u0443\u0440\u0441\u0438 \u0432\u0430\u043b\u044e\u0442\"", "\"match\" : \"\u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u044e\u0442\u044c\"", "SG?5Q", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const std::vector<int>&)", "JZMRNPPOROSPSR QORPRRQUPWNXMXLWLVMVLW XPWQXQXPWOVOTPSRRURWSX QUQWRXTXVWWU", "KYPMTW TMPW MPWT WPMT", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<double, double, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "MWUHSJQMPPPTQWSZU\\ SJRLQPQTRXSZ", "\"menu\" : \"Menu\"", "LYPKRQPX QKSQ YKSQQX NKSK VK[K NXSX", "CvSeq* cvFindNextContour(CvContourScanner)", "Non-positive cols or rows", "\"newPassword\" : \"New password\"", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "but the setter was called with ", "MYWFUFSGRJR[ OMVM", "\"changeLocalWarning\" : \"\u042f\u0437\u044b\u043a \u0431\u0443\u0434\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\"", "N >= K", "MWOMOV OMUV UMUV", "depth == CV_8U || depth == CV_16U || depth == CV_32F", "N2cv18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEE", "\"continueAnyway\" : \"Continue anyway\"", "JZMLWRMX", "\"amountMustExceedZero\" : \"\u0421\u0443\u043c\u0430 \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u0431\u0456\u043b\u044c\u0448\u0435 0.00\"", "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F", "\"login_must_be_longer\" : \"\u041b\u043e\u0433\u0438\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0442 %1$d \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\"", "void cvMatchTemplate(const CvArr*, const CvArr*, CvArr*, int)", "\"disable_fingerprint\" : \"\u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c Fingerprint\"", "cntrl", "\"PROTOCOL\" : \"https\"", "\"operationAbsenceOfDebtCertificate\" : \"\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u0440\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438\"", "cn == 2 || cn == 3 || cn == 4", "\"generate_cert_text_step_5_view_request\" : \"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\"", "\"required\" : \"\u041f\u043e\u043b\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\"", "IZVKWL XKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ WKTVTWUXWXXWYU XKUVUWVX LOVO", "alignof ", "src.size == dst.size && src.type() == dst.type()", "bottomEdge", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF", "\"requisites\" : \"\u0420\u0435\u043a\u0432\u0456\u0437\u0438\u0442\u0438\"", "E_JMJ[ KMK[ GMNM KTOTRUSWSXRZO[G[ OTQURWRXQZO[ YMY[ ZMZ[ VM]M V[][", "G]KFKULXNZQ[S[VZXXYUYF", "char* icvYMLParseKey(CvFileStorage*, char*, CvFileNode*, CvFileNode**)", "CvSeq* cvCreateSeq(int, size_t, size_t, CvMemStorage*)", "\"isValidUntilDate\" : \"Valid till\"", "minAngle", "H]UJULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWSSWPYNZK[I[HZHXIWKWMXPZS[V[XZZX WFXGYIYMXPVSSVOYK[", "E_[O[NZNZP\\P\\N[MZMYNXPVUTXRZP[L[JZIXIUJSPORMSKSIRGPFNGMIMLNOPRTWWZY[[[\\Y\\X KZJXJUKSLR RMSI SKRG NGMK NNPQTVWYYZ N[LZKXKULSPO MINMQQUVXYZZ[Z\\Y", "cv::RGB2Lab_f::RGB2Lab_f(int, int, const float*, const float*, bool)", "\"sign_in\" : \"\u0412\u0445\u0456\u0434\"", "!mask.data || mask.type() == CV_8UC1", "LXRLRX LQMOWOXQ PWTW", "N2cv16ParallelLoopBodyE", "E]JMHLGJGIHGJFKFMGNINKMPLTJ[ LTOLQHRGTFVFXGYIYKXPVWVZW[X[ZZ[Y]V", " for ", "\"requisitesNoIbanModeMessage\" : \"\u0420/\u0441: %1$s\n\u0432 %2$s, \u041c\u0424\u041e %3$s,\n\u041f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044c: %4$s,\n\u041a\u043e\u0434 \u0415\u0413\u0420\u041f\u041e\u0423 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f: %5$s\"", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi1EEE", "\"paymentCurrencyBuySell\" : \"\u041a\u0443\u043f\u0456\u0432\u043b\u044f/\u043f\u0440\u043e\u0434\u0430\u0436 \u0432\u0430\u043b\u044e\u0442\u0438\"", "\"uploadCertificate\" : \"\u0412\u0456\u0434\u043f\u0440\u0430\u0432\u0438\u0442\u0438 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0456\u043d\u0448\u0438\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439\"", "MWRMRX OPPORLTOUP PORMTO", "The histograms have different sizes", "\"generate_cert_text_step_5_upload_cert\" : \"Transfer the key to another device\"", "void cv::sort(cv::InputArray, cv::OutputArray, int)", "\"pushRegistrationConfirmationMessage\" : \"\u0411\u0430\u0436\u0430\u0454\u0442\u0435 \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0442\u0438 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u0432\u0456\u0434 OTP Smart \u043d\u0430 \u0446\u0435\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439?\"", "MWNONNOMPMQNRPRV VOVNUMTMSNRP", "G\\HQIOKMNMONOQMWMYO[ MMNNNQLWLYMZO[Q[SZUXWT ZMV[U^SaPbMbKaJ`J_K^L_K` YMU[T^RaPb", "\"cashIn\" : \"\u041f\u0440\u0438\u0439\u043e\u043c \u0433\u043e\u0442\u0456\u0432\u043a\u0438\"", "J[SMPNNPMRMTNVPWRWUVWTXRXPWNUMSM OPUM NRVN MTWO NUXP OVWR PWVT", "CvSeq* icvApproximateChainTC89(CvChain*, int, CvMemStorage*, int)", "MWSKSLTLTKSK NROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "No parameter '%s' is found", "MWNPOPOV UPTSRUOV", "\"notData\" : \"\u043d\u0435\u043c\u0430\u0454 \u0434\u0430\u043d\u0438\u0445\"", "\"deposit\" : \"\u0414\u0435\u043f\u043e\u0437\u0438\u0442\u044b\"", "\"deposit\" : \"\u0414\u0435\u043f\u043e\u0437\u0438\u0442\u0438\"", "St5ctypeIcE", "\"fingerprint_error_canceled\" : \"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u043e\u043c \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430\"", "\"zxing_button_ok\" : \"OK\"", "\"choose_cert\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\"", "CvMat* cvReshape(const CvArr*, CvMat*, int, int)", "virtual std::string EmptyDeviceInfoFuncTable::name(int) const", "Accuracy flag is set and epsilon is < 0", "mean0.data == mean.data", "void cvCornerHarris(const CvArr*, CvArr*, int, int, double)", "edge_count", "\"length_from\" : \"\u2022 \u0434\u043b\u0438\u043d\u0430 \u043e\u0442 %1$d \u0434\u043e %2$d \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\"", "Bad input roi", "cv::GlBuffer::GlBuffer(cv::GlBuffer::Usage)", "H]QMONMPLRKUKXLZN[P[RZUWWTYPZM QMSMTNUPWXXZY[Z[", "OTODQGSKTPTTSYQ]O`", "!fixedType() || (CV_MAT_CN(mtype) == m.channels() && ((1 << CV_MAT_TYPE(flags)) & fixedDepthMask) != 0)", "I\\QMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM ONNPNTOV UVVTVPUN VOWNYMYNWN NUMVLXLYM[P\\U\\X]Y^ LYMZP[U[X\\Y^Y_XaUbObLaK_K^L\\O[", "I[M+MRMy N+NRNy M+X+ MyXy", "H\\MWMXNXNWMW WOVQURSSQSNRLPKMKLLINGQFSFVGXIYLYRXVWXUZR[O[MZLXLWMVNVOWOXNYMY MPLNLKMI VHWIXLXRWVVX QSORNQMNMKNHOGQF SFUGVIWLWSVWUYTZR[", "J[OUMULVLXMYOYPXPVNTMRMONMOLQKTKVLWMXOXRWTUVUXVYXYYXYVXUVU NMPLULWM", "\"length_from\" : \"\u2022 length from %1$d to %2$d characters\"", "St16invalid_argument", "double cv::arcLength(cv::InputArray, bool)", "LXRONU ROVU", "clipLimit", "The sequence has NULL storage pointer", "I[J[Z[", "NVRMRUSVTVUU PPTP", "void {anonymous}::GHT_Guil_Full::buildFeatureList(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<std::vector<{anonymous}::GHT_Guil_Full::Feature> >&, cv::Point2d)", "E`WMTKQKOLNMMOMRNTOUQVTVWT WMTLQLOMNONROTQUTUWT VKVSWUYVZV\\U]S]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[U[YZ VKWKWSXUZV YV[U\\S\\O[LZJYIWHTGQGNHLIKJJLIOIRJUKWLXNYQZUZYYYZ", "w.type() == type && (w.size() == cv::Size(nm,1) || w.size() == cv::Size(1, nm) || w.size() == cv::Size(nm, nm) || w.size() == cv::Size(n, m))", "\"sign\" : \"\u041f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\"", "void cvCopy(const void*, void*, const void*)", "cvSetReal* support only single-channel arrays", "\"mtrl_picker_out_of_range\" : \"Out of range: %1$s\"", "CV_TM_SQDIFF <= method && method <= CV_TM_CCOEFF_NORMED", "void cvReleaseMemStorage(CvMemStorage**)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "I[WPWQXQXPWNUMRMONMQLTLWMYNZP[R[UZWW RMPNNQMTMXNZ", "St17moneypunct_bynameIwLb0EE", "void cvFitLine(const CvArr*, int, double, double, double, float*)", "H[WQWPVPVRXRXPVNTMQMNNLPKSKULXNZQ[S[VZXX MPLRLVMX QMONNOMRMVNYOZQ[", "N2cv9RowFilterIffNS_10RowVec_32fEEE", "MWPHP\\ THT\\", "H[LSXSXQWOVNTMQMNNLPKSKULXNZQ[S[VZXX WSWPVN QMONMPLSLUMXOZQ[", "\"description\" : \"\u041e\u043f\u0438\u0441\"", "\"save_without_sign\" : \"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438\"", "\"dataToTransfered\" : \"Data to be transferred:\"", "H\\WPURRSQSNRLPKMKLLINGQFRFUGWIXMXRWWUZR[P[MZLXMXNZ WMVPSR WNUQRRQRNQLN PRMPLMLLMIPG LKNHQGRGUHWK SGVIWMWRVWTZ UYRZPZMY", "CvMat* cvGetRows(const CvArr*, CvMat*, int, int, int)", "\"generate_cert_password_hint\" : \"Enter key password\"", "Null data pointer", "KZQHQ\\ THT\\ WLVLVMWMWLUKPKNLNNOPVSWT NNOOVRWTWVVWTXQXOWNVNUOUOVNV", "MXQLQY TLTY OQVQ OTVT", "\"amountToMustExceedAmountFrom\" : \"\u0421\u0443\u043c\u0430 \"\u0414\u043e\" \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u0431\u0456\u043b\u044c\u0448\u0435 \u0441\u0443\u043c\u0438 \"\u0412\u0456\u0434\"\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/dxt.cpp", "void cvErode(const CvArr*, CvArr*, IplConvKernel*, int)", "sizes", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEE", "void checkMask(const cv::Mat&, const cv::Mat&)", "int cvGetImageCOI(const IplImage*)", "\"refuse_password_message\" : \"By refusing to change the password, the user agrees with risks associated with its possible compromise and confirms that the bank will not be liable for any direct or indirect damage resulting from or in any way connected with possible password compromise.\"", "virtual bool EmptyDeviceInfoFuncTable::deviceSupports(cv::gpu::FeatureSet) const", "\"signDocumentCertFingerprintDescription\" : \"Signing the document %1$s, %2$s by key %3$s, %4$s\"", "N2cv24KMeansPPDistanceComputerE", "MWWHVGTFQFOGNHMJMLNNOOUSVTWVWXVZU[S\\P\\N[MZ", "csz == 0 || csz == dims || (csz == 1 && _1d)", "\"demoMode\" : \"Demo mode\"", "the output array of labels must be 32sC1", "m.dims <= 2 && m.rows == m.cols", "H\\RFR[ PKMLLMKOKRLTMUPVTVWUXTYRYOXMWLTKPK", "m.dims <= 2", "\"enterPassword\" : \"\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0432\u0430\u0448\u043e\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\"", "H\\KFX[ LFY[ YFK[ IFOF UF[F I[O[ U[[[", "\"drawer_open\" : \"Open navigation drawer\"", "Closing \" is expected", "NULL or empty buffer", "void cvNot(const CvArr*, CvArr*)", "\"home\" : \"\u0413\u043e\u043b\u043e\u0432\u043d\u0430\"", "string literal", "\"generate_cert_text_step_1_next_button\" : \"\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c\"", "J[PKMUMWOXSXUWVUYK QKNUNWOX NKSK WK[K", "E_YGXHYIZHYGWFTFQGOINKMNLRJ[I_Ha TFRGPIOKNNLWK[J^I`HaFbDbCaC`D_E`Da _G^H_I`H`G_F]F[GZHYJXMU[T_Sa ]F[HZJYNWWV[U^T`SaQbObNaN`O_P`Oa IM^M", "MWQMWMNVTV", "NVUPOV PQQPSPTQ PUQVSVTU", "\"new_login_repeat\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0438 \u043b\u043e\u0433\u0456\u043d\"", "LYVKVX NKVK QQVQ NXVX", "void cv::AlgorithmInfo::read(cv::Algorithm*, const cv::FileNode&) const", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_12MorphRowFVecINS_7VMax32fEEEEE", "H\\PFMGLILLMNPOTOWNXLXIWGTFPF NGMIMLNN VNWLWIVG PFOGNINLONPO TOUNVLVIUGTF POMPLQKSKWLYMZP[T[WZXYYWYSXQWPTO MQLSLWMY WYXWXSWQ PONPMSMWNZP[ T[VZWWWSVPTO", "void cvSet1D(CvArr*, int, CvScalar)", "Bad new number of rows", "I[MVQUTTWRXPWNUMRMONMQLTLWMYNZP[R[UZWX RMPNNQMTMXNZ", "F]OFI[ PFJ[ TLRT LF[FZLZF MPSP F[U[WVT[", "\"save\" : \"Save\"", "void cv::SparseMat::erase(int, int, size_t*)", "have_ranges", "L[UUTSRRPRNSMTLVLXMZO[Q[SZTY VRTYPdOfMgLfLdMaP^S\\U[XY[V", "The total matrix width is not divisible by the new number of columns", "\"fingerprint_error_unable_to_process\" : \"\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443\"", "\"pdf_extract_card\" : \"Statement for card %1$s\"", "\"paymentConfirmation\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0441\u043f\u043b\u0430\u0442\u0438\"", "void cvWriteRawData(CvFileStorage*, const void*, int, const char*)", "\"paymentBank\" : \"\u0412 \u043c\u0435\u0436\u0430\u0445 \u0431\u0430\u043d\u043a\u0443\"", "The storage is not opened", "double cv::PSNR(cv::InputArray, cv::InputArray)", "F\\OFI[ PFJ[ TLRT LF[FZLZF MPSP F[M[", "OPENCV_TEMP_PATH", "void cv::bilateralFilter(cv::InputArray, cv::OutputArray, int, double, double, int)", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "\"newVersion\" : \"OTP Smart new Version\"", "cn == CV_MAT_CN(dstType) && ddepth >= sdepth", "\"passwordForYourPrivateKey\" : \"Password to your private key:\"", "\"newPasswordMustContain\" : \"The new password must contain:\"", "\"save\" : \"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\"", "src.checkVector(2, CV_32F) == 3 && dst.checkVector(2, CV_32F) == 3", "\"paymentInner\" : \"\u041c\u0435\u0436\u0434\u0443 \u0441\u0432\u043e\u0438\u043c\u0438 \u0441\u0447\u0435\u0442\u0430\u043c\u0438\"", "\"notData\" : \"\u043d\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0445\"", "JYNKNU OKNR NROPQOSOUPVQVTTVTXUYVYWX SOUQUTTV LKOK", "\"keyTransferTimeout\" : \"\u0427\u0430\u0441 \u043e\u0447\u0456\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430 \u0432\u0438\u0447\u0435\u0440\u043f\u0430\u043d\u043e. \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430 \u043f\u043e\u0447\u043d\u0456\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441 \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443.\"", "\"user_info\" : \"\u041a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\"", "void cvAddS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "\"download\" : \"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c\"", "\"minimalCardRepaymentError\" : \"Attention! Specified sum is less than minimum payment that possibly result in overdue debts.\"", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "J[KRLPMOOOPPPQNX NOOPOQMX PQQPSOUOWPWRVUVWWX UOVPVRUUUWVXXXYWZU", "\"setting\" : \"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\"", "CPU architecture", "L[LVNSPO SFL[ TFM[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = float; CastOp = cv::Cast<float, float>; VecOp = cv::FilterVec_32f; cv::Point = cv::Point_<int>]", "KYVLWKWOVLTKQKOLNMMPMSNVOWQXTXVWWU QKOMNPNSOVQX", "H\\PBP_ TBT_ XKXJWJWLYLYJXHWGTFPFMGKIKLLNOPURWSXUXXWZ LLMNOOUQWRXT MGLILKMMONUPXRYTYWXYWZT[P[MZLYKWKUMUMWLWLV", "Invalid numeric value (inconsistent explicit type specification?)", "int cv::countNonZero(cv::InputArray)", "getEdge(getEdge(getEdge(e,NEXT_AROUND_LEFT),NEXT_AROUND_LEFT),NEXT_AROUND_LEFT) == e", "hrange == 180 || hrange == 256", "int cvSeqPartition(const CvSeq*, CvMemStorage*, CvSeq**, CvCmpFunc, void*)", "Unsupported combination of source format (=%d), and destination format (=%d)", "\"noFileReader\" : \"\u041d\u0435 \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u0434\u043b\u044f \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0442\u044f \u0444\u0430\u0439\u043b\u0443\"", "PUSMSNTNTMSM QPRPSQSRRTRUSVTV", "G]OFOb UFUb JQZQ JWZW", "CvMatND* cvCreateMatNDHeader(int, const int*, int)", "</opencv_storage> tag is missing", "\"menu_settings\" : \"Settings\"", "void cv::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, int, cv::OutputArray, cv::OutputArray)", "levels > 0 && r_table.size() == static_cast<size_t>(levels + 1)", "H]QFLP QF[F QGVG[F LPMOPNSNVOWPXRXUWXUZR[O[LZKYJWJVKULVKW SNUOVPWRWUVXTZR[", "cv::Mat& cv::Mat::adjustROI(int, int, int, int)", "MWRMQNROSNRM RYQZR[SZRY", "virtual void EmptyDeviceInfoFuncTable::setDevice(int) const", "H1.size(i) == H2.size(i)", "virtual void cv::ColumnSum<int, short int>::operator()(const uchar**, uchar*, int, int, int)", "\"yesTurnItOn\" : \"\u0422\u0430\u043a, \u0443\u0432\u0456\u043c\u043a\u043d\u0443\u0442\u0438\"", "\"abc_capital_off\" : \"\u0412\u042b\u041a\u041b\"", "The transformation matrix should have 32fC1 or 64fC1 type", "G]LFL[ MFM[ IFUFXGYHZJZMYOXPUQMQ UFWGXHYJYMXOWPUQ I[Y[YVX[", "St5ctypeIwE", "NVSWRXQWRVSWSYQ[", "IZVKWLXLXKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ VOTVTWUXWXXWYU WOUVUWVX LOWO", "JZWMQMONNOMQMSNUOVQWWW MRUR", "\"pinSetupChangeCodeDescPart2\" : \"\u0422\u0430\u0440\u0438\u0444\u0456\u0432.\"", "IYJSKQLPNPOQOVPX MPNQNUOWPXQXSWTVUTVQVNULTKRKQLQNRPURWS QXSVTTUQUNTK", "JZNKNX OKOX WOOU RSVX SSWX LKOK TOYO LXQX TXYX", "\"confirm\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c\"", "The cost matrix size does not match to the signatures' sizes", "theta + theta_min (param1) must be <= theta_max (param2)", "\"pushMessage\" : \"Push messages\"", "void cvSort(const CvArr*, CvArr*, CvArr*, int)", "type == v2.type() && type == icovar.type() && sz == v2.size() && len == icovar.rows && len == icovar.cols", "float", "\"decide_later\" : \"\u0420\u0435\u0448\u0443 \u043f\u043e\u0437\u0436\u0435\"", "MWQQQSSSSQQQ RQRS QRSR", "((size_t)_src[i] & 15) == 0", "G\\LMLb MMMb MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IMMM IbPb", "void cvScalarToRawData(const CvScalar*, void*, int, int)", "scn == 4 && dcn == 4", "LYOEOFNFNEODQCTCVDWFVHTIQJOKNMNP TCUDVFUHTI NOONPNSOVOWN PNSPVPWNWM MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "Some collection type: CV_NODE_SEQ or CV_NODE_MAP must be specified", "St18basic_stringstreamIwSt11char_traitsIwESaIwEE", "LYPMQNQOPPOPNONNOMPMSNUNWMNV USTTTUUVVVWUWTVSUS", "September", "No OpenGL support", "MXTFRGQIQLRMSMTLTKSJRJQK RKRLSLSKRK RGQK QIRJ", "One of \"header_dt\" and \"header_user_data\" is there, while the other is not", "G\\QMNNLPKTKb MPLTLa QMONNOMSMb MWNYOZQ[S[VZXXYUYSXPVNSMQM WXXVXRWP S[UZVYWVWRVOUNSM KbMb", "\"requisitesIbanModeMessage\" : \"Account: %1$s\nin %2$s,\nRecipient: %3$s,\nRecipient TAX Id: %4$s\"", "void cvDiv(const CvArr*, const CvArr*, CvArr*, double)", "basic_string::assign", "J\\JVLSNROSOTNXM[ NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "KYYPXNVLSKQKNLLNKQKSLVNXQYSYVXXVYT YPWNUMSMQNPOOQOSPUQVSWUWWVYT", "mask.empty() || mask.type() == CV_8U", "\"city24\" : \"Bank24\"", "POSIX", "G]WMUTUXVZW[Y[[Y\\W XMVTVZ WMYMWTVX UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT NNLQKTKWLY PMNOMQLTLWMZN[", "\"message\" : \"Messages\"", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEE", "uchar* cv::SparseMat::ptr(const int*, bool, size_t*)", "\"fingerprint_acquired_too_fast\" : \"\u0412\u044b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0443\u0431\u0440\u0430\u043b\u0438 \u043f\u0430\u043b\u0435\u0446. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443\"", "The number of stored elements does not match to \"count\"", "LYUFO[ VFP[ RFYF L[S[", "void cv::RNG::fill(cv::InputOutputArray, int, cv::InputArray, cv::InputArray, bool)", "\"specialInputSymbols\" : \"~!@#$%^&*()_+'\\{\\}\\[\\]\\-,\\.:;\"", "Unknown operation", "scn == 1 && depth == CV_8U", "\"phoneAsLoginTitle\" : \"\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435!\"", "JZLMR[ LMMMRY XMWMRYNb XMR[ObNb", "CvSet* cvCreateSet(int, int, int, CvMemStorage*)", "F]JQLOONNMLNJQITIWJZK[M[OZQWRT IWJYKZMZOYQW QTQWRZS[U[WZYWZTZQYNXMWNYOZQ QWRYSZUZWYYW", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "Seed point is outside of image", "\"abc_searchview_description_clear\" : \"\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u0438 \u0437\u0430\u043f\u0438\u0442\"", "void cv::ogl::Arrays::setNormalArray(cv::InputArray)", "D`PFMGJIHLGOGSHVJYM[P\\T\\W[ZY\\V]S]O\\LZIWGTFPF RFR\\ GQ]Q", "\"notFoundExternalCertAuth\" : \"\u0421\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442 \u0432\u0456\u0434\u0445\u0438\u043b\u0435\u043d\u0438\u0439 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u043c\"", "G]HQIOKMNMONOPNTL[ MMNNNPMTK[ NTPPRNTMVMXNYOYRXWUb VMXOXRWWTb", "getauxval", "The combination of type=%d, dtype=%d and normType=%d is not supported", "\"dont_show_again\" : \"\u041d\u0435 \u043f\u043e\u043a\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u0437\u043d\u043e\u0432\u0443\"", "srcY >= startY", "G]WGVHWIXHWGUFRFOGMILLL[ RFPGNIMLM[ WMW[ XMX[ IMXM I[P[ T[[[", "MXQ[P[OZOYPXQXRYR[Q]P^N_ PYPZQZQYPY Q[Q\\P^", "MWRMPNOPOSPURVTUUSUPTNRM", "void cv::magnitude(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::convertScaleAbs(cv::InputArray, cv::OutputArray, double, double)", "MWMRMQNOONQMSMUNVOWQWR PNTN OOUO NPVP NQVQ MRWR", "E_JFJZ JFQ[ KFQX LFRX XFQ[ XFX[ YGYZ ZFZ[ GFLF XF]F G[M[ U[][ HFJG [FZH \\FZG JZH[ JZL[ XZV[ XYW[ ZY[[ ZZ\\[", "typeinfo name for ", "\"abc_shareactionprovider_share_with_application\" : \"Share with %s\"", "src.cols > 0 && src.rows > 0", "Non-continuous nD arrays are not supported", "dynamic_cast", "I\\MFM[ NGNZ MFYF NGYGYF NPTPTQ NQTQ NZYZY[ M[Y[", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "\"cancelPayment\" : \"\u0421ancel the payment\"", "G\\HQIOKMNMONOPNTJb MMNNNPMTIb NTOQQNSMUMWNXOYQYTXWVZS[Q[OZNWNT WNXPXTWWUZS[ FbMb", "KZPFPWQZS[U[WZXX QFQWRZS[ MMUM", "MXWFUGTHSJSLTMUMVLVKUJTJ UGTITJ TKTLULUKTK", "Parsing error", "\"common_google_play_services_install_title\" : \"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b Google\u00a0Play\"", "F^JMN[ KMNX RMN[ RMV[ SMVX ZMV[ GMNM WM]M", "N2cv11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEE", "N2cv9ColumnSumIddEE", "H]VFV[[[ WGWZ SFXFX[ VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ TFVG UFVH XYY[ XZZ[", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 8>; VecOp = cv::PyrDownVec_32f]", "void cv::convexityDefects(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::PCA::backProject(cv::InputArray, cv::OutputArray) const", "\"externalCards\" : \"\u041c\u043e\u0457 \u043a\u0430\u0440\u0442\u043a\u0438 \u0456\u043d\u0448\u0438\u0445 \u0431\u0430\u043d\u043a\u0456\u0432\"", "i == 0 || vec[i].first != vec[i-1].first", "\"connectExternalKey\" : \"\u041f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430 \u0437\u043e\u0432\u043d\u0456\u0448\u043d\u044c\u043e\u0433\u043e \u0426\u0421\u041a\"", "D:L0T", "scn + 1 == m.cols && (depth == CV_32F || depth == CV_64F)", "\"view_on_site\" : \" \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \"", "F^RJR[ JRZR J[Z[", "\"verify\" : \"Check\"", "void cv::minMaxLoc(const cv::SparseMat&, double*, double*, int*, int*)", "N2cv9AlgorithmE", "!src[i].empty() && src[i].dims <= 2 && src[i].rows == src[0].rows && src[i].type() == src[0].type()", "transaction clone for ", "void cv::GlCamera::setupProjectionMatrix() const", "\"remember_login\" : \"\u0417\u0430\u043f\u043e\u043c\u043d\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043d\"", "JZPKLX PKTX QKTU XKTX NKQK VKZK JXNX", "\"common_google_play_services_update_button\" : \"\u041e\u043d\u043e\u0432\u0438\u0442\u0438\"", "\"range_symbol\" : \"><\"", "MWNLVX", "cv::Mat cv::Mat::reshape(int, int) const", "\"connectCertFingerprintDescription\" : \"\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s, %2$s\"", "int cvMinEnclosingCircle(const void*, CvPoint2D32f*, float*)", "Lio/card/payment/CreditCard;", "hidden alias for ", "MWOMOV OMSMUNUQSROR", "virtual cv::Mat cv::_InputArray::getMat(int) const", "\"mtrl_exceed_max_badge_number_suffix\" : \"%1$d%2$s\"", "\"name\" : \"Name\"", "\"expand_button_title\" : \"\u0414\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u043e\"", "PTRMRQ", "\"abc_action_bar_home_description\" : \"Navigate home\"", "JZQCVMRTRU ULQS TITKPRRUUY W\\UYSXQXOYN[N]O_Ra W\\UZSYOYO]P_Ra SXPZN]", "\"common_google_play_services_unknown_issue\" : \"\u0423 \u0434\u043e\u0434\u0430\u0442\u043a\u0443 %1$s \u0432\u0438\u043d\u0438\u043a\u043b\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0456\u0437 \u0441\u0435\u0440\u0432\u0456\u0441\u0430\u043c\u0438 Google Play. \u041f\u043e\u0432\u0442\u043e\u0440\u0456\u0442\u044c \u0441\u043f\u0440\u043e\u0431\u0443.\"", "\"inbox\" : \"Inbox\"", "0 <= idx2 && idx2 < ptnum", "MWOMUM PQTR TQPR OVUV", "\"fingerprint_error_hw_not_available\" : \"\u0410\u043f\u0430\u0440\u0430\u0442\u043d\u0435 \u0437\u0430\u0431\u0435\u0437\u043f\u0435\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u0441\u043a\u0430\u043d\u0443\u0432\u0430\u043d\u043d\u044f \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0435.\"", "H]OKOJPJPLNLNJOHPGSFWFZG[I[KZMYNWOSPQQQSSTTT UFZG YGZIZKYMXNVO WFXGYIYKXMWNSPRQRSST PXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "NVQLRMSLRKQLQNSP", "\"abc_menu_delete_shortcut_label\" : \"Delete\"", "\"selectDateRangeTo\" : \"\u041f\u043e \u0434\u0430\u0442\u0443\u2026\"", "IplImage* cvInitImageHeader(IplImage*, CvSize, int, int, int, int)", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ NJNW OJOW LJSJVKWMWNVPSQOQ SJUKVMVNUPSQ LWQW SQTRUVVWWWXV SQURVVWW", "\"rao_pass_length_from\" : \"\u041e\u0442 %1$d \u0434\u043e %2$d \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\"", "\"languageChange\" : \"\u0417\u043c\u0456\u043d\u0430 \u043c\u043e\u0432\u0438\"", "\"user_setting\" : \"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"", "CvArr* cvRange(CvArr*, double, double)", "H\\UFIZ SJT[ THUZ UFUHVYV[ LUTU F[L[ Q[X[ IZG[ IZK[ TZR[ TYS[ VYW[", "N2cv18ResizeArea_InvokerIddEE", "Null string pointer", "\"pinSetupChangeCodeDescPart2\" : \"\u0422\u0430\u0440\u0438\u0444\u0430\u043c.\"", "\"doYouReallyWantToAbortProcessAndGoBack\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0456\u0432 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e. \u0412\u0438 \u0434\u0456\u0439\u0441\u043d\u043e \u0431\u0430\u0436\u0430\u0454\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0432\u0430\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438\u0441\u044c?\"", "I[TKQ\\ UKP\\ JRKPLONOOPOVPWSWUVWT MONPNTOWPXSXUWWTXRYO", "(cn == 1 && (mask.empty() || mask.type() == CV_8U)) || (cn >= 1 && mask.empty() && !minIdx && !maxIdx)", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "void cvWatershed(const CvArr*, CvArr*)", "F^JFZMJT JVZV J[Z[", "void glob_rec(const String&, const String&, std::vector<std::basic_string<char> >&, bool)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/featureselect.cpp", "H\\IR[R", "\"percent\" : \"%1$d %%\"", "JZMNMQ WNWQ MNWN MOWO MPWP MQWQ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "*N12_GLOBAL__N_121future_error_categoryE", "MXVNTMRMPNOPOSPURVTVVU", "St11__timepunctIwE", "pts && npts && ncontours >= 0 && 0 <= thickness && thickness <= 255 && 0 <= shift && shift <= XY_SHIFT", "H\\QFK[ RFL[ SFM[ NFVF H[W[YU OFRG PFQH TFRH UFRG LZI[ LYJ[ MYN[ LZO[ R[WZ T[XX V[YU", "vertex pointers coinside (or set to NULL)", "type == CV_32FC1 || type == CV_64FC1", "-0123456789", "JZMLWX MLONQOTOVNWMWKUKUMTO ONTO QOWM VKVN ULWL WXUVSUPUNVMWMYOYOWPU UVPU SUMW NVNY MXOX", "\"phone\" : \"\u0422\u0435\u043b\u0435\u0444\u043e\u043d\"", " closed", "N2cv5MatOpE", "cv::Scalar cv::sum(cv::InputArray)", "\"common_google_play_services_update_button\" : \"Update\"", "void cvCornerEigenValsAndVecs(const void*, void*, int, int)", "CvHistogram* cvMakeHistHeaderForArray(int, int*, CvHistogram*, float*, float**, int)", "F_JQ[Q[R JQJR[R", "\"topic\" : \"\u0422\u0435\u043c\u0430\"", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[``_[", "Simultaneous change of shape and number of channels is not supported. Do it by 2 separate calls", "G]RRTUUVWWYW[V\\U]S]Q\\O[NYMWMUNTOPUOVMWKWIVHUGSGQHOINKMMMONPORR", "MXRXQYQZR[S[TZTYSXRX RYRZSZSYRY", "void cvOr(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "JYKRLPMOOOPPPQM\\ NOOPOQL\\ PQROTOVPWRWTVVUWSXQXOVOT TOVQVTUVSX J\\O\\", "ccn == 1 || delta == 0", "KYTFQQPUPXQZR[T[VYWW UFRQQUQZ TFVFRTQX NMXM", "Resultant image must have 32fC1 type", "\"common_signin_button_text_long\" : \"Sign in with Google\"", "N2cv9ColumnSumIisEE", "(icvGetRectSubPix_8u32f_C1R( (uchar*)src->data.ptr, src->step, size, src_buffer, (win_w + 2) * sizeof( src_buffer[0] ), cvSize( win_w + 2, win_h + 2 ), cI )) >= 0", "Invalid index", "St14error_category", "\"notFoundExternalCertAuth\" : \"The certificate is rejected by system administrator\"", "\"fingerprint_error_lockout\" : \"\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u0437\u0436\u0435\"", "Internal error", "\"fingerprint_acquired_too_slow\" : \"\u0412\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u043b\u0438 \u043f\u0430\u043b\u0435\u0446 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\"", "The number of pyramid levels is too large or negative", "\"pdf_extraction\" : \"PDF statement\"", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "\"password_force_change_message\" : \"\u0422\u0435\u0440\u043c\u0456\u043d \u0434\u0456\u0457 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0432\u0445\u0456\u0434 \u0434\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0438 \u0437\u0430\u043a\u0456\u043d\u0447\u0438\u0432\u0441\u044f. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0437\u043c\u0456\u043d\u0438\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\"", "\"toEdit\" : \"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\"", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 8>; VecOp = cv::NoVec<float, float>]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = int; uchar = unsigned char]", "G]LFL[ MGMZ IFNFN[ WNNW RSY[ RTX[ QTW[ TM[M I[Q[ T[[[ JFLG KFLH UMWN ZMWN LZJ[ LYK[ NYO[ NZP[ WYU[ VYZ[", "CvSeq* cvPointSeqFromMat(int, const CvArr*, CvContour*, CvSeqBlock*)", "M[MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUTVQV QVSWTZU[V[XZYY[V", "(img.depth() == CV_8U || img.depth() == CV_32F) && img.type() == templ.type()", "nimages > 0 && dims > 0", "Empty type name", "basic_filebuf::underflow codecvt::max_length() is not valid", "\"abc_menu_ctrl_shortcut_label\" : \"Ctrl\u00a0+\"", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "LXPFUL PFOGUL", "\"common_google_play_services_enable_button\" : \"\u0423\u0432\u0456\u043c\u043a\u043d\u0443\u0442\u0438\"", "(Lio/card/payment/DetectionInfo;)V", "Unsupported data type (=%d)", "G^ZH[H\\F[L[JZHYGVFRFOGMIMLNNPPVSWUWXVZ NLONVRWT OGNINKOMUPWRXTXWWYVZS[O[LZKYJWJUI[JYKY", "v[j].empty()", "D`RFNOKUIXGZE[C[BZBXCWDXCY RFPMOQNVNZP[ RFQJPOOVOZP[ [FWORXP[ [FYMXQWVWZY[Z[\\Z^X [FZJYOXVXZY[", "src.rows == src.cols", "\"menu_greetings\" : \"Good afternoon,\"", "Array should be CvMat or IplImage", "\"new_login_repeat\" : \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043d\"", "\"fingerprint_acquired_insufficient\" : \"Couldn't process fingerprint. Please try again.\"", "virtual bool EmptyDeviceInfoFuncTable::supports(int, cv::gpu::FeatureSet) const", "The image data is not found in file storage", "H\\JFR[ JFKFRX ZFYFRX ZFR[", "H[LFL[ LFYF LPTP L[Y[", "F^IGJKKMMOPPTPWOYMZK[G IGJJKLMNPOTOWNYLZJ[G PONPMQLSLVMXOZQ[S[UZWXXVXSWQVPTO PPNQMSMVNY VYWVWSVQTP", "KZOPNQMSMUNWPXRXUWWUXRXPWOUOTPSRRUO\\ MUNVPWRWUVWTXR XQWPUPSR RUQXP\\", "\"confirmWithdrawalCard\" : \"\u00ab%1$s\u00bb \u0441onfirm the withdrawal from the card %2$s\"", "LXLPNRQSSSVRXP", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/geometry.cpp", " restrict", "the value at (%d, %d)=%g is out of range", "centers.depth() == data.depth()", "H\\VIVJWJWIVI WHVHUIUJVKWKXJXIWGUFRFOGMILKKOKULXNZQ[S[VZXXYUYTXQVOSNQNOONPMR NIMKLOLUMXNY WXXVXSWQ RFPGOHNJMNMUNXOZQ[ S[UZVYWVWSVPUOSN", "void cv::log(cv::InputArray, cv::OutputArray)", "\"choosePhotoSource\" : \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0444\u043e\u0442\u043e\"", "H]OKOJPJPLNLNJOHPGSFVFYGZIZKYMWOMUKWI[ XGYIYKXMVOSQ VFWGXIXKWMUOMU JYKXMXRYWYXX MXRZWZ MXR[U[WZXXXW", "GMM::GMM(cv::Mat&)", "cv::GlTexture::GlTexture(cv::Size, int)", "\"lowercase_letters\" : \"\u2022 lowercase letters\"", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItEEEE", "\"status_bar_notification_info_overflow\" : \">999\"", "cv::Mat cv::cvarrToMat(const CvArr*, bool, bool, int)", "void cvStartWriteSeq(int, int, int, CvMemStorage*, CvSeqWriter*)", "data[i].size() == size && data[i].type() == type", "\"generate_cert_text_step_5_open_cert\" : \"\u041f\u0435\u0440\u0435\u0433\u043b\u044f\u043d\u0443\u0442\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\"", "cv::gpu::GpuMat& cv::gpu::GpuMat::setTo(cv::Scalar, const cv::gpu::GpuMat&)", "void cvNormalizeHist(CvHistogram*, double)", "gfffgfffgfffgfff", "MWQMONOPQQSQUPUNSMQM QQOROUQVSVUUURSQ", "angleThresh", "\"cashIn\" : \"\u041f\u0440\u0438\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u043d\u044b\u0445\"", "N2cv17warpAffineInvokerE", "\"certificate\" : \"Certificate\"", "delete[] ", "double cv::norm(const cv::SparseMat&, int)", "I[UMWNXOYOXNUMRMONMPLSLUMXOZR[U[XZYYXYWZU[ NPMSMUNX RMPNOONRNVOYPZR[ NTTUUTTSNT NTTT", "locale::_S_normalize_category category not found", "void cvSetHistBinRanges(CvHistogram*, float**, int)", "points.checkVector(2, CV_32S) >= 0", "St19basic_istringstreamIcSt11char_traitsIcESaIcEE", "H\\LFL[ MGM[L[ LFUFWGXHYJYMXOWPUQMQ MGUGWHXJXMWOUPMP", "posThresh", "NVQFRGSFREQF RMR[", "Some of essential sequence attributes are absent", "I[KMMMOOU`WbYb ZMYOWRM]K`Jb", "void cvAbsDiffS(const CvArr*, CvArr*, CvScalar)", "\"atc\" : \"\u0426\u0456\u043b\u043e\u0434\u043e\u0431\u043e\u0432\u043e\"", "\"pref_syncConnectionTypes_default\" : \"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\"", "\"abc_prepend_shortcut_label\" : \"\u041c\u0435\u043d\u044e\u00a0+\"", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "MWR[QZRYSZS\\R^Q_", "\"errorTryAgain\" : \"\u0412\u0438\u043d\u0438\u043a\u043b\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0430. \u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0441\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0449\u0435 \u0440\u0430\u0437 \u0430\u0431\u043e \u0437\u0432\u0435\u0440\u043d\u0456\u0442\u044c\u0441\u044f \u0434\u043e \u0431\u0430\u043d\u043a\u0443.\"", "H]QMQ[ RMR[ LMKRKMUM RTVTYUZWZXYZV[N[ VTXUYWYXXZV[", "non-transaction clone for ", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/linefit.cpp", "Null element name", "void cvAdaptiveThreshold(const void*, void*, double, int, int, int, double)", "\"search_amount\" : \"Search by amount\"", "\"common_google_play_services_notification_ticker\" : \"\u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 Google\u00a0Play\"", "\"useFingerpintInsteadKey\" : \"Use Fingerprint instead of private key password entering\"", "F_JOJX KOKX KRLPNOPORPSRSX POQPRRRX SRTPVOXOZP[R[X XOYPZRZX HOKO HXMX PXUX XX]X", "\"choose\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/array.cpp", "[abi:", "srcRoi.x >= 0 && srcRoi.y >= 0 && srcRoi.width >= 0 && srcRoi.height >= 0 && srcRoi.x + srcRoi.width <= src.cols && srcRoi.y + srcRoi.height <= src.rows", "void cv::bilateralFilter_8u(const cv::Mat&, cv::Mat&, int, double, double, int)", "PUTMQV", "\"currency_rate\" : \"Currency rates\"", "float64", "edgeDst(o_next) == edgeOrg(d_prev)", "\"v7_preference_on\" : \"\u0412\u041a\u041b.\"", "\"account\" : \"\u041c\u043e\u0438 \u0441\u0447\u0435\u0442\u0430\"", "void cv::AlgorithmInfo::addParam_(cv::Algorithm&, const char*, int, void*, bool, cv::Algorithm::Getter, cv::Algorithm::Setter, const string&)", "\"fingerprint_error_no_space\" : \"\u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a, \u0443\u0434\u0430\u043b\u0438\u0442\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439\"", "MXQMNV QMTV WMTV", "src && nsrcs > 0 && dst && ndsts > 0 && fromTo && npairs > 0", "N2cv15PythonFormatterE", "\"numbers\" : \"\u2022 \u0446\u0438\u0444\u0440\u0438\"", "\"approveWithSmsMessage\" : \"\u0414\u043b\u044f \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0446\u0456\u0454\u0457 \u0434\u0456\u0457 \u0432\u0432\u0435\u0434\u0456\u0442\u044c \u043a\u043e\u0434 \u0437 SMS\"", "Number of dimensions is out of range", "H\\WMWb XMXb WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ Tb[b", "KZMHX\\", "((int)lbScalar ^ (int)ubScalar) == 0", "depth == CV_8U || depth == CV_16U || depth == CV_16S || depth == CV_32F || depth == CV_64F", "\"gotoPlayMarket\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0434\u043e Google Play\"", "void cv::divSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "\"demoMode\" : \"\u0414\u0435\u043c\u043e\u2013\u0440\u0435\u0436\u0438\u043c\"", "D`H>Hf I>If M>Mf QBSBSDQDQAR?T>W>Y?[A\\D\\I[LYNWOUOSNRLQNOQNROSQVRXSVUUWUYV[X\\[\\`[cYeWfTfReQcQ`S`SbQb RBRD QCSC Y?ZA[D[IZLYN RLRNPQNRPSRVRX YVZX[[[`ZcYe R`Rb QaSa", "w>=0 && revw>=0", "I[NFMGMM NGMM NFOGMM WFVGVM WGVM WFXGVM", "H\\LJLKMKMJLJ LIMINJNKMLLLKKKJLHMGPFTFWGXHYJYLXNUPPRNSLUKXK[ WHXJXLWN TFVGWJWLVNTPPR KYLXNXSYWYYX NXSZWZXY NXS[W[XZYXYV", "CvMat* cvGetAffineTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "\"newPayment\" : \"\u041d\u043e\u0432\u044b\u0439 \u043f\u043b\u0430\u0442\u0435\u0436\"", "void cv::setSize(cv::Mat&, int, const int*, const size_t*, bool)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvSeq*; CvSeq = CvSeq]", "throw ", "G][FH[ \\FI[ OFLLNF\\F H[V[XUU[", "unsigned char", "F^JFJ[ JFR[ ZFR[ ZFZ[", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "virtual bool EmptyDeviceInfoFuncTable::hasBin(int, int) const", "F`PFP[ QFQ[ IFHLHFTF QPXP[Q\\R]T]W\\Y[ZX[M[ XPZQ[R\\T\\W[YZZX[", "\"clear_text_end_icon_content_description\" : \"Clear text\"", "void cv::SparseMat::convertTo(cv::SparseMat&, int, double) const", "IYJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVSYR[ WOUVTYR[P\\M\\L[M[N\\", "For fast convolution/correlation use 2-column matrix or single-row matrix instead", "counters[k] != 0", "\"latin_simbol_lower_case\" : \"\u041b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435\"", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, float>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "Null double array pointer", "\"createNewMessage\" : \"New message\"", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF NXOVQURUTVUXV^W`Y`Z^Z\\ V\\W^X_Y_ UXW]X^Y^Z]", "F^NMLNJPISIWJYKZM[O[QZRYSWSTRSQTQWRYSZU[W[YZZY[W[SZPXNVM KPJSJWKY RTRX YYZWZSYP NMLOKRKWLZM[ W[XZYWYRXOVM", "\"numberText\" : \"\u041d\u043e\u043c\u0435\u0440\"", "F\\KFK[ LFL[ YFLS QOY[ POX[ HFOF UF[F H[O[ U[[[", "St13basic_istreamIwSt11char_traitsIwEE", "NULL memory storage is passed - the loaded dynamic structure can not be stored", "I[KKYY QXUXYYXUXQ UXXXXU", "H]TBL_ YBQ_ ZJYKZL[K[JZHYGVFRFOGMIMKNMONVRXT MKOMVQWRXTXWWYVZS[O[LZKYJWJVKULVKW", "JZMJLM XJWM PPOS UPTS MVLY XVWY MKWK MLWL PQTQ PRTR MWWW MXWX", "void cv::calcBackProject(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, const float**, double, bool)", "I[RFJ[ RFZ[ MTWT", "ifunc != 0", "double cv::determinant(cv::InputArray)", "H]TFQGOIMLLNKRKVLYMZO[Q[TZVXXUYSZOZKYHXGVFTFRHRKSNUQWSZU\\V", "C.type() == type && (((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))", "H\\JGKFMFOGQIXXYZZ[ OHPIWXXY MFNGOIVXXZZ[[[ RMJZJ[K[RM", "create() called for the missing output array", "void cv::fillPoly(cv::Mat&, const Point**, const int*, int, const Scalar&, int, int, cv::Point)", "JZMSRPWS MSRQWS", "cv::Luv2RGB_f::Luv2RGB_f(int, int, const float*, const float*, bool)", "\"empty_file_error\" : \"The file %1$s is empty. It is impossible to put an empty file.\"", "M.size() == M0.size()", "Unknown interpolation method", "N2cv11_InputArrayE", "((flags & CV_COVAR_ROWS) != 0) ^ ((flags & CV_COVAR_COLS) != 0)", "\"new_login\" : \"\u041d\u043e\u0432\u0438\u0439 \u043b\u043e\u0433\u0456\u043d\"", "H]KFRV LFSV ZFSVQYPZN[M[LZLYMXNYMZ IFOF VF\\F", "void cvDFT(const CvArr*, CvArr*, int, int)", "F\\HRINKMMMONPOQRRYSb IOKNMNOOPP HRIPKOMOOPPQQTRYRa XMWPVRTUSWR[Qb YMWQ ZMYOWRTVSXR[ XMZM QbSb", "int cvSeqElemIdx(const CvSeq*, const void*, CvSeqBlock**)", "Unknown Histogram type", "void cvStartReadSeq(const CvSeq*, CvSeqReader*, int)", "MXRFQGQIRQ RFRTST RFSFST SFTGTISQ RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "pts && npts && ncontours >= 0 && 0 <= shift && shift <= XY_SHIFT", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZQ[O\\N^Na TTUUVWUYTZ N`O_P_S`V`W_ P_SaVaW_W^", "void* IntGetProcAddress(const char*)", "void cv::GlFont::draw(const char*, int) const", "I[KFYF OPUP K[Y[", "Invalid filename", "\"qr_scan_code\" : \"Scan QR code\"", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IYJWLVNVPWTZV[X[ZZ[W IYJVLUNUPVTYVZXZZY[W", "\"works_on_weekends\" : \"\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435\"", "H]NFRPO[ OFSPP[ ]FSP LFRF YF_F L[S[", "\"send\" : \"\u0412\u0456\u0434\u043f\u0440\u0430\u0432\u0438\u0442\u0438\"", "void cvWriteComment(CvFileStorage*, const char*, int)", "\"fingerprint_hint\" : \"\u041a\u043e\u0441\u043d\u0438\u0442\u0435\u0441\u044c \u0441\u0435\u043d\u0441\u043e\u0440\u0430\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/include/opencv2/core/operations.hpp", "\"fieldValueWrongSymbols\" : \"Entered data does not match the requirements\"", "KXTFTHVHVFTF UFUH TGVG LQMOOMQMRNSPSSQX RNRRQVQZ RPPUPXQZR[T[VYWW", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && src.type() == CV_8U)", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "Invalid data type specification", "void cv::Mat::pop_back(size_t)", "The function can not solve under-determined linear systems", "Maximal scale to detect.", "p == evects0.data", "\"not_set\" : \"Not set\"", "start slice index is out of range", "H\\XMWMW\\V_U`SaQaO`N_L_ XMX\\W_UaSbPbNaL_ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "PTQPPQPSQTSTTSTQSPQP RQQRRSSRRQ", "PF SdF", "\"pdf_registry\" : \"List of documents for account %1$s\"", "H]XMT[S^QaOb YMU[S_ XMZMV[T_RaObLbJaI`I^K^K`J`J_ VTVQUNSMQMNNLQKTKVLYMZO[Q[SZTYUWVT NOMQLTLWMY QMOONQMTMWNZO[", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "H[LFL[M[ LFMFM[ XMWMMW XMMX PTV[X[ QSX[", "srcA.size == dst.size && srcA.type() == dst.type()", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::SymmColumnVec_32f16s]", "void cv::cartToPolar(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "The destination matrix should be continuous and have a single row or a single column", "Input array is not a valid matrix", "KYTMRY MQNPOPPQPUQVTVUUVSWP", "l.isContinuous()", "\"service\" : \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\"", "void cv::makeRNGKey()", "std::abs(more - less) <= 1", "cv::error()", "H]XMVTUXUZV[Y[[Y\\W YMWTVXVZW[ VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ", "Unknown/unsupported color conversion code", "MWRYQZR[SZRY", "JZSBUEVHWLWQVUTYR\\O_LaJb VHVPUUSYQ\\ SBTDUGVP VHUQTUSXRZP]M`Jb", "F^NVLUKUIVHXHYI[K\\L\\N[OYOXNVKRJOJMKJMHPGTGWHYJZMZOYRVVUXUYV[X\\Y\\[[\\Y\\X[VYUXUVV JMKKMIPHTHWIYKZM", "iwmmxt", "\"existingCertificateFailureType\" : \"\u041a\u043b\u044e\u0447 \u0415\u0426\u041f, \u0449\u043e \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u0446\u044c\u043e\u043c\u0443 \u043f\u0440\u0438\u0441\u0442\u043e\u0440\u043e\u0457, \u0437\u0430\u0441\u0442\u0430\u0440\u0456\u0432. \u0417 \u043c\u0456\u0440\u043a\u0443\u0432\u0430\u043d\u044c \u0431\u0435\u0437\u043f\u0435\u043a\u0438 \u0432\u0456\u043d \u0431\u0443\u0434\u0435 \u0432\u0438\u0434\u0430\u043b\u0435\u043d\u0438\u0439. \u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043d\u043e\u0432\u0438\u0439 \u043a\u043b\u044e\u0447 \u0447\u0435\u0440\u0435\u0437 web-\u043a\u043b\u0456\u0454\u043d\u0442 \u0430\u0431\u043e \u0448\u043b\u044f\u0445\u043e\u043c \u043a\u043e\u043f\u0456\u044e\u0432\u0430\u043d\u043d\u044f \u0444\u0430\u0439\u043b\u0456\u0432 \u043a\u043b\u044e\u0447\u0430 \u0442\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u0430 \u0434\u043e \u043f\u0430\u043c'\u044f\u0442\u0456 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044e.\"", "KYUBSDQGOKNPNTOYQ]S`Ub QHPKOOOUPYQ\\ SDRFQIPOPUQ[R^S`", "LWPKPVRXTXUWUV QKQVRX NOTO", "Images with planar data layout are not supported", "\"extract\" : \"\u0412\u0438\u043f\u0438\u0441\u043a\u0430\"", "cv::Mat cv::getAffineTransform(cv::InputArray, cv::InputArray)", "unknown function", "_param2.channels() == 1 && (((_param2.rows == 1 || _param2.cols == 1) && (_param2.rows + _param2.cols - 1 == cn || _param2.rows + _param2.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))) || (_param2.rows == cn && _param2.cols == cn && disttype == NORMAL))", "Could not find the/an object in file storage", "\"latin_simbol_upper_case\" : \"\u041b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435\"", "\"certificate\" : \"\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\"", "N2cv16SymmColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "int icvFindContoursInInterval(const CvArr*, CvMemStorage*, CvSeq**, int)", "void cv::completeSymm(cv::InputOutputArray, bool)", "\"settingsConnection\" : \"Connection settings\"", "St20bad_array_new_length", "\"fieldValueWrongSymbols\" : \"\u0412\u0432\u0435\u0434\u0435\u043d\u0456 \u0434\u0430\u043d\u0456 \u043d\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u044e\u0442\u044c \u0432\u0438\u043c\u043e\u0433\u0430\u043c\"", "android/graphics/Rect", "cv::Mat::Mat(const IplImage*, bool)", "virtual void EmptyFuncTable::setTo(cv::gpu::GpuMat&, cv::Scalar, const cv::gpu::GpuMat&, cudaStream_t) const", "void cv::TLSContainerStorage::releaseKey(int, cv::TLSDataContainer*)", "NULL storage pointer ", "The file storage is opened for reading", "NVSLRMSNTMSL QROXOZQ[SZTYVV RRPXPZQ[", "\"confirmTransferingToBankID\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u043c\u043e\u0457\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0434\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0438 BankID\"", "\"required\" : \"Field is required\"", "\"common_google_play_services_unsupported_text\" : \"%1$s won't run without Google Play services, which are not supported by your device.\"", "\"fab_transformation_sheet_behavior\" : \"com.google.android.material.transformation.FabTransformationSheetBehavior\"", "radius >= 0 && thickness <= 255 && 0 <= shift && shift <= XY_SHIFT", "\"manageKeysHeader\" : \"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0430\u043c\u0438\"", "dst.data == dst0.data", "\"full_screen\" : \"\u041d\u0430 \u0432\u0435\u0441\u044c \u044d\u043a\u0440\u0430\u043d\"", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "\"i_understand\" : \"\u042f \u0443\u0441\u0432\u0456\u0434\u043e\u043c\u043b\u044e\u044e\"", "\"copy\" : \"Copy\"", "map matrix is not valid", "F^JJQJUKWLYNZQZSYVWXUYQZJZ QFQ^", "int cv::normHamming(const uchar*, int, int)", "KYOMO[P[ OMPMP[ PSQPSNUMXM PSQQSOUNXNXM", "G^QMNNLPKRJUJXKZN[P[RZUWWTYPZM QMONMPLRKUKXLZN[ QMSMUNVPXXYZZ[ SMTNUPWXXZZ[[[", "void cv::getSobelKernels(cv::OutputArray, cv::OutputArray, int, int, int, bool, int)", "\"privateKeySuccessfullyDisconnected\" : \"Fingerprint for the key %1$s %2$s is successfully disconnected\"", "\"changeGcmMessage\" : \"\u0421\u0435\u0439\u0447\u0430\u0441 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e\u0442 OTP Smart \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e. \u0425\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u044d\u0442\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e? (\u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0443\u0442)\"", "reference temporary #", "MWRLRW OTPURXTUUT PURWTU", "img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2", "\"secure_host\" : \"otpsmart.com.ua\"", "MWRMQNPPOSOVPWRWSVTTUQUNTMRM PRTR", "operator ", "\"common_google_play_services_enable_text\" : \"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \"%1$s\" \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u044b Google\u00a0Play.\"", "\"noFileReader\" : \"\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u0444\u0430\u0439\u043b\u0430\"", "blockSize % 2 == 1 && blockSize > 1", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEE", "\"abc_shareactionprovider_share_with\" : \"\u041f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e\"", "flipped", "MWOMOV OMSMUNUPSQ OQSQURUUSVOV", "\"digits_password\" : \"\u0426\u0438\u0444\u0440\u044b\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/matmul.cpp", "\"refuse_change\" : \"\u0412\u0456\u0434\u043c\u043e\u0432\u0438\u0442\u0438\u0441\u044f \u0432\u0456\u0434 \u0437\u043c\u0456\u043d\u0438\"", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = unsigned char]", "X.size() == Angle.size() && X.type() == Angle.type()", "OVRPQSQURVSVTU", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMRbSb RMSMSb", "\"phoneAsLoginTitle\" : \"\u0423\u0432\u0430\u0433\u0430!\"", "void cv::GlArrays::unbind() const", "F^RNQKPINHMHKIJKJOKRLTNWR\\ RNSKTIVHWHYIZKZOYRXTVWR\\", "\"openApp\" : \"Open OTP Smart Business\"", "\"archive\" : \"\u041f\u043b\u0430\u0442\u0435\u0436\u0438\"", "elements with keys can not be written to sequence", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "One of new dimension sizes is non-positive", "\"operationAbsenceOfDebtCertificate\" : \"\u0414\u043e\u0432\u0456\u0434\u043a\u0430 \u043f\u0440\u043e \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456\u0441\u0442\u044c \u0437\u0430\u0431\u043e\u0440\u0433\u043e\u0432\u0430\u043d\u043e\u0441\u0442\u0456\"", "(lutcn == cn || lutcn == 1) && lut.total() == 256 && lut.isContinuous() && (src.depth() == CV_8U || src.depth() == CV_8S)", "KZTKPX UKQX PKNNOKZKYNYK NXSX", "cv::GlCamera::GlCamera()", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "\"common_google_play_services_wear_update_text\" : \"New version of Google Play services needed. It will update itself shortly.\"", "char* icvXMLParseValue(CvFileStorage*, char*, CvFileNode*, int)", "H\\TMVNXPYPYOWNTMPMMNLOKQKSLUNWPXRYSZT\\T^S_Q_O^P^Q_ MOLQLSMUOW PMNNMPMSNURY YPXO", "\"choosePhoto\" : \"\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0444\u043e\u0442\u043e\"", "OXXROMOWXR URPO URPU RRPQ RRPS", "\"atmosphere\" : \"Atmosphere\"", "LXOSVSVRUPSOQOOPNRNUOWQXSXUWVV USUQSO QOPPOROUPWQX", "cv::GlFont::GlFont(const string&, int, cv::GlFont::Weight, cv::GlFont::Style)", "\"generate_cert_text_step_2\" : \"\u0412\u0438\u0433\u0430\u0434\u0430\u0439\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0432\u0430\u0448\u043e\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430. \u041d\u0456\u043a\u043e\u043c\u0443 \u043d\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u044f\u0439\u0442\u0435 \u0441\u0432\u0456\u0439 \u043f\u0430\u0440\u043e\u043b\u044c! \u0421\u043f\u0456\u0432\u0440\u043e\u0431\u0456\u0442\u043d\u0438\u043a\u0438 \u0431\u0430\u043d\u043a\u0443 \u043d\u0456\u043a\u043e\u043b\u0438 \u043d\u0435 \u043f\u0440\u043e\u0441\u0438\u0442\u0438\u043c\u0443\u0442\u044c \u0432\u0430\u0441 \u043d\u0430\u0437\u0432\u0430\u0442\u0438 \u0447\u0438 \u043d\u0430\u0434\u0456\u0441\u043b\u0430\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0430\u0431\u043e \u043f\u0430\u0440\u043e\u043b\u044c \u00ab\u0437 SMS\u00bb\"", "N2cv10BaseFilterE", "\"disconnectExternalAttention\" : \"\u041f\u0440\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d \u043e\u0442 \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438, \u0438 \u0432\u044b \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445. \u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447?\"", "!fixedSize() || len == ((vector<uchar>*)v)->size() / esz", "so it should be get as integer, unsigned integer, uint64, unsigned char, float or double value, ", "MWMRMSNUOVQWSWUVVUWSWR", "mask must have as many rows and cols as img", "KYUBNRUb", "N2cv9RowFilterIddNS_8RowNoVecEEE", "cv::GlBuffer::GlBuffer(int, int, int, cv::GlBuffer::Usage)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::RowVec_32f]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = float; VecOp = cv::RowVec_16s32f]", "(best_labels.cols == 1 || best_labels.rows == 1) && best_labels.cols*best_labels.rows == N && best_labels.type() == CV_32S && best_labels.isContinuous()", "int icvDecodeSimpleFormat(const char*)", "rect.width >= 0 && rect.height >= 0 && rect.x < image->width && rect.y < image->height && rect.x + rect.width >= (int)(rect.width > 0) && rect.y + rect.height >= (int)(rect.height > 0)", "\"common_google_play_services_updating_text\" : \"%1$s won't run without Google Play services, which are currently updating.\"", "\"generate_cert_text_step_5_open_print_form\" : \"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0435\u0447\u0430\u0442\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443\"", "Mask should have 8uC1 or 8sC1 data type", "\"common_open_on_phone\" : \"\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u043d\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0435\"", "\"createNewMessage\" : \"\u041d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\"", "H\\JFR[ KFRY ZFR[ JFZF KGYG", "MWNMRV VMRV", "LYVKNX WKOX OKNONKWK NXWXWTVX", "N2cv14MorphRowFilterINS_5MinOpItEENS_12MorphRowIVecINS_7VMin16uEEEEE", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax16u; uchar = unsigned char]", "F]UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWIXHY OLNNMOKOJNJLKJMHOGRFVFYGZH[J[MZOYPVQTQRP VFXGYHZJZMYOXPVQ", "F^[ILIJJILINJPLQNQPPQNQLPJ[J IMJOKPMQ QMPKOJMI IXXXZW[U[SZQXPVPTQSSSUTWIW [TZRYQWP STTVUWWX", "CvRect cvBoundingRect(CvArr*, int)", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[ QNOONQNSOUQVSVUUVSVQUOSNQN", "E_IM[M IR[R IW[W K[YI", "(v6l)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::RowNoVec]", "u.size() == svd.u.size()", "N2cv22resizeAreaFast_InvokerIffNS_19ResizeAreaFastNoVecIffEEEE", "\"common_google_play_services_update_title\" : \"Update Google Play services\"", "vecarr != 0 && count >= 1", "void cvSetIPLAllocators(Cv_iplCreateImageHeader, Cv_iplAllocateImageData, Cv_iplDeallocate, Cv_iplCreateROI, Cv_iplCloneImage)", "Null comment", "char* icvGets(CvFileStorage*, char*, int)", "\"mtrl_picker_toggle_to_day_selection\" : \"Tap to switch to selecting a day\"", "\"selectDate\" : \"\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044c \u0434\u0430\u0442\u0443\"", "reinterpret_cast", "\"new_login\" : \"\u041d\u043e\u0432\u044b\u0439 \u043b\u043e\u0433\u0438\u043d\"", "NWQPTPUQUV URQSPTPUQVSVUU", "MWOMPMQNRPUV RPOV", "There should be space between literals", "CV_STORAGE_APPEND and CV_STORAGE_MEMORY are not currently compatible", "curve", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "\"registry\" : \"\u0420\u0435\u0435\u0441\u0442\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432\"", "CvSeq* cvConvexityDefects(const CvArr*, const CvArr*, CvMemStorage*)", "depth == CV_16S || depth == CV_32S || depth == CV_32F || depth == CV_64F", "KZRKRX SKSX QNNOMQMRNTQUTUWTXRXQWOTNQN QNOONQNROTQU TUVTWRWQVOTN PKUK PXUX", "G]LFL[ MFM[ IFUFXGYHZJZMYOXPUQMQ UFWGXHYJYMXOWPUQ I[P[", "F\\OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[N[ MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[", "\"rule_error_90075\" : \"The current password is wrong\"", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_12MorphRowIVecINS_6VMax8uEEEEE", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterVec_8u16s; cv::Point = cv::Point_<int>]", "I[TOUPXRUTTU UPWRUT LRWR", "\"mtrl_picker_a11y_next_month\" : \"Change to next month\"", "\"paymentCurrencyConversion\" : \"Foreign currency conversion\"", "void cv::GlTexture::unbind() const", "G^RFQJOPMULWJZH[F[EZEXFWGXFY RFRKSVT[ RFSKTVT[ `G_H`IaHaG`F^F\\GZJYLWQUWT[", "KYVOR\\ WOS\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX P\\U\\", "src1.type() == CV_32FC1 || src1.type() == CV_64FC1", "\"serialNumber\" : \"\u0421\u0435\u0440\u0456\u0439\u043d\u0438\u0439 \u043d\u043e\u043c\u0435\u0440\"", "void cvSeqPushMulti(CvSeq*, const void*, int, int)", "I[RGRV MJWP WJMP IVL\\ [VX\\ IV[V L\\X\\", "virtual bool EmptyDeviceInfoFuncTable::hasEqualOrGreaterPtx(int, int) const", "Too complex format for the matrix", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK QOQT TOTT QQTQ QRTR", "KYRKMX RNVX RKWX KXPX TXYX", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = float; VecOp = cv::RowNoVec]", "\"all_news\" : \" \u0412\u0441\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438 \"", "NVSKPO SKTLPO", "E`WNVLTKQKOLNMMPMSNUPVSVUUVS QKOMNPNSOUPV WKVSVUXVZV\\T]Q]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYZX XKWSWUXV", "\"rao_pass_length_from\" : \"\u0412\u0456\u0434 %1$d \u0434\u043e %2$d \u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0432\"", "interleaved", "Key must start with a letter or _", "?type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2", "src.data != dst.data", "Type name should start with a letter or _", "\"hasnt_fingerprints_alert\" : \"\u041d\u0430 \u0432\u0430\u0448\u043e\u043c\u0443 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457 \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u0438\u0439 \u0441\u043a\u0430\u043d\u0435\u0440 \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u0456\u0432 \u043f\u0430\u043b\u044c\u0446\u0456\u0432. \u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0430\u043a\u0442\u0438\u0432\u0443\u0432\u0430\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0456\u0441\u0442\u044c \u0432\u0445\u043e\u0434\u0443 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u0430 \u043f\u0430\u043b\u044c\u0446\u044f. \u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u0434\u043e\u0434\u0430\u0439\u0442\u0435 \u0432\u0456\u0434\u0431\u0438\u0442\u043e\u043a \u0432 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\u0445.\"", "\"abc_shareactionprovider_share_with\" : \"\u041f\u043e\u0434\u0456\u043b\u0438\u0442\u0438\u0441\u044f:\"", "G[IOLORW KORX [FRX", "points.checkVector(2) >= 0 && (points.depth() == CV_32F || points.depth() == CV_32S)", "MWOMOV UMUV OQUQ", "OUQOOQOSQUSUUSUQSOQO QPPQPSQTSTTSTQSPQP RQQRRSSRRQ", "St17bad_function_call", "NULL sequence pointer", "H]LIKFKLLINGQFSFVGXIYKZNZSYVXXVZS[P[MZLYKWKVLUMVLW SFUGWIXKYNYSXVWXUZS[ PPYP", "H]NFLL [FZIXLTQRTQWP[ RSPWO[ XLRRPUOWN[P[ MIPFRFWI OGRGWI MIOHRHWIYIZH[F", "void icvYMLWriteString(CvFileStorage*, const char*, const char*, int)", "NWRKRLSLSKRK RORX SOSX POSO PXUX", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 6>; VecOp = cv::NoVec<double, double>]", "\"paymentCurrencyConversion\" : \"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0438\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u044b\"", "One of <ranges> elements is NULL", "K[UUTSRRPRNSMTLVLXMZO[Q[SZ PRNTMVMYO[ VRPdPfQgSfTcT[V[YY[V WRT[R`Pd", "\"toConfirmKeyAccessAndSaveKeys\" : \"\u0414\u043b\u044f \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0434\u043e \u043a\u043b\u044e\u0447\u0430 \u0442\u0430 \u0439\u043e\u0433\u043e \u0437\u0431\u0435\u0440\u0435\u0436\u0435\u043d\u043d\u044f \u043d\u0430 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457, \u0432\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0439 \u043d\u0430\u0442\u0438\u0441\u043d\u0456\u0442\u044c \"\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u043a\u043b\u044e\u0447\u0456\"\"", "cv::GlTexture::GlTexture()", "\"service\" : \"Information\"", "H\\RFJ[ RFZ[ RIY[ KZYZ J[Z[", "void cvMul(const CvArr*, const CvArr*, CvArr*, double)", "JZNFNM VFVM", "Source and destination sequence element sizes are different.", "G]LFL[ MGMZ NFN[ IFSFVGXIYKZNZSYVXXVZS[I[ WIXKYNYSXVWX SFUGWJXNXSWWUZS[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "dims <= 2", "_nidx.needed() == (K > 0)", "dims > 0", "Missing ':'", "string", "%df%s", "MVQMNV QMVM PQSQ", "Null pointer to reader or destination array", "virtual void {anonymous}::GHT_Ballard_PosScale::findPosInHist()", "\"privateKeySuccessfullyDisconnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\"", "\"certBlockedText\" : \"\u041f\u043e\u043a\u0438 \u0432\u0430\u0448 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0431\u0430\u043d\u043a\u043e\u043c, \u0432\u0438 \u043c\u0430\u0454\u0442\u0435 \u0437\u043c\u043e\u0433\u0443 \u0432\u0432\u043e\u0434\u0438\u0442\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438 \u0431\u0435\u0437 \u043f\u0456\u0434\u043f\u0438\u0441\u0443, \u0430\u043b\u0435 \u0442\u0430\u043a\u0456 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u0456 \u0434\u043e \u043e\u0431\u0440\u043e\u0431\u043a\u0438 (\u0432\u0438 \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043a\u043b\u0430\u0441\u0442\u0438 \u043f\u0456\u0434\u043f\u0438\u0441 \u043d\u0430 \u0446\u0456 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438 \u043f\u0456\u0437\u043d\u0456\u0448\u0435)\"", "JZRMRX MMWM MRWR", "cv::FileNodeIterator& cv::FileNodeIterator::readRaw(const string&, uchar*, size_t)", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[", "St17moneypunct_bynameIwLb1EE", "0 <= i && i < (int)vv.size()", "LXTFQQPUPXQZR[T[VYWW UFRQQUQZ QFVFRTQX RFUG SFTH", "long double", "Unknown tag type", "\"generate_cert_text_step_5_require_otp\" : \"\u041a\u043b\u044e\u0447 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u0432 \u0431\u0430\u043d\u043a. \u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0435 \u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0430\u043d\u043a\u0430.\n\n\u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u043e\u0439 \u0444\u043e\u0440\u043c\u044b \u0438\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\"", "(coeffs.size() == Size(n0, 1) || coeffs.size() == Size(n0+1, 1) || coeffs.size() == Size(1, n0) || coeffs.size() == Size(1, n0+1))", "H\\UFKTZT UFU[", "so it should be set by integer, unsigned integer, uint64, unsigned char, boolean, float or double value, ", "\"fingerprint_acquired_too_slow\" : \"Finger moved too slow. Please try again.\"", "templDx.type() == CV_32FC1 && templDx.size() == templSize", "MYUFQTPXPZQ[T[VYWW VFRTQXQZR[ RFVF", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ \\G[H\\I]H]G[F ^FXFUGSIRLR[ XFVGTISLS[ ]H][ ^F^[ DM]M D[K[ O[V[ Z[a[", "\"setChangePin\" : \"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c/\u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c PIN-\u043a\u043e\u0434\"", "int cv::Subdiv2D::findNearest(cv::Point2f, cv::Point2f*)", "Only 8-bit, 3-channel images are supported", "LWRKQLQMSNVNVMSNPOOPNRNTOVPWRXSYS[R\\P\\O[ SNQOPPOROTPVRX", "N2cv6RowSumIiiEE", "\"card\" : \"\u041a\u0430\u0440\u0442\u043a\u0438\"", "void cv::GlTexture::create(int, int, int)", "KYMKRX NKRU WKRX KKPK TKYK", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/hough.cpp", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short int, float, float>; VResize = cv::VResizeLanczos4<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "E`UQUNTLRKPKNLMMLPLSMUOVQVSUTTUQ OLNMMPMSNU RKPLOMNPNSOUPV VKUQUSVUXVZV\\U]R]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYXYWZ WKVQVSWU VKXKWQWSXUZV", "virtual void cv::MatOp_Initializer::assign(const cv::MatExpr&, cv::Mat&, int) const", "@void cv::getScharrKernels(cv::OutputArray, cv::OutputArray, int, int, bool, int)", "IYWHUKSPQUPWNZL[ YLWNTOQOONNLNJOHQGUFYFWHVJTPRVQXOZL[J[IZIXJWKXJY", "onEdgeUpdate", "I[LMR[ MMRY XMR[P_NaLbKbJaK`La JMPM TMZM", "schar* icvSeqFindNextElem(CvSeq*, int, int, int, int*)", "Argument error: the getter", "I[QHRGRFQFPGPIQJTKXKYKYJXJUKSLPNNPMRLULWMYNZP[S\\U]V_VaUbSbRaR`S`Sa POOPNRMUMWNYOZ UKRMQNOQNTNWOYQ[S\\", "ci.isContinuous()", "void GMM::calcInverseCovAndDeterm(int)", "October", "JZRFQHRJSHRF RFRb RQQTRbSTRQ LMNNPMNLLM LMXM TMVNXMVLTM", "void cvMoments(const void*, CvMoments*, int)", " method was called for the parameter '", "int cvFindContours(void*, CvMemStorage*, CvSeq**, int, int, int, CvPoint)", "N9__gnu_cxx13stdio_filebufIcSt11char_traitsIcEEE", "MXUSTQRPPQOSPURVTUUS VPTVSXRYPYOX", "LXRNRV NRVR", "St12length_error", "\"verify\" : \"\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438\"", "EndWriteStruct w/o matching StartWriteStruct", "int cv::MorphColumnFVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax32f; uchar = unsigned char]", "M[MVOSRNSLTITGSFQGPIOMNTNZO[P[RZTXUUURVVWWYW[V", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short unsigned int>; VecOp = cv::MorphIVec<cv::VMax16u>; cv::Point = cv::Point_<int>]", "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)", "Some of essential graph attributes are absent", "In case of user-defined distance Distance function is undefined", "Unsupported image depth", "void cvCornerMinEigenVal(const CvArr*, CvArr*, int, int)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/rand.cpp", "\"certificationCenter\" : \"\u0426\u0435\u043d\u0442\u0440 \u0441\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457\"", "!fixedSize() || ((gpu::GpuMat*)obj)->size() == _sz", "edgeDst(e) == edgeDst(d_prev)", "\"qr_scan\" : \"\u0421\u043a\u0430\u043d\u0435\u0440 QR\"", "Too big buffer is allocated", "CvSeq* cvHoughLines2(CvArr*, void*, int, double, double, int, double, double)", "\"doYouReallyWantToAbortProcessAndGoBack\" : \"The keys have not been transferred yet. Do you really want to abort the process and go back?\"", "header_user_data", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "\"search\" : \"Search\"", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "H\\IQJOLMOMPNPPNVNYP[ NMONOPMVMYNZP[Q[TZVXXUYRYOXMWNXOYR XUYO", "\"current_cert\" : \"\"", "\"share\" : \"\u041f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f\"", "KYOBOb PBPb OBVB ObVb", "CPU revision", "void cvReadRawData(const CvFileStorage*, const CvFileNode*, void*, const char*)", "N2cv9ColumnSumIidEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi1EEE", "void* icvReadSeq(CvFileStorage*, CvFileNode*)", "type == CV_32F || type == CV_64F", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "\"paymentUkraine\" : \"Within Ukraine in UAH\"", "void cvRemap(const CvArr*, CvArr*, const CvArr*, const CvArr*, int, CvScalar)", "\"masterpass_success_path_2\" : \"www.masterpass.com.ua\"", "svec[j].size == dst.size && svec[j].depth() == dst.depth() && svec[j].channels() == 1 && i < dst.channels()", "\"choose_file\" : \"Select file:\"", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<float, float, float>; VResize = cv::VResizeCubic<float, float, float, cv::Cast<float, float>, cv::VResizeCubicVec_32f>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "\"photoPayment\" : \"Photopayment\"", "MWOSUSTQRPPQOSPURVTV", "void cv::warpPerspective(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "%m/%d/%y", "\"paymentInner\" : \"\u041c\u0456\u0436 \u0441\u0432\u043e\u0457\u043c\u0438 \u0440\u0430\u0445\u0443\u043d\u043a\u0430\u043c\u0438\"", "dst.cols <= evects.rows && dst.rows == data.rows", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "\"refuse_change\" : \"\u041e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0441\u043c\u0435\u043d\u044b\"", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "dst.size() == src.size() && dst.type() == CV_MAKETYPE(lut.depth(), src.channels())", "\"makePhoto\" : \"\u0417\u0440\u043e\u0431\u0438\u0442\u0438 \u0444\u043e\u0442\u043e\"", "JZPGSFRFPGOHOIPJSKVLWKVJSKPLNMMOMQNRPSSTVUWTVSSTOUMVLXLZM[O\\S]U^V_VaTbRbOaPaRb OMNONQOR NVMXMZN[ VKSKQLPMOOOQQSST VTSTPUOVNXNZP\\S]", "\"abc_action_bar_up_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432\u0432\u0435\u0440\u0445\"", "layout", "0 <= shift && shift <= XY_SHIFT", "\"days_2_4\" : \"days\"", "Negative number of elements", "\"pinSetupChangeCodeDescPart2\" : \"tariffs.\"", "G\\XIYFYLXIVGTFQFNGLIKKJNJSKVLXNZQ[T[VZXXYV MILKKNKSLVMX QFOGMJLNLSMWOZQ[", "void cvResetImageROI(IplImage*)", "JZRIRK RNRP RSRU RYQ\\ RYS\\ Q\\S\\ RGQIPJ RGSITJ PJRITJ RKPNNOMN RKTNVOWN NOPORNTOVO RPPSNTLTKRKSLT RPTSVTXTYRYSXT NTPTRSTTVT RUPXOYMZLZKYJWJYLZ RUTXUYWZXZYYZWZYXZ MZOZRYUZWZ", "G^G[IZMVPQQNRJRGQFPFOGNINLONQOUOXNYMZKZQYVXXVZS[O[LZJXIVIT", "\"qr_scan_code\" : \"\u0421\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c QR\"", "dst.size() == src.size() && (smooth_type == CV_BLUR_NO_SCALE || dst.type() == src.type())", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "\"digits_password\" : \"\u0426\u0438\u0444\u0440\u0438\"", "\"fingerprint_not_recognized\" : \"\u041d\u0435 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u043e\"", "src.dims <= 2 && src.channels() == 1 && func != 0", "MXTZS[R[QZQYRXSXTYT\\S^Q_ RYRZSZSYRY S[T\\ TZS^", "JArray", "void cv::makeKey()", "LYOMONNNNMOLQKTKVLWNVPTQ TKULVNUPTQ RQTQVRWTWUVWTXQXOWNVNUOUOV TQURVTVUUWTX", "invalid array data type", "\"abc_menu_function_shortcut_label\" : \"Fn\u00a0+\"", "Number of elements in the original and reshaped array is different", "G^LFL[ MGMZ IFNFN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JFLG KFLH LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "KZWKTVTWUXWXXWYU XKUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX UKXK", "typeinfo fn for ", "src.rows == dst.cols && src.cols == dst.rows && src.type() == dst.type()", "\"generate_certificate_print_form_sent\" : \"The certificate request PDF was sent to your email address %1$s\"", "N2cv16SymmColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "\"abc_action_menu_overflow_description\" : \"\u0411\u0456\u043b\u044c\u0448\u0435 \u043e\u043f\u0446\u0456\u0439\"", "unnamed", "Invalid matrix type", "\"abc_menu_shift_shortcut_label\" : \"Shift\u00a0+\"", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF SWY]", "\"enable_fingerprint_question\" : \"\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0445\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043d\u0441\u043e\u0440\u0430 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u0430 \u043f\u0430\u043b\u044c\u0446\u0430?\"", "JZRDJR RDZR", "\"pdf_extract_account\" : \"\u0412\u044b\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u0441\u0447\u0435\u0442\u0430 %1$s\"", "int cvSetAdd(CvSet*, CvSetElem*, CvSetElem**)", "F_NFKQJUJXKZN[R[UZWXXU\\G OFLQKUKYLZ PFMQLULYN[ KFSF YF_F LFOG MFNH QFOH RFOG ZF\\G ^F\\G", "void cvWarpAffine(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "\"status_bar_notification_info_overflow\" : \"999+\"", "St18__moneypunct_cacheIwLb0EE", "CvBox2D cvMinAreaRect2(const CvArr*, CvMemStorage*)", "\"abc_menu_sym_shortcut_label\" : \"Sym+\"", "virtual void cv::_OutputArray::create(int, const int*, int, int, bool, int) const", "cv::SymmColumnSmallVec_32f::SymmColumnSmallVec_32f(const cv::Mat&, int, int, double)", "Invalid character in the symbol entity name", "St9basic_iosIcSt11char_traitsIcEE", "\"cashIn\" : \"Cash-In\"", "\"zero_hint\" : \"00\"", "\"amountExceedsBalance\" : \"\u0412\u0432\u0435\u0434\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u043e\u0441\u0442\u0430\u0442\u043e\u043a\"", "virtual bool EmptyDeviceInfoFuncTable::builtWith(cv::gpu::FeatureSet) const", "\"certBlocked\" : \"\u0412\u0430\u0448 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u0435\u0449\u0435 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0431\u0430\u043d\u043a\u043e\u043c\"", "virtual bool EmptyDeviceInfoFuncTable::hasEqualOrGreaterBin(int, int) const", " value", "\"paymentCurrencyDocuments\" : \"List of requests\"", "CvSparseMat* cvCreateSparseMat(int, const int*, int)", "\"abc_search_hint\" : \"Search\u2026\"", "text != 0 && _font != 0", "\"toEdit\" : \"\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438\"", "!rowFilter.empty() && !columnFilter.empty()", "void cv::minMaxLoc(cv::InputArray, double*, double*, cv::Point*, cv::Point*, cv::InputArray)", "void cv::compare(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "\"ok\" : \"Ok\"", "F]IMJNKPKTLWMYNZQ[S[VZWYXWYRYOXJVGTFRFPGOIOKPMSOVP[Q JMKNLPLTMWNY VYWWXRXOWJVHTG GPHNIMKMLNMPMTNXOZQ[ S[UZVXWSWNVJUHSGQGOI", "sizeof ", "N2cv10CFormatterE", "Appending data to compressed file is not implemented", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "G]OFI[K[ PFJ[ LFQFK[ YOYNXNXPZPZNYMWMUNQROS MSOSQTRUTYUZWZ QUSYTZ OSPTRZS[U[WZYW MFPG NFOH", "N2cv15DTColumnInvokerE", "m1type == CV_16SC2 || m1type == CV_32FC1 || m1type == CV_32FC2", "G\\QFNGMHLJKNKb NHMJLNLa QFOGNIMNMb QFSFVGWHXJXLWNVOSP PPTPWQXRYTYWXYWZT[Q[OZNYMW VHWJWLVN WRXTXWWY SFUGVIVMUOSP TPVQWSWXVZT[ KbMb", "_kernel.type() == CV_8U", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/matrix.cpp", "<opencv_storage> tag is missing", "\"loadCertificate\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447 \u0447\u0435\u0440\u0435\u0437 web-\u043a\u043b\u0438\u0435\u043d\u0442\"", "N2cv9MatOp_BinE", "\"abc_searchview_description_search\" : \"Search\"", "\"mtrl_badge_numberless_content_description\" : \"New notification\"", "\"host\" : \"Host\"", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "dtrm > std::numeric_limits<double>::epsilon()", "H\\WMWbXb WMXMXb WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "void* icvReadSparseMat(CvFileStorage*, CvFileNode*)", "JZRMRS RSQ\\ RSS\\ Q\\S\\ RMQJPHNG QJNG RMSJTHVG SJVG RMNKLKJM PLLLJM RMVKXKZM TLXLZM RMPNOOOR RMPOOR RMTNUOUR RMTOUR", "\"cancelPayment\" : \"\u041e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043b\u0430\u0442\u0435\u0436\"", "basic_filebuf::_M_convert_to_external conversion error", "\"generate_cert_text_step_4\" : \"Key generation\u2026\"", "\"selectKeyTitle\" : \"To use the key you have to download it on your device\"", "H\\XMRb YMSb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ ObVb", "\"repeatPassword\" : \"New password (again)\"", "void cv::cornerEigenValsVecs(const cv::Mat&, cv::Mat&, int, int, int, double, int)", "Closing tag should not include any attributes", "src1.depth() == CV_8U", "G^LFL[ MFYY MHY[ YFY[ IFMF VF\\F I[O[", "\"disconnectExternalAndRemoveLocalAttention\" : \"\u042f\u043a\u0449\u043e \u0432\u0438 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0446\u044e \u0434\u0456\u044e, \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435 \u0432\u0438\u0434\u0430\u043b\u0435\u043d\u0438\u0439 \u0437 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044e \u0442\u0430 \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0432\u0456\u0434 \u043e\u0431\u043b\u0456\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0438\u0441\u0443, \u0456 \u0432\u0438 \u043d\u0435 \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0439\u043e\u0433\u043e \u043d\u0430 \u0456\u043d\u0448\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044f\u0445. \u0412\u0438 \u0434\u0456\u0439\u0441\u043d\u043e \u0431\u0430\u0436\u0430\u0454\u0442\u0435 \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u043a\u043b\u044e\u0447?\"", "vtable for ", "Bad argument", "Could not open the file storage. Check the path and permissions", "St12out_of_range", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "\"HOME_PAGE\" : \"dashboard\"", "0 <= shift && shift <= XY_SHIFT && thickness >= 0", "mv && n > 0", "\"password_force_change_message\" : \"Password validity for login to the system has been expired. It is necessary to change the password\"", "D`DUDO`O`U", "bool cv::solve(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "\"callback\" : \"Request a call back\"", "void cvSetRealND(CvArr*, const int*, double)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<unsigned char, int, short int>; VResize = cv::VResizeCubic<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeCubicVec_32s8u>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "LXRMRV NOOPOSQTSTUSUPVO", "N2cv11MorphFilterINS_5MinOpIhEENS_9MorphIVecINS_6VMin8uEEEEE", "\"useFingerpintInsteadKeyDialogText\" : \"By confirming this action you assume risks associated with using such private key entering method!\n\nTo confirm enter the private key password\n%1$s, %2$s\"", "\"tryAgain\" : \"Try again\"", "!GHT_Ballard_PosRotation_info_auto.name().empty()", "factors[0] == factors[nf-1]", "\"mtrl_picker_text_input_date_hint\" : \"Date\"", "\"yourPairingCode\" : \"\u0412\u0430\u0448 \u043a\u043e\u0434 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u044f:\"", "mapx0.data == mapx.data && mapy0.data == mapy.data", "\"certBlocked\" : \"Your certificate is not authorized by the bank yet\"", "Unsupported combination of input/output matrices", "An extra closing tag", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "G]JTROZT JTRPZT", "void cv::KDTree::build(cv::InputArray, cv::InputArray, bool)", "double cvInvert(const CvArr*, CvArr*, int)", "Broken promise", "dp, min_dist, canny_threshold and acc_threshold must be all positive numbers", "Adaptive Bilateral filtering is only implemented for 8u images", "\"FORMFACTOR\" : \"phone\"", "void cv::render(const cv::GlArrays&, int, cv::Scalar)", "\"my_finances\" : \"\u041c\u043e\u0457 \u0444\u0456\u043d\u0430\u043d\u0441\u0438\"", "The size of header calculated from \"header_dt\" is greater than header_size", "\"day_1\" : \"day\"", "cn <= 4 && func != 0", "\"disconnectExternalAndRemoveLocalAttention\" : \"After confirming this action the key will be removed from the device and disconnected from your account and you won\u2019t be able to use it on other devices. Are you sure you want to disconnect the key?\"", "leftEdge", "\"dont_show_again\" : \"Don't show again\"", "double cv::matchShapes(cv::InputArray, cv::InputArray, int, double)", "\"changeLocalWarning\" : \"\u041c\u043e\u0432\u0430 \u0431\u0443\u0434\u0435 \u0437\u043c\u0456\u043d\u0435\u043d\u0430 \u043f\u0456\u0441\u043b\u044f \u0432\u0438\u0445\u043e\u0434\u0443 \u0437 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u044c\"", "H\\LMLWMZO[R[TZWW LMMMMWNYPZRZTYWW WMW[X[ WMXMX[", "\"pdf_extract_card\" : \"\u0412\u0438\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043a\u0430\u0440\u0442\u0438 %1$s\"", "\"fingerprint_acquired_partial\" : \"\u041e\u0442\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u044c \u043f\u0430\u043b\u044c\u0446\u0430. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443\"", "H]OMIb NQMVMYO[Q[SZUXWT YMWTVXVZW[Y[[Y\\W", "MXSMRNROSPTPUOUNTMSM SNSOTOTNSN Q[P[OZOYPXQXRYR[Q]P^N_ PYPZQZQYPY Q[Q\\P^", "\"generate_certificate_print_form_sent\" : \"\u041f\u0435\u0447\u0430\u0442\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u0432\u0430\u0448 email-\u0430\u0434\u0440\u0435\u0441 %1$s\"", "void cv::phase(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "\"masterpass_info_text\" : \"Masterpass \u2013 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u043e\u0442 MasterCard. \u041e\u043d \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0441\u0435\u0445 \u0432\u0430\u0448\u0438\u0445 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u043e\u043d\u043b\u0430\u0439\u043d-\u0448\u043e\u043f\u0438\u043d\u0433 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u043c \u0438 \u043b\u0435\u0433\u043a\u0438\u043c. \n\n\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u043b\u0430\u0442\u0438\u0442\u0435 \u0441 Masterpass, \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0432\u0430\u0448\u0435\u0439 \u043a\u0430\u0440\u0442\u044b: \u0441\u0440\u043e\u043a\u0443 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043b\u0438 CVV-\u043a\u043e\u0434\u0443. \n\n\u0427\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 Masterpass-\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430, \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 \u0441\u0430\u0439\u0442 MasterCard.\"", "MWUNORUV", "CvSeq* cvApproxPoly(const void*, int, CvMemStorage*, int, double, int)", "H\\LML[M[ LMMMM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/morph.cpp", "F]OFI[ PFJ[ QFK[ LFXF[G\\I\\K[NYPUQMQ ZG[I[KZNXP XFYGZIZKYNWPUQ F[N[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "nsamples > 0", "H]RFR[ SFS[ PKMLLMKOKRLTMUPVUVXUYTZRZOYMXLUKPK PKNLMMLOLRMTNUPV UVWUXTYRYOXMWLUK OFVF O[V[", "I[WUWRVOUNSMQMONMPLSLVMYNZP[R[TZVXWUXPXKWHVGTFRFPGNI", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/shapedescr.cpp", "\"choose_csk\" : \"Select CA\"", "H\\SMONLPKRKTLVNWQWUVXTYRYPXNVMSM XNSM VMQNLP ONKR LVQW NWSVXT UVYR", "cv::ogl::Texture2D cv::_InputArray::getOGlTexture2D() const", "F_RFR[ SFS[ OFVF PILJJLIOIRJULWPXUXYW[U\\R\\O[LYJUIPI PIMJKLJOJRKUMWPX UXXWZU[R[OZLXJUI O[V[", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<unsigned char, int, short int>; VResize = cv::VResizeCubic<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "\"validFrom\" : \"\u0414\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\"", "NVSLRMSNTMSL QRKd RRO[M`KdJfHgGfGdHaJ_M]Q[TYVV", "graph->storage != 0", "\"bankIdConnectionError\" : \"\u041f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u0434\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0438 BankID \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u0435. \u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0441\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u0456\u0437\u043d\u0456\u0448\u0435 \u0430\u0431\u043e \u0437\u0432\u0435\u0440\u043d\u0456\u0442\u044c\u0441\u044f \u0434\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442-\u0446\u0435\u043d\u0442\u0440\u0443.\"", "i < 0", "\"selectCertificateTitle\" : \"\u0412\u044b\u0431\u043e\u0440 \u043f\u0430\u043f\u043a\u0438 \u0441 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u043c\"", "LXQFQ[ RGRZ NFSFS[ N[V[ OFQG PFQH QZO[ QYP[ SYT[ SZU[", "\"abc_menu_function_shortcut_label\" : \"Function+\"", "void cv::split(cv::InputArray, cv::OutputArrayOfArrays)", "virtual cv::Size cv::_InputArray::size(int) const", "N2cv14MorphRowFilterINS_5MinOpIhEENS_12MorphRowIVecINS_6VMin8uEEEEE", "%d-%d", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/convert.cpp", "Could not determine the matrix dimensionality", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", "I\\XMXb XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "void cvRawDataToScalar(const void*, int, CvScalar*)", "\"google_crash_reporting_api_key\" : \"AIzaSyBSPicEGF3NL1mOp3fF9EBwuX9Z-ibxN2A\"", "C`DQEOGMJMKNKQIWIYK[ IMJNJQHWHYIZK[M[OZQXRV TMRVRYSZU[W[YZ[X\\V]R]M\\M]O UMSVSYU[", "void cv::HuMoments(const cv::Moments&, cv::OutputArray)", "so it should be get as float or double value, ", "F^RGPJLOIR RGTJXO[R IRLUPZR] [RXUTZR]", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "_mean.size() == mean_sz", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "\"fieldValueWrongSymbols\" : \"\u0412\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\"", "angleThresh > 0", "\"payment\" : \"\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u044b\"", "Pixel order should be used with coi == 0", "Floating-point coordinates are not supported here", "C_HMFLEJEIFGHFIFKGLILLK[ UFK[ UFS[ aF_G\\JYNVTS[", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "JZJ]L]O\\Q[TXUVVSVOULTJSIQIPJOLNONSOVPXS[U\\X]Z]", "the input arrays are too big", "elem_size > 0", "\"common_google_play_services_install_title\" : \"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 \u0441\u0435\u0440\u0432\u0456\u0441\u0438 Google Play\"", "\"lookup_code_text\" : \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 LookUp-\u043a\u043e\u0434 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u0423\u0437\u043d\u0430\u0442\u044c \u043a\u043e\u0434 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437 SMS-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0432\u044b\u0441\u043b\u0430\u043d\u043d\u043e\u0433\u043e \u0412\u0430\u043c \u0431\u0430\u043d\u043a\u043e\u043c-\u044d\u043c\u0438\u0442\u0435\u043d\u0442\u043e\u043c, \u0438\u043b\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u0437\u0430 \u0434\u0435\u0442\u0430\u043b\u044f\u043c\u0438 \u0432 \u043a\u043e\u043b\u043b-\u0446\u0435\u043d\u0442\u0440 \u0431\u0430\u043d\u043a\u0430-\u044d\u043c\u0438\u0442\u0435\u043d\u0442\u0430\"", "N2cv11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEE", "H\\RFK[ RFY[ RIX[ I[O[ U[[[", "void initGMMs(const cv::Mat&, const cv::Mat&, GMM&, GMM&)", "NWQMSQQV WMSQ", "G]IB[b", "void cv::split(const cv::Mat&, cv::Mat*)", "H]RFRb SFSb OFSF RPQNPMNMLNKQKWLZN[P[QZRX NMMNLQLWMZN[ WMXNYQYWXZW[ SPTNUMWMYNZQZWYZW[U[TZSX ObVb", "LC_MESSAGES", "\"from\" : \"From\"", "checkScalar(value, type(), _value.kind(), _InputArray::MAT )", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/gcgraph.hpp", "IZYFWHUKSPPYN] YMWOTPQPOONMNKOIQGUFYFWIVKSTQXPZN]M^K_J^J\\KZMXOWRVVU", "St15basic_stringbufIcSt11char_traitsIcESaIcEE", "\"common_google_play_services_update_button\" : \"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c\"", "CvSeq* cvApproxChains(CvSeq*, CvMemStorage*, int, double, int, int)", "\"lockUser\" : \"\u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"", "G^[MZQYTWXUZR[P[MZKXJUJSKPMNPMRMUNVOWQYXZZ[[\\[ ZMYQXTWVUYTZR[ LXKVKRLP P[NZMYLVLRMONNPM RMTNUOVQXXYZ[[", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/approx.cpp", "JZNKNX OKOX LKSKVLWMXPXSWVVWSXLX SKULVMWPWSVVUWSX", "wchar_t", "\"requisitesTransitiveModeMessage\" : \"IBAN:%1$s\n\u0420/\u0440: %2$s\n\u0443 %3$s, \u041c\u0424\u041e %4$s,\n\u041e\u0434\u0435\u0440\u0436\u0443\u0432\u0430\u0447: %5$s,\n\u041a\u043e\u0434 \u0404\u0414\u0420\u041f\u041e\u0423 \u043e\u0434\u0435\u0440\u0436\u0443\u0432\u0430\u0447\u0430: %6$s\"", "H\\MFXFRNUNWOXPYSYUXXVZS[P[MZLYKW", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "F_RIRZSZ RISISZ JQ[Q[R JQJR[R", "LYPFSCSP RDRP OPVP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "void cv::GeneralizedHough::detect(cv::InputArray, cv::OutputArray, cv::OutputArray, int)", "\"abc_action_menu_overflow_description\" : \"\u0415\u0449\u0451\"", "NVRFR[", "F^RTTWVXXXZW[U[SZQXPVPSQ SQUOVMVKUISHQHOINKNMOOQQ QQNPLPJQISIUJWLXNXPWRT RTQYP\\ RTSYT\\ P\\T\\", "\"pref_syncConnectionTypes_default\" : \"Settings\"", "\"month\" : \"\u043c\u0435\u0441.\"", "\"useFingerpintInsteadKey\" : \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u0432\u0432\u043e\u0434\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447\"", "Null graph pointer", "void cv::invertAffineTransform(cv::InputArray, cv::OutputArray)", "Too long string or a last string w/o newline", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "cv::Ptr<cv::BaseRowFilter> cv::getRowSumFilter(int, int, int, int)", "N2cv6RowSumIfdEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "\"atms\" : \"ATMs\"", "CV_ARE_SIZES_EQ(src, dst) && CV_ARE_TYPES_EQ(src, dst) && CV_MAT_TYPE(src->type) == CV_8UC1", "N10__cxxabiv121__vmi_class_type_infoE", "void cvReleaseSparseMat(CvSparseMat**)", "\"from\" : \"\u0412\u0456\u0434\"", "MWMMWW WMMW", "void cv::DFT(const cv::Complex<_Tp>*, cv::Complex<_Tp>*, int, int, const int*, const int*, const cv::Complex<_Tp>*, int, const void*, cv::Complex<_Tp>*, int, double) [with T = double]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<float>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "N2cv14MorphRowFilterINS_5MinOpIfEENS_12MorphRowFVecINS_7VMin32fEEEEE", "LXTFOL TFUGOL", "\"certificate\" : \"\u0421\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\"", "Comments are not allowed here", "G\\LFL[ MGMZ NFN[ IFYFYL NPTP TLTT I[Y[YU JFLG KFLH OFNH PFNG TFYG VFYH WFYI XFYL TLSPTT TNRPTR TOPPTQ LZJ[ LYK[ NYO[ NZP[ T[YZ V[YY W[YX X[YU", "void cvReleaseStructuringElement(IplConvKernel**)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/drawing.cpp", "The destination image does not have the proper type", "Only 32-bit, 1-channel output images are supported", "MWSFRGQIQKRLSKRJ", "double cvGetCentralMoment(CvMoments*, int, int)", "N2cv18ResizeArea_InvokerIsfEE", "NULL pointer to indices", "MXRMQNQORPSPTOTNSMRM RNROSOSNRN TZS[R[QZQYRXSXTYT\\S^Q_ RYRZSZSYRY S[T\\ TZS^", "N2cv18SymmRowSmallFilterIhiNS_17SymmRowSmallNoVecEEE", "\"selectDateRangeTo\" : \"To date\u2026\"", "H\\JFR[ KFRX LFSX JFZFR[ LGYG LHYH", "\"emptyList\" : \"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\"", "void cvWriteReal(CvFileStorage*, const char*, double)", "void cv::createHanningWindow(cv::OutputArray, cv::Size, int)", "F^[BI[[[", "csz == 0 || csz == dims", "N2cv9RowFilterItdNS_8RowNoVecEEE", "void* cvNextTreeNode(CvTreeNodeIterator*)", "The kernel size must be odd and not larger than 31", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF OMOT UMUT OPUP OQUQ", "void cvEigenVV(CvArr*, CvArr*, CvArr*, double, int, int)", "\"gotit\" : \"\u0417\u0440\u043e\u0437\u0443\u043c\u0456\u0432!\"", "Mag.empty() || (Angle.size == Mag.size && type == Mag.type() && (depth == CV_32F || depth == CV_64F))", "int icvInitEMD(const float*, int, const float*, int, int, CvDistanceFunction, void*, const float*, int, CvEMDState*, float*, cv::AutoBuffer<char>&)", "\"disconnectCertDialogText\" : \"\u041f\u0440\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d \u043e\u0442 \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438. \u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447?\"", "xdigit", "F^ZJSJOKMLKNJQJSKVMXOYSZZZ", "NVRVQWRXSWRV", "\"preference_copied\" : \"\"%1$s\": \u0441\u043a\u043e\u043f\u0456\u0439\u043e\u0432\u0430\u043d\u043e \u0432 \u0431\u0443\u0444\u0435\u0440 \u043e\u0431\u043c\u0456\u043d\u0443.\"", "double cv::compareHist(cv::InputArray, cv::InputArray, int)", "Minimal rotation angle to detect in degrees.", "H[RKSLSMTMTLRKOKMLLNLX OKNLMNMX XKYLYMZMZLXKVKTMTX VKUMUX JOWO JXOX RXWX", "MWUQSPRPPQOSPURVSVUU", "NVRFQM SFQM", "F]SHTITLSPRSQUOXMZK[J[IZIWJRKOLMNJPHRGUFXFZG[I[KZMYNWOTP SPTPWQXRYTYWXYWZU[R[PZOX", "I[RFJ[ RFZ[", "\"map_service\" : \"\u041e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u043d\u043a\u0430\"", "minAngle >= 0.0 && minAngle < maxAngle && maxAngle <= 360.0", "The patch width and height must be positive", "edgeOrg(e) == edgeOrg(o_next)", "_GLOBAL_", "N2cv9RowFilterIffNS_17SymmRowSmallNoVecEEE", "MWUFTGRM UGRM UFVGRM", "LYRKPLONOOPQRRSRUQVOVNULSKRK RRRX SRSX OUVU", "MXOQQPVP QPQRPV TPTRUV", "Null histogram header pointer", "\"lowercase_letters\" : \"\u2022 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435\"", "virtual int cv::FilterEngine::proceed(const uchar*, int, int, uchar*, int)", "JZWNTLRIPLMN PLRJTL RJRZ WVTXR[PXMV PXRZTX", "Unknown array type", "Ao\"eB", "Unknown approximation method", "\"choose_key\" : \"Select a key\"", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallNoVec]", "N10__cxxabiv117__class_type_infoE", "\"menu_settings\" : \"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\"", "\"validInputSymbols\" : \"a-zA-Z\u0430-\u044f\u0410-\u042f0-9\u0490\u0491\u0404\u0454\u0406\u0456\u0407\u0457| |\"", "void icvTrueDistTrans(const CvMat*, CvMat*)", "cv::Mat cv::Mat::reshape(int, int, const int*) const", "void* cvRead(CvFileStorage*, CvFileNode*, CvAttrList*)", "\"days_5_0\" : \"\u0434\u043d\u0456\u0432\"", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "closed", "An attempt to add element without a key to a map, or add element with key to sequence", "MXVPRPPQOSPURVTUUSTQRP", "\"abc_menu_sym_shortcut_label\" : \"Sym\u00a0+\"", "CV_IS_MAT(image) && CV_MAT_TYPE(image->type) == CV_8UC1", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "void cvCreateSeqBlock(CvSeqWriter*)", "Dimension sizes are the same for all arrays", "NULL double pointer to file storage", "G]NFU[ OFV[ \\FH[ LFRF XF^F F[L[ R[X[", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/cornersubpix.cpp", "The upper bounary is neither an array of the same size and same type as src, nor a scalar", "\"choose_csk\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0426\u0421\u041a\"", "J[OOMOLNLLMKOKPLPNNPMRMUNWOXQYTYVXWWXUXRWPUNULVKXKYLYNXOVO NWPXUXWW", "\"abc_menu_space_shortcut_label\" : \"\u041f\u0440\u043e\u0431\u0435\u043b\"", "OUTKRNQQQSRVTY", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "Too small number of histograms", "\"account\" : \"My Accounts\"", "Future already retrieved", "Literal \" is not allowed within a string. Use &quot;", "The histograms have different numbers of dimensions", "NVPMPQ TMTQ", "void cv::GlCamera::setOrthoProjection(double, double, double, double, double, double)", "\"fingerprint_success\" : \"\u041e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u0430 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\"", "\"requisitesTransitiveModeMessage\" : \"IBAN:%1$s\nC/a: %2$s\nin %3$s, Bank code %4$s,\nRecipient: %5$s,\nRecipient TAX Id: %6$s\"", "\"newPinAndRepeatNotEquals\" : \"PIN-\u043a\u043e\u0434\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c\"", "The sequence slice does not fit an integer number of records", "JXPKLX QKMX SORS NKXKWNWK OQRQ JXOX", "\"continueAnyway\" : \"\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c\"", "\"archiveOperations\" : \"\u0410\u0440\u0445\u0456\u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0439\"", "covariant return thunk to ", "edge_dt", "F]KMILHJHIIGKFLFNGOIOKNOMRLVLYM[O[QZTWVTXPYMZIZGYFXFWGVIVKWNYP[Q", "\"expand_button_title\" : \"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\"", "\"expireDate\" : \"\u0422\u0435\u0440\u043c\u0456\u043d \u0434\u0456\u0457\"", "\"disconnectExternalAttention\" : \"After confirming this action the key will be disconnected from your account and you won\u2019t be able to use it on other devices. Are you sure you want to disconnect the key?\"", "\"paymentUkraine\" : \"\u041f\u043e \u0423\u043a\u0440\u0430\u0438\u043d\u0435 \u0432 \u0433\u0440\u0438\u0432\u043d\u0435\"", "F^OFI[ PFJ[ LFWFZG[I[KZNYOVP WFYGZIZKYNXOVP MPVPXQYSYUXXVZR[F[ VPWQXSXUWXUZR[", "\"document\" : \"\u0410\u0440\u0445\u0456\u0432 \u043f\u043b\u0430\u0442\u0435\u0436\u0456\u0432\"", "\"selectDateRange\" : \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0430\u0442\u044b\"", "\"fingerprint_error_timeout\" : \"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443\"", "\"facebookTitle\" : \"Messenger\"", "\"userNotLegal\" : \"\u0426\u0435\u0439 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447 \u043d\u0435 \u043c\u043e\u0436\u0435 \u0432\u0445\u043e\u0434\u0438\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u0434\u0430\u0442\u043e\u043a \"OTP Smart\", \u0442\u0430\u043a \u044f\u043a \u0432\u043e\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0435 \u0442\u0456\u043b\u044c\u043a\u0438 \u0434\u043b\u044f \u0444\u0456\u0437\u0438\u0447\u043d\u0438\u0445 \u043e\u0441\u0456\u0431. \u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0439\u0442\u0435 \u0434\u043e\u0434\u0430\u0442\u043e\u043a \u0434\u043b\u044f \u044e\u0440\u0438\u0434\u0438\u0447\u043d\u0438\u0445 \u043e\u0441\u0456\u0431 \"OTP Smart Business\".\"", "src.isContinuous() && (src.depth() == CV_32F || src.depth() == CV_64F) && ((src.rows == 1 && src.channels() == 2) || src.cols*src.channels() == 2)", "\"bankid\" : \"\u0406\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044f \u0447\u0435\u0440\u0435\u0437\n\u0421\u0438\u0441\u0442\u0435\u043c\u0443 BankID \u041d\u0411\u0423\"", "N2cv22RGB888toYUV420pInvokerILi2EEE", "\"eca_list_header\" : \"List of connected CA\"", "(is2d || is3d) && (points.depth() == CV_32F || points.depth() == CV_32S)", "\"tryAgain\" : \"\u0421\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0449\u0435 \u0440\u0430\u0437\"", "N2cv16GeneralizedHoughE", "\"pushMessage\" : \"Push - \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\"", "NSt13__future_base12_Result_baseE", "NZNVPSQQQSTUUWUYTZR[ QSSUTWTYR[ NZP[U[XYZV", "dsize.area()", "\"pref_language_key\" : \"pref_language_key\"", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "void cvConvertScaleAbs(const void*, void*, double, double)", "KYUOU\\ VOV\\ URTPROPONPMRMUNWPXRXTWUU POOPNRNUOWPX S\\X\\", "void cv::GlBuffer::copyFrom(cv::InputArray)", "\"enable_fingerprint\" : \"Enable Fingerprint\"", "\"phones\" : \"\u0422\u0435\u043b\u0435\u0444\u043e\u043d\u044b\"", "J[XPWNTMQMNNMPNRPSUTWUXWXXWZT[Q[NZMX", "The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array'", "double cv::kmeans(cv::InputArray, int, cv::InputOutputArray, cv::TermCriteria, int, int, cv::OutputArray)", "\"change_the_password_user\" : \"Change the password for the user %1$s\"", "MZMVOSPQPSSSTTTVSYSZT[U[WZXYZV", "JZRFRR MIWO WIMO", "\"documentPdfName\" : \"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u2116%1$s \u0432\u0456\u0434 %2$s.pdf\"", "An empty key", "H\\KFY[ YFK[", "(scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F)", "\"editMessage\" : \"\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043d\u043d\u044f \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\"", "Bad input origin", "H[V+R1P5O:O>PBTJTLSNROMRRUSVTXTZPbOfOjPoRsVy T.R2Q5P:P>QCRF R^QaPfPjQoRrTv", "void icvYMLEndWriteStruct(CvFileStorage*)", "0 <= _dims && _dims <= CV_MAX_DIM", "\"yes\" : \"\u0422\u0430\u043a\"", "\"currencyExchangeArchive\" : \"\u0412\u0430\u043b\u044e\u0442\u043e\u043e\u0431\u043c\u0435\u043d\"", "\"generate_cert_text_step_2\" : \"Create a new private key password. Do not reveal your password to anyone. Employees of the bank would never ask you to reveal or to send your private key password as well as the password from SMS\"", "CvMat* cvCloneMat(const CvMat*)", "\"pushChangeFromSmsCancelledMessage\" : \"\u0412\u0438 \u0437\u0430\u0432\u0436\u0434\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u0438\u0441\u044f \u043d\u0430 PUSH-\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f (\u0437\u0430\u043c\u0456\u0441\u0442\u044c SMS) \u0432 \u043c\u0435\u043d\u044e \u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f \\ \u041a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447 \\ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0456\u044f\"", "IjNQOOQNSNUOVQVSUUSVQVOUNTMQMNNKPISHWH[I^K`NaRaW`[_]]`ZcVfQiMk WHZI]K_N`R`W_[^]\\`YcTgQi POTO OPUP NQVQ NRVR NSVS OTUT PUTU eLeNgNgLeL fLfN eMgM eVeXgXgVeV fVfX eWgW", "\"user_info\" : \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\"", "\"v7_preference_off\" : \"\u0412\u0418\u041c\u041a\u041d\u0415\u041d\u041e\"", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::RowVec_8u32s]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = float; uchar = unsigned char]", "MWOMOV OSPURVTUUSTQRPPQOS", "\"summary_collapsed_preference_list\" : \"%1$s, %2$s\"", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvConvexityDefect; CvSeq = CvSeq]", "vector::_M_range_insert", "maxAngle", "F_SHTITLSPRSQUOXMZK[J[IZIWJRKOLMNJPHRGUFZF\\G]H^J^M]O\\PZQWQUPTO", "\"character_counter_pattern\" : \"%1$d/%2$d\"", "\"noAppForPdf\" : \"\u0412\u0438 \u0437\u0430\u043c\u043e\u0432\u0438\u043b\u0438 \u0432\u0438\u043f\u0438\u0441\u043a\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0456 PDF, \u0430\u043b\u0435 \u043d\u0430 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456 \u0434\u043e\u0434\u0430\u0442\u043a\u0438 \u0434\u043b\u044f \u0439\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434\u0443. \u041e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0432\u0438\u043f\u0438\u0441\u043a\u0443 \u0432 \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u043c\u0443 \u0440\u0430\u0437\u0456?\"", "Goldfish", "\"enter_card_no\" : \"\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u0438\"", "_dst.size() == images[0].size() && _dst.depth() == images[0].depth()", "uchar* icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned int*)", "KYQFOGNINKOMQNSNUMVKVIUGSFQF", "\"pbClientService\" : \"\u041e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0420\u0412\"", "cv::gpu::GpuMat::GpuMat(const cv::gpu::GpuMat&, cv::Rect)", "H[PFLSLVMYNZ QFMS MSNPPNRMTMVNWOXQXTWWUZR[P[NZMWMS VNWPWTVWTZR[ MFQF", "H]LFL[M[ LFMFM[ ZFYFMR ZFMS POY[Z[ QOZ[", "\"masterpass_success_path_3\" : \"\n\n\u0422\u0430\u043c \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454\u0442\u044c\u0441\u044f \u0432\u0441\u044f \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044f \u043f\u0440\u043e \u0432\u0430\u0448\u0456 \u043a\u0430\u0440\u0442\u043a\u0438.\"", "void cvGetMinMaxHistValue(const CvHistogram*, float*, float*, int*, int*)", "CvSeq* cvTreeToNodeSeq(const void*, int, CvMemStorage*)", "\"document\" : \"Payment archive\"", "\"not_found_services\" : \"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u0430\u0440\u0442\u043e\u0439 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Google Play Services\"", "ranges", "Directive tags are not allowed here", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short int, float, float>; VResize = cv::VResizeCubic<short int, float, float, cv::Cast<float, short int>, cv::VResizeCubicVec_32f16<0> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "KXNMNV SMNV SMSV XMSV", "\"logout\" : \"Change user\"", "\"allow_geolocation\" : \"Enable the location services to allow the program determine your location\"", "void cvSetReal1D(CvArr*, int, double)", "\"documentPdfName\" : \"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u2116%1$s \u043e\u0442 %2$s.pdf\"", "Invalid character", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ UMVNWQWb WOXRXa NQOOPNRMUMWNXOYRYb L[N[ WbYb", "\"approveWithSmsTitle\" : \"SMS confirmation\"", "LYWKTKQLONNQNSOVQXTYWY WKTLRNQQQSRVTXWY", "\"invalidHost\" : \"Invalid format for field Host\"", "G\\HJJGLFMFOHOKNOLVLYM[ MFNHNKLRKVKYM[N[QZTWVTXPYMZIZGYFXFWGVIVLWNYP[Q]Q", ">fRAPCMDJDGCEA>H@JAMAZB]D_G`M`PaRc RATCWDZD]C_AfHdJcMcZb]`_]`W`TaRc", "d.depth >= 0", "\"search_amount\" : \"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0443\u043c\u043c\u0435\"", "The input and output images must have the same type", "KZRKRX SKSX NKMOMKXKXOWK PXUX", "KYQFOGNINKOMQNSNUMVKVIUGSFQF QFNIOMSNVKUGQF SFOGNKQNUMVISF", "\"openApp\" : \"\u0412\u0456\u0434\u043a\u0440\u0438\u0442\u0438 OTP Smart Business\"", "I[XFSWRYQZO[M[KZJXJVKULVKW WFRWQYO[ TF[F", "N10__cxxabiv119__foreign_exceptionE", "N2cv11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "OVRKRP SKRP", "cv::Ptr<cv::BaseFilter> cv::getMorphologyFilter(int, int, cv::InputArray, cv::Point)", "D`DUGSKQPPTPYQ]S`U", "void cv::findNonZero(cv::InputArray, cv::OutputArray)", "\"fingerprint_description\" : \"\u041f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0432\u0445\u043e\u0434\u0443 \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u043e\u043c \u043f\u0430\u043b\u044c\u0446\u044f\"", "\"rao_input_password\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430\"", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[", "\"newPinCode\" : \"\"", "I[OMK[ YNXMWMUNQROSNS NSPTQUSZT[U[VZ", "OpenCV Error: ", "double cv::invert(cv::InputArray, cv::OutputArray, int)", "I[KRYR", "I\\WFRWQYO[ XFTSSVRX YFUSSXQZO[M[KZJXJVKULUMVMWLXKX KVKWLWLVKV TF\\F UFXG VFWH ZFXH [FXG", "\"dont_show_again\" : \"\u041d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043d\u043e\u0432\u0430\"", "H\\IQJOLMOMPNPQNWNYP[ NMONOQMWMYNZP[Q[TZVXXUYQYMXMYO", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "KYWHWGVGVIXIXGWFTFRGQHPKP[ RHQKQZ TFSGRIR[ MMVM M[U[ PZN[ PYO[ RYS[ RZT[", "Unknown/unsupported threshold type", "F^UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWIXHY OLNNMOKOJNJLKJMHOGRFXFZG[I[KZMXNTORO XFYGZIZKYMXN TOWPXQYSYVXYWZU[S[RZRXSU TOVPWQXSXVWYU[", "\"changeLanguage\" : \"\u0421\u043c\u0435\u043d\u0438\u0442\u044c \u044f\u0437\u044b\u043a\"", "Input curves are not polygonal. Use cvApproxChains first", "labels.isContinuous() && labels.type() == CV_32S && (labels.cols == 1 || labels.rows == 1) && labels.cols + labels.rows - 1 == data.rows", "N10__cxxabiv115__forced_unwindE", "NVRMOV OVTV", "void cvLUT(const void*, void*, const void*)", "\"hasnt_fingerprints_alert\" : \"\u041d\u0430 \u0432\u0430\u0448\u0435\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u0441\u043a\u0430\u043d\u0435\u0440 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u043e\u0432 \u043f\u0430\u043b\u044c\u0446\u0435\u0432. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0445\u043e\u0434\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u0430 \u043f\u0430\u043b\u044c\u0446\u0430, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445.\"", "H\\YFO[ KFYF", "G^VGUHVIWHWGUFRFOGMILLL[ RFPGNIMLM[ \\G[H\\I]H]G\\FZFXGWIW[ ZFYGXIX[ IM[M I[P[ T[[[", "N2cv9ExceptionE", "H\\KFR[ LFRXR[ MFSX YGR[ IFPF UF[F JFLH NFMH OFMG WFYG ZFYG", "\"abc_menu_enter_shortcut_label\" : \"enter\"", "\"confirmationCode\" : \"\u041a\u043e\u0434 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f\"", "templ.type() == CV_8UC1", "void cvScaleAdd(const CvArr*, CvScalar, const CvArr*, CvArr*)", "!fixedSize() || ((ogl::Buffer*)obj)->size() == _sz", " [clone ", "cannyThreshold > 0", "E`NFH[ NFO[ OFPY \\FO[ \\FV[ ]FW[ KFOF \\F`F E[K[ S[Z[", "_arrays && (_ptrs || _planes)", "data.cols <= evects.rows && dst.rows == data.rows", "H]YMXOVQTRQROQNPMNMKNIPGSFVFXGYHZJZNYRXUVXTZQ[N[LZKXKWLVMWLX OQNONKOIQGSF XGYIYNXRWUUXSZQ[", "\"mtrl_picker_text_input_month_abbr\" : \"m\"", "Invalid image type", "MWQMNV QMUMVNVPUQSRPR QRRUSVTVUU", "AXCRGRR` GSRa FSRb X:Rb", "void cvRemoveNodeFromTree(void*, void*)", "LXNMNV NMRV VMRV VMVV", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "cv::Ptr<cv::BaseFilter> cv::getLinearFilter(int, int, cv::InputArray, cv::Point, double, int)", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "H\\ZRYTWUVUTTSSQPPONNMNKOJQJRKTMUNUPTQSSPTOVNWNYOZQZR", "\"search_menu_title\" : \"Search\"", "H0.isContinuous()", "LZRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXWXYWZV", "dp > 0.0", "I\\XFX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "\"logout\" : \"\u0417\u043c\u0456\u043d\u0430 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430\"", "vector::reserve", "step[dims-1] == (size_t)CV_ELEM_SIZE(flags)", "void cv::GlArrays::setNormalArray(cv::InputArray)", "\"common_google_play_services_notification_channel_name\" : \"Google Play services availability\"", "\"common_signin_button_text_long\" : \"\u0412\u043e\u0439\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 Google\"", "i < src.channels()", "idiva", "\"connect\" : \"\u041f\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438\"", "ranges[i][k] < ranges[i][k+1]", "\"phoneAsLoginText\" : \"\u0412\u0456\u0434\u0442\u0435\u043f\u0435\u0440 \u0432\u0445\u0456\u0434 \u0434\u043e \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0434\u0430\u0442\u043a\u0443 \u043c\u043e\u0436\u043d\u0430 \u0437\u0434\u0456\u0439\u0441\u043d\u0438\u0442\u0438 \u0437\u0430 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0443, \u044f\u043a\u0438\u0439 \u0412\u0438 \u0432\u043a\u0430\u0437\u0430\u043b\u0438, \u044f\u043a \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u0438\u0439.\n\u041f\u0440\u0438 \u0432\u0438\u043d\u0438\u043a\u043d\u0435\u043d\u043d\u0456 \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u0445 \u0437\u0430\u043f\u0438\u0442\u0430\u043d\u044c, \u0431\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0437\u0432\u0435\u0440\u043d\u0456\u0442\u044c\u0441\u044f \u0437\u0430 \u043d\u043e\u043c\u0435\u0440\u043e\u043c %1$s\"", "\"save_without_sign\" : \"\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u0431\u0435\u0437 \u043f\u0456\u0434\u043f\u0438\u0441\u0443\"", "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", "H\\VFNb QMNNLPKSKVLXNZQ[S[VZXXYUYRXPVNSMQM", "15CvOpenGlFuncTab", "KYLPMPNQNRMTMUNVPVQURSSP RSRUSVUVVUWRWP", "F]ILHLGKGIHGJFNFMHLLKUJ[ LLLUK[ VFTHRLOUMYK[ VFUHTLSUR[ TLTUS[ `F^G\\IZLWUUYS[", "void* cv::TLSDataContainer::getData() const", "cv::RotatedRect cv::minAreaRect(cv::InputArray)", "Promise already satisfied", "\"abc_menu_space_shortcut_label\" : \"\u043f\u0440\u043e\u0431\u0456\u043b\"", "\"login_not_in_range\" : \"\u041b\u043e\u0433\u0456\u043d \u043c\u0430\u0454 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u0432\u0456\u0434 %1$d \u0434\u043e %2$d \u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0432 (\u043b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0456 \u043b\u0456\u0442\u0435\u0440\u0438, \u0446\u0438\u0444\u0440\u0438 0\u20139, \u0441\u0438\u043c\u0432\u043e\u043b\u0438 @ _ ~)\"", "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)", "\"contactBank\" : \"\u0417\u0432'\u044f\u0437\u0430\u0442\u0438\u0441\u044f \u0437 \u0431\u0430\u043d\u043a\u043e\u043c\"", "void cv::insertImageCOI(cv::InputArray, CvArr*, int)", "E_RJIZ RJ[Z", "Valid XML should start with '<?xml ...?>'", "argType == Param::INT || argType == Param::BOOLEAN || argType == Param::REAL || argType == Param::STRING || argType == Param::MAT || argType == Param::MAT_VECTOR || argType == Param::ALGORITHM || argType == Param::SHORT || argType == Param::FLOAT || argType == Param::UNSIGNED_INT || argType == Param::UINT64 || argType == Param::UCHAR", "graph", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/samplers.cpp", "\"amount\" : \"Amount\"", "G]OFI[K[ PFJ[ LFQFK[ MTOPQNSMUMWNXPXSVX WNWRVVVZ WPUUUXVZW[Y[[Y\\W MFPG NFOH", "\"disable_fingerprint_question\" : \"\u0412\u0438 \u0434\u0456\u0439\u0441\u043d\u043e \u0431\u0430\u0436\u0430\u0454\u0442\u0435 \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u0432\u0445\u0456\u0434 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u0430 \u043f\u0430\u043b\u044c\u0446\u044f?\"", "\"added_new_fingerprint\" : \"\u041d\u0430 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439 \u0431\u0443\u0432 \u0434\u043e\u0434\u0430\u043d\u0438\u0439 \u043d\u043e\u0432\u0438\u0439 \u0432\u0456\u0434\u0431\u0438\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u044f. \u0414\u043b\u044f \u0432\u0445\u043e\u0434\u0443 \u0432 \u0434\u043e\u0434\u0430\u0442\u043e\u043a \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043b\u043e\u0433\u0456\u043d \u0442\u0430 \u043f\u0430\u0440\u043e\u043b\u044c. \u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0430\u043a\u0442\u0438\u0432\u0443\u0432\u0430\u0442\u0438 \u0432\u0445\u0456\u0434 \u0437\u0430 \u0432\u0456\u0434\u0431\u0438\u0442\u043a\u043e\u043c \u043f\u0430\u043b\u044c\u0446\u044f \u0432 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\u0445 \u0434\u043e\u0434\u0430\u0442\u043a\u0430\"", "count", "G\\VMV[ WMW[ ZMOMLNKPKQLSOTVT OMMNLPLQMSOT TTQUPVNZM[ TTRUQVOZN[L[KZJX S[Z[", "\"offerText\" : \"\u041f\u0456\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044f\u043c \u0434\u0430\u043d\u043e\u0457 \u0417\u0433\u043e\u0434\u0438 \u041a\u043b\u0456\u0454\u043d\u0442 \u043d\u0430\u0434\u0430\u0454 \u0410\u0422 \u00ab\u041e\u0422\u041f \u0411\u0430\u043d\u043a\u00bb (\u043d\u0430\u0434\u0430\u043b\u0456 \u2013 \u00ab\u0411\u0430\u043d\u043a\u00bb) \u0441\u0432\u043e\u044e \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0443 \u0437\u0433\u043e\u0434\u0443 \u043d\u0430 \u043e\u0431\u0440\u043e\u0431\u043a\u0443 \u0411\u0430\u043d\u043a\u043e\u043c \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 (\u044f\u043a \u0434\u0430\u043d\u0438\u0439 \u0442\u0435\u0440\u043c\u0456\u043d \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0438\u0436\u0447\u0435) \u0412\u043b\u0430\u0441\u043d\u0438\u043a\u0430 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0437 \u043c\u0435\u0442\u043e\u044e:\n\n - \u0443\u043a\u043b\u0430\u0434\u0435\u043d\u043d\u044f, \u0437\u043c\u0456\u043d\u0438, \u043f\u0440\u0438\u043f\u0438\u043d\u0435\u043d\u043d\u044f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432, \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432, \u0430 \u0442\u0430\u043a\u043e\u0436 \u0434\u043b\u044f \u0437\u0434\u0456\u0439\u0441\u043d\u0435\u043d\u043d\u044f \u0434\u0456\u0439, \u043f\u043e\u0432\u2019\u044f\u0437\u0430\u043d\u0438\u0445 \u0456\u0437 \u0443\u043a\u043b\u0430\u0434\u0435\u043d\u043d\u044f\u043c, \u0437\u043c\u0456\u043d\u043e\u044e, \u043f\u0440\u0438\u043f\u0438\u043d\u0435\u043d\u043d\u044f\u043c \u0442\u0430/\u0430\u0431\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432, \u0443 \u0442\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0456 \u0448\u043b\u044f\u0445\u043e\u043c \u0437\u0434\u0456\u0439\u0441\u043d\u0435\u043d\u043d\u044f \u043f\u0440\u044f\u043c\u0438\u0445 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0456\u0432 \u0456\u0437 \u0412\u043b\u0430\u0441\u043d\u0438\u043a\u043e\u043c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0437\u0430\u0441\u043e\u0431\u0456\u0432 \u0437\u0432\u2019\u044f\u0437\u043a\u0443;\n - \u0437\u0430\u0445\u0438\u0441\u0442 \u0411\u0430\u043d\u043a\u043e\u043c \u0441\u0432\u043e\u0457\u0445 \u043f\u0440\u0430\u0432 \u0442\u0430 \u0456\u043d\u0442\u0435\u0440\u0435\u0441\u0456\u0432.\n\n \u041f\u0456\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044f\u043c \u0434\u0430\u043d\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0443 \u0412\u043b\u0430\u0441\u043d\u0438\u043a \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u043d\u0430\u0434\u0430\u0454 \u0411\u0430\u043d\u043a\u0443 \u0441\u0432\u043e\u044e \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0443 \u0437\u0433\u043e\u0434\u0443 \u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 (\u043f\u043e\u0448\u0438\u0440\u0435\u043d\u043d\u044f), \u0443 \u0442.\u0447. \u0442\u0440\u0430\u043d\u0441\u043a\u043e\u0440\u0434\u043e\u043d\u043d\u0443, \u0411\u0430\u043d\u043a\u043e\u043c \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0442\u0440\u0435\u0442\u0456\u043c \u043e\u0441\u043e\u0431\u0430\u043c (\u043e\u0441\u043e\u0431\u0438, \u0437 \u044f\u043a\u0438\u043c\u0438 \u0411\u0430\u043d\u043a \u043f\u0435\u0440\u0435\u0431\u0443\u0432\u0430\u0454 \u0432 \u0434\u043e\u0433\u043e\u0432\u0456\u0440\u043d\u0438\u0445 \u0432\u0456\u0434\u043d\u043e\u0441\u0438\u043d\u0430\u0445, \u0442\u0430/\u0430\u0431\u043e \u0447\u043b\u0435\u043d\u0438 \u0413\u0440\u0443\u043f\u0438 \u041e\u0422\u041f, \u043d\u0430\u0434\u0430\u043b\u0456 \u2013 \u0422\u0440\u0435\u0442\u0456 \u043e\u0441\u043e\u0431\u0438), \u0437\u043c\u0456\u043d\u0443, \u0437\u043d\u0438\u0449\u0435\u043d\u043d\u044f \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0430\u0431\u043e \u043e\u0431\u043c\u0435\u0436\u0435\u043d\u043d\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0434\u043e \u043d\u0438\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e \u0434\u043e \u0432\u0438\u043c\u043e\u0433 \u0417\u0430\u043a\u043e\u043d\u0443 \u0423\u043a\u0440\u0430\u0457\u043d\u0438 \u00ab\u041f\u0440\u043e \u0437\u0430\u0445\u0438\u0441\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445\u00bb \u0432\u0456\u0434 01.06.2010 \u0440\u043e\u043a\u0443 (\u043d\u0430\u0434\u0430\u043b\u0456 \u2013 \u00ab\u0417\u0430\u043a\u043e\u043d\u00bb) \u0442\u0430 \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e\u0441\u0442\u0456 \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0412\u043b\u0430\u0441\u043d\u0438\u043a\u0443 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u043f\u0438\u0441\u044c\u043c\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u0437\u0434\u0456\u0439\u0441\u043d\u0435\u043d\u043d\u044f \u0437\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0445 \u0434\u0456\u0439.\n\n \u041f\u0456\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044f\u043c \u0434\u0430\u043d\u043e\u0433\u043e \u0414\u043e\u0433\u043e\u0432\u043e\u0440\u0443 \u0412\u043b\u0430\u0441\u043d\u0438\u043a \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0443\u0454, \u0449\u043e \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0437\u0431\u043e\u0440\u0443 \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0411\u0430\u043d\u043a \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 \u0439\u043e\u0433\u043e \u043f\u0440\u043e \u0432\u043e\u043b\u043e\u0434\u0456\u043b\u044c\u0446\u044f \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445, \u0441\u043a\u043b\u0430\u0434 \u0442\u0430 \u0437\u043c\u0456\u0441\u0442 \u0437\u0456\u0431\u0440\u0430\u043d\u0438\u0445 \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445, \u043f\u0440\u0430\u0432\u0430, \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u0456 \u0417\u0430\u043a\u043e\u043d\u043e\u043c, \u043f\u0440\u043e \u043c\u0435\u0442\u0443 \u0437\u0431\u043e\u0440\u0443 \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u0442\u0430 \u043e\u0441\u0456\u0431, \u044f\u043a\u0438\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0439\u043e\u0433\u043e \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0456 \u0434\u0430\u043d\u0456.\n\n \u041a\u043e\u043c\u043f\u0430\u043d\u0456\u044f \u043f\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0436\u0443\u0454 (\u0433\u0430\u0440\u0430\u043d\u0442\u0443\u0454), \u0449\u043e \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0456 \u0434\u0430\u043d\u0456 \u0444\u0456\u0437\u0438\u0447\u043d\u0438\u0445 \u043e\u0441\u0456\u0431, \u044f\u043a\u0456 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0411\u0430\u043d\u043a\u0443, \u0437\u0434\u0456\u0439\u0441\u043d\u044e\u0454\u0442\u044c\u0441\u044f \u0437\u0430 \u0437\u0433\u043e\u0434\u043e\u044e \u0442\u0430\u043a\u0438\u0445 \u0444\u0456\u0437\u0438\u0447\u043d\u0438\u0445 \u043e\u0441\u0456\u0431 \u044f\u043a\u0456 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u0456 \u043f\u0440\u043e \u0432\u0456\u0434\u043e\u043c\u043e\u0441\u0442\u0456, \u0437\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0456 \u0432 \u0447.2 \u0441\u0442.12 \u0417\u0430\u043a\u043e\u043d\u0443.\n\n \u0422\u0435\u0440\u043c\u0456\u043d \u00ab\u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0456 \u0434\u0430\u043d\u0456\u00bb \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0431\u0443\u0434\u044c-\u044f\u043a\u0443 \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e \u043f\u0440\u043e \u0444\u0456\u0437\u0438\u0447\u043d\u0443 \u043e\u0441\u043e\u0431\u0443 \u0430\u0431\u043e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e, \u0449\u043e \u0441\u0442\u043e\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u0444\u0456\u0437\u0438\u0447\u043d\u043e\u0457 \u043e\u0441\u043e\u0431\u0438, \u0432 \u0442\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0456, \u043e\u0434\u043d\u0430\u043a \u043d\u0435 \u0432\u0438\u043a\u043b\u044e\u0447\u043d\u043e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044f \u0449\u043e\u0434\u043e \u043f\u0440\u0456\u0437\u0432\u0438\u0449\u0430, \u0456\u043c\u0435\u043d\u0456, \u043f\u043e \u0431\u0430\u0442\u044c\u043a\u043e\u0432\u0456, \u0434\u0430\u043d\u0438\u0445, \u044f\u043a\u0456 \u0437\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0456 \u0432 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0456 (\u0430\u0431\u043e \u0434\u0430\u043d\u0438\u0445, \u044f\u043a\u0456 \u0437\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0456 \u0432 \u0456\u043d\u0448\u043e\u043c\u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0456, \u0449\u043e \u043f\u043e\u0441\u0432\u0456\u0434\u0447\u0443\u0454 \u043e\u0441\u043e\u0431\u0443), \u0440\u0435\u0454\u0441\u0442\u0440\u0430\u0446\u0456\u0439\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u043e\u0431\u043b\u0456\u043a\u043e\u0432\u043e\u0457 \u043a\u0430\u0440\u0442\u043a\u0438 \u043f\u043b\u0430\u0442\u043d\u0438\u043a\u0430 \u043f\u043e\u0434\u0430\u0442\u043a\u0456\u0432, \u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d\u0441\u0442\u0432\u0430, \u043c\u0456\u0441\u0446\u044f \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e \u043f\u0435\u0440\u0435\u0431\u0443\u0432\u0430\u043d\u043d\u044f, \u043c\u0456\u0441\u0446\u044f \u0440\u043e\u0431\u043e\u0442\u0438, \u043f\u043e\u0441\u0430\u0434\u0438, \u043d\u043e\u043c\u0435\u0440\u0456\u0432 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u0438\u0445 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0456\u0432/\u0444\u0430\u043a\u0441\u0456\u0432, \u0430\u0434\u0440\u0435\u0441\u0438 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438, \u0442\u043e\u0449\u043e.\"", "K[MKRQ NKSQMX MKWKXOVK NWWW MXWXXTVX", "I[NFN[ OFO[ KFRF K[Z[ZUY[", "N2cv22warpPerspectiveInvokerE", "MXVIUITHTGUFVFWGWIVKULSM UGUHVHVGUG VIVJUL", "void cv::polylines(cv::Mat&, const Point**, const int*, int, bool, const Scalar&, int, int, int)", "void (* cv::getConvertElem(int, int))(const void*, void*, int)", "void cvLog(const CvArr*, CvArr*)", "J[UKVLWLWKQKOLNNNX QKPLONOX VOVX WOWX LOWO LXQX TXYX", "\"choose_cert\" : \"Select a certificate\"", "cv::Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int, int, int, int, double)", "\"file_provider\" : \"ua.com.cs.ifobs.mobile.android.otp.fileprovider\"", "G]JXK[O[MWKSJPJLKIMGPFTFWGYIZLZPYSWWU[Y[ZX MWLTKPKLLINGPF TFVGXIYLYPXTWW KZNZ VZYZ", "LYQKPLPMQN TKULUMTN RNPOOQORPTRUSUUTVRVQUOSNRN RURY SUSY OWVW", "\"keyPass\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\"", "std::basic_istream<char, std::char_traits<char> >", "mask is empty", "hull.checkVector(1, CV_32S) > 2", "24EmptyDeviceInfoFuncTable", "MWRQQRRSSRRQ", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "MXSMRNROSPTPUOUNTMSM SNSOTOTNSN PXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "void icvInitMemStorage(CvMemStorage*, int)", "\"project_id\" : \"otpsmart-firebase\"", "\"path_password_eye_mask_strike_through\" : \"M2,4.27 L19.73,22 L22.27,19.46 L4.54,1.73 L4.54,1 L23,1 L23,23 L1,23 L1,4.27 Z\"", "bool GCGraph<TWeight>::inSourceSegment(int) [with TWeight = double]", "E_MFMHKYK[ NGLX OFMW UFMWK[ UFUHSYS[ VGTX WFUW ]GUWS[ JFRF UFWF ZF`F KFNG LFMH PFNI QFNG [F]G _F]G", "(m1type == CV_16SC2 && (nninterpolate || m2type == CV_16UC1 || m2type == CV_16SC1)) || (m2type == CV_16SC2 && (nninterpolate || m1type == CV_16UC1 || m1type == CV_16SC1)) || (m1type == CV_32FC1 && m2type == CV_32FC1) || (m1type == CV_32FC2 && !m2->data)", "CvHistogram* cvCreateHist(int, int*, CvHistType, float**, int)", "G\\KFK[ KFTFWGXHYJYLXNWOTPKP RPY[", "\"my_finances\" : \"My finances\"", "OXRRUOWLXIXGWFUGTIKdKfLgNfOcPZQ[S[UZVYXV TISNRRO[M`Kd", "\"my_finances\" : \"\u041c\u043e\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b\"", "JZLLMKOKQLRNRPQRPSNT OKPLQNQQPS VKUX WKTX NTXT", "%.*Lf", "\"generate_cert_repeate_password_hint\" : \"Confirm key password\"", "H\\KFW[ LFX[ MFY[ XGLZ IFPF UF[F I[O[ T[[[ JFMH NFMH OFMG VFXG ZFXG LZJ[ LZN[ WZU[ WYV[ WYZ[", "\"common_google_play_services_enable_title\" : \"\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b Google Play\"", "\"photoPayment\" : \"\u0424\u043e\u0442\u043e\u043a\u0430\u0441\u0430\"", "\"archive\" : \"\u041f\u0435\u0440\u0435\u043a\u0430\u0437\u0438\"", "NVPPPV PSQQSPTP", "CvGraph* cvCreateGraph(int, int, int, int, CvMemStorage*)", "scaleStep", "\"abc_prepend_shortcut_label\" : \"Menu+\"", "St9bad_alloc", "int cvGetSeqReaderPos(CvSeqReader*)", "The accumulator threshold for the template centers at the detection stage. The smaller it is, the more false positions may be detected.", "vfpv4", "\"extCertRequested\" : \"The request for key connection is under processing\"", "void cv::Mat::resize(size_t)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "CaHFH[ IFI[ EFLF IPPPSQTRUTUWTYSZP[E[ PPRQSRTTTWSYRZP[ [F[[ \\F\\[ XF_F X[_[", "Incorrect size of input array", "mask.depth() == CV_8U && (mcn == 1 || mcn == cn)", "\"search_menu_title\" : \"\u041f\u043e\u0448\u0443\u043a\"", "\"callback\" : \"\u0417\u0430\u043c\u043e\u0432\u0438\u0442\u0438 \u0434\u0437\u0432\u0456\u043d\u043e\u043a \u0437 \u0431\u0430\u043d\u043a\u0443\"", "lb.type() == ub.type()", "cv::Ptr<cv::FilterEngine> cv::createLinearFilter(int, int, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::FixedPtCast<int, unsigned char, 15>; VecOp = cv::RemapVec_8u; AT = short int; cv::Scalar = cv::Scalar_<double>]", "NULL destination", "Non-positive width or height", "G]JMKNLPMTN[ KMLNMPNTOZ HPINJMLMMNNPOTPZ VVWTXQXMYMZNYQXSVVTXQZN[ XRYOYM", "\"abc_menu_enter_shortcut_label\" : \"\u0412\u0432\u043e\u0434\"", "KYRJKVYVRJ", "N2cv11MorphFilterINS_5MinOpIfEENS_9MorphFVecINS_7VMin32fEEEEE", "N2cv18ResizeArea_InvokerIffEE", "The YAML streams must start with '---', except the first one", "H[LMLb LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "All histograms must have 32fC1 type", "\"search_menu_title\" : \"\u041f\u043e\u0438\u0441\u043a\"", "src.size() == dst.size() && (src.cols == 1 || src.rows == 1)", "The actual type is different from the specified type", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/segmentation.cpp", "H\\SIS[ THTZ UFU[ UFJUZU P[X[ SZQ[ SYR[ UYV[ UZW[", "Null pointers to source file node or destination array", "*N12_GLOBAL__N_113GHT_Guil_FullE", "H\\PMMNLOKQKSLUMVPWTWWVXUYSYQXOWNTMPM MNLPLSMUNVPW WVXTXQWOVNTM", "N2cv11MorphFilterINS_5MaxOpIsEENS_9MorphIVecINS_7VMax16sEEEEE", "\"mtrl_picker_invalid_range\" : \"Invalid range.\"", "NVRBRb", "\"mtrl_picker_invalid_format_use\" : \"Use: %1$s\"", "cv::Ptr<cv::FilterEngine> cv::createGaussianFilter(int, cv::Size, double, double, int)", "\"abc_search_hint\" : \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\"", "scn == 1 && dcn == 3", "\"download\" : \"Download\"", "unsigned int", "\"myCards\" : \"\u041c\u043e\u0438 \u043a\u0430\u0440\u0442\u044b \u041e\u0422\u041f \u0411\u0430\u043d\u043a\u0430\"", "LXNQOPPPQQQSPV QSRQTPUPVQVSUVTY", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[ LbXF", "\"abc_menu_space_shortcut_label\" : \"space\"", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "void cv::thresh_16s(const cv::Mat&, cv::Mat&, short int, short int, int)", "No vertices data", "imageEdges.type() == CV_8UC1", "void icvWriteImage(CvFileStorage*, const char*, const void*, CvAttrList)", "void cv::GlBuffer::unmapHost()", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF", "St16bad_array_length", "/sys/devices/system/cpu/present", "nnfunc != 0", "void cv::thresh_8u(const cv::Mat&, cv::Mat&, uchar, uchar, int)", "void cv::vconcat(const cv::Mat*, size_t, cv::OutputArray)", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[ N@N?M?M@NBPCTCVBW@", "St18__moneypunct_cacheIcLb0EE", "F^ZIJRZ[", "The total matrix size does not fit to \"size_t\" type", "\"demoAlertMessage\" : \"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u043f\u0440\u0430\u0446\u044e\u0454 \u0432 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0456\u0439\u043d\u043e\u043c\u0443 \u0440\u0435\u0436\u0438\u043c\u0456. \u0424\u0443\u043d\u043a\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0456\u0441\u0442\u044c \u043e\u0431\u043c\u0435\u0436\u0435\u043d\u0430.\"", "\"demo\" : \"\u0414\u0415\u041c\u041e\"", "\"refuse_password_button_ok\" : \"\u041e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f\"", "\"repeatPinCode\" : \"\"", "Minimal scale to detect.", "basic_string::compare", " <!-- resumed -->", "void* icvReadImage(CvFileStorage*, CvFileNode*)", "\"news\" : \"News\"", "JZLTLRMPOPUSWSXR LRMQOQUTWTXRXP", "N2cv8Filter2DIhNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEE", "MWOMOV UMUV OMUM", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<float>; VecOp = cv::MorphFVec<cv::VMin32f>; cv::Point = cv::Point_<int>]", "opencv-matrix", "The operation is neither 'array op array' (where arrays have the same size and type), nor 'array op scalar', nor 'scalar op array'", "\"common_open_on_phone\" : \"\u0412\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u043d\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0456\"", "KYRJYNKVRZ", "uchar* cvPtr2D(const CvArr*, int, int, int*)", "\"less_symbol\" : \"<\"", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/imgproc/src/sumpixels.cpp", "void cv::findContours(cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArray, int, int, cv::Point)", "KYU@RCPFOIOLPOSVTYT\\S_Ra RCQEPHPKQNTUUXU[T^RaOd", "CvPoint cvReadChainPoint(CvChainPtReader*)", "MWRFQHRTSHRF RHRN RYQZR[SZRY", "\"mtrl_picker_confirm\" : \"\"", "cv::Mat::Mat(const cv::Mat&, const cv::Range&, const cv::Range&)", "\"logins_dont_match\" : \"Make sure that values of the fields \u00ab%1$s\u00bb and \u00ab%1$s\u00bb are identical\"", "NVNNNVVVVNNN OOOU POPU QOQU RORU SOSU TOTU UOUU", "ny > 0 && nx > 0", "bool cv::checkRange(cv::InputArray, bool, cv::Point*, double, double)", "\"uppercase_letters\" : \"\u2022 uppercase letters\"", "Requested object was not found", "J[RMPNNPMSMVNYOZQ[S[UZWXXUXRWOVNTMRM", "G]_BEb", "void icvReleaseGraph(void**)", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/stat.cpp", "!fixedSize() || ((Mat*)obj)->size.operator()() == _sz", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallVec_32f]", "KYNORX OORV VORXP[N\\M\\L[LZMZM[L[ LOQO TOXO", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "N2cv6RowSumIhiEE", "\"common_signin_button_text_long\" : \"\u0423\u0432\u0456\u0439\u0442\u0438 \u0432 \u043e\u0431\u043b\u0456\u043a. \u0437\u0430\u043f\u0438\u0441 Google\"", "\"changeGcmYes\" : \"\u0414\u0430, \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u0430 \u044d\u0442\u043e\"", "CV_MAT_CN(_type) == e.a.channels()", "The source array must be 1d coninuous vector", "0 < coi && coi <= 4", "H[LVMYNZP[R[UZWWXTXQWOVNTMRMONMQLTHb R[TZVWWTWPVN RMPNNQMTIb", "!_src.empty()", "char* icvXMLParseTag(CvFileStorage*, char*, CvStringHashNode**, CvAttrList**, int*)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "G]UFOb VFNb QMMNKPJSJVKXMZP[S[WZYXZUZRYPWNTMQM QMNNLPKSKVLXNZP[ S[VZXXYUYRXPVNTM", "F_SHTITLSPRSQUOXMZK[J[IZIWJRKOLMNJPHRGUFYF[G\\H]J]M\\O[PYQVQSPTQUSUXVZX[ZZ[Y]V", "The library is compiled without CUDA support", "\"certificationCenter\" : \"CA\"", "March", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEE", "KYNBPDRGTKUPUTTYR]P`Nb PDRHSKTPTTSYR\\P`", "void cv::Mat::push_back(const cv::Mat&)", "\"mtrl_picker_toggle_to_calendar_input_mode\" : \"Switch to calendar input mode\"", "NVROQPRQSPRO RVQWRXSWRV", "E_\\O\\N[N[P]P]N\\M[MYNWPRXPZN[K[HZGXGVHTISKRPPROTMUKUITGRFPGOIOLPRQURWTZV[X[YYYX L[HZ IZHXHVITJSLR PPQSTYVZ K[JZIXIVJTKSMRRO OLPOQRSVUYWZXZYY", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "I\\RMR[ SMS[ MMLRLMYMYRXM O[V[", "void cvClearSeq(CvSeq*)", "St17moneypunct_bynameIcLb1EE", "G\\KFK[ KFRFUGWIXKYNYSXVWXUZR[K[", "H]TJO[Q[ WFUJP[ WFQ[ WFTIQKOL TJRKOL", "void cv::extractImageCOI(const CvArr*, cv::OutputArray, int)", "\"error\" : \"\u041e\u0448\u0438\u0431\u043a\u0430\"", "E_NFH[ OFI[ [FU[ \\FV[ KFRF XF_F LPXP E[L[ R[Y[", "x%02x", "dst.depth() == src.depth() && dst.channels() == m.rows", "J[TFTR OIYO YIOO", "LYXKLX YKMX QKONPKYK LXUXVUTX", "\"fingerprint_acquired_too_fast\" : \"Finger moved too fast. Please try again.\"", "\"keyPass\" : \"Private key password\"", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = double; VecOp = cv::RowNoVec]", "One of histograms is sparse and other is not", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "void icvXMLWriteTag(CvFileStorage*, const char*, int, CvAttrList)", "E_IR[R", "St14overflow_error", "void cv::crossCorr(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Size, int, cv::Point, double, int)", "\"masterpass_success_path_1\" : \"\u041c\u0438 \u043d\u0430\u0434\u0456\u0441\u043b\u0430\u043b\u0438 \u0432\u0430\u043c SMS \u0437 \u043f\u0430\u0440\u043e\u043b\u0435\u043c \u0432\u0456\u0434 \u0433\u0430\u043c\u0430\u043d\u0446\u044f Masterpass. \u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0439\u0442\u0435 \u0439\u043e\u0433\u043e \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0443 \u0434\u043e \u043e\u0441\u043e\u0431\u0438\u0441\u0442\u043e\u0433\u043e \u043a\u0430\u0431\u0456\u043d\u0435\u0442\u0443 \u043d\u0430 \u0441\u0430\u0439\u0442\u0456\"", "void cv::writeMat(std::ostream&, const cv::Mat&, char, char, bool)", "F_\\Q[OYNWNUOTPQTPUNVLVJUISIQJOLNNNPOQPTTUUWVYV[U\\S\\Q", "\"saveKey\" : \"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u044e\u0447\"", "\"password_must_contain\" : \"The password must contain:\"", "false", "Map element should have a name", "KZZGYHZI[H[GZFXFVGUHTJSMP[O_Na XFVHUJTNRWQ[P^O`NaLbJbIaI`J_K`Ja OMYM", "\"common_google_play_services_unsupported_text\" : \"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \"%1$s\" \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u044b Google\u00a0Play. \u041e\u043d\u0438 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435.\"", "J[MMX[ XMM[", "\"phone\" : \"Phone\"", "map1.size().area() > 0", "\"confirmationCode\" : \"The confirmation code\"", "JZPKLX QKMX YKOR RPTX SPUX NKSK VK[K JXOX RXWX", "February", "void icvXMLEndWriteStruct(CvFileStorage*)", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "MWSHS\\ THT\\ OHTH O\\T\\", "Unknown formatter", "void cvThreshHist(CvHistogram*, double)", "\"errorTryAgain\" : \"An error has occurred. Please, try again or contact the bank.\"", "\"abc_searchview_description_clear\" : \"Clear query\"", "virtual void EmptyFuncTable::convert(const cv::gpu::GpuMat&, cv::gpu::GpuMat&) const", "\"item_view_role_description\" : \"Tab\"", "Unsupported format or combination of formats", "void cvInsertNodeIntoTree(void*, void*, void*)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short unsigned int, float, float>; VResize = cv::VResizeLanczos4<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "The array is too big", "KZVOTVTWUXWXXWYU WOUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "\"next\" : \"\u0414\u0430\u043b\u0456\"", "I[WML[ XMM[ MMLQLMXM L[X[XWW[", "/Users/lkorth/card.io-Android-source/opencv/opencv-2.4.13/modules/core/src/gpumat.cpp", "void cvInRangeS(const void*, CvScalar, CvScalar, void*)", "Bad histogram pointer", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallVec_32f]", "H\\XMWPURRSQSNRLPKMKLLINGQFSFVGXIYLYRXVWXUZR[O[MZLXLWMVNWMX QSORMPLMLLMIOGQF SFUGWIXLXRWVVXTZR[", "Input sequence must be polygon (closed 2d curve)", "JZKFMFOGPHX[ RML[", "CvMatND* cvCloneMatND(const CvMatND*)", "\"exit\" : \"\u0412\u044b\u0445\u043e\u0434\"", "imageDx.type() == CV_32FC1 && imageDx.size() == imageSize", "void cvDilate(const CvArr*, CvArr*, IplConvKernel*, int)", "void cvReleasePyramid(CvMat***, int)", "N2cv12_OutputArrayE", "\"changeLanguage\" : \"\u0417\u043c\u0456\u043d\u0438\u0442\u0438 \u043c\u043e\u0432\u0443\"", "F_NFKQJUJXKZN[R[UZWXXU\\F OFLQKUKXLZN[ KFRF YF_F", "JZNPPPPONPMQLSLUMWNXPXQWRUSR LUNWPWRU RRRWSXUXWVXTXRWPVOVPWP RUSWUWWV", "void cv::_SVDcompute(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "E[HMLMRY KMR[ [BR[", "angleStep", "\"download\" : \"\u0417\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438\"", "int cv::Subdiv2D::locate(cv::Point2f, int&, int&)", "\"text\" : \"\u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\"", "wholeSize.width > 0 && wholeSize.height > 0", "\"amountToMustExceedAmountFrom\" : \"\u0421\u0443\u043c\u043c\u0430 \"\u0414\u043e\" \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0443\u043c\u043c\u044b \"\u041e\u0442\"\"", "LZLVNSPO SFMXMZO[P[RZTXUUURVVWWXWZV TFNXNZO[", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "JZRFQHRJSHRF RFRT RPQRSVRXQVSRRP RTRb R^Q`RbS`R^ LMNNPMNLLM LMXM TMVNXMVLTM L[N\\P[NZL[ L[X[ T[V\\X[VZT[", "void cv::SparseMat::erase(const int*, size_t*)", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF OGMJLOLRMWOZ NYQZSZVY UZWWXRXOWJUG VHSGQGNH", "St17__timepunct_cacheIcE", "\"fingerprint_description\" : \"Confirm fingerprint to continue\"", "CvGraphEdge* cvFindGraphEdge(const CvGraph*, int, int)", "\"partners\" : \"Partners\"", "\"isValidUntilDate\" : \"\u0414\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u043e\"", "KZOOK\\ POL\\ NUNWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "\"fingerprints\" : \"\u041e\u0442\u043f\u0435\u0447\u0430\u0442\u043a\u0438:\"", "\"ruleError1312\" : \"The values of the 'New password' and 'Current password' fields must be different.\"", "E_IM[M IR[R IW[W", "img.rows >= templ.rows && img.cols >= templ.cols", "\"disconnectCertFingerprintDescription\" : \"\u0412\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s, %2$s\"", "graph pointer is NULL", "\"more_symbol\" : \">\"", "\"connection\" : \"\u041f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f\"", "void cvNormalize(const CvArr*, CvArr*, double, double, int, const CvArr*)", "\"changeLanguage\" : \"Change language\"", "cv::SymmColumnSmallVec_32s16s::SymmColumnSmallVec_32s16s(const cv::Mat&, int, int, double)", "NWUFSM VFSM", "virtual size_t EmptyDeviceInfoFuncTable::totalMemory(int) const", "\"amountExceedsBalance\" : \"\u0412\u0432\u0435\u0434\u0435\u043d\u0430 \u0441\u0443\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u0438\u0449\u0443\u0454 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u0437\u0430\u043b\u0438\u0448\u043e\u043a\"", "2if%s", "Source is not a sequence nor matrix", "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2", "\"passwordSymbolPatternNotValid\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043c\u0430\u0454 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u0446\u0438\u0444\u0440\u0438, \u043b\u0456\u0442\u0435\u0440\u0438 \u0443 \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u043c\u0443 \u0442\u0430 \u043d\u0438\u0436\u043d\u044c\u043e\u043c\u0443 \u0440\u0435\u0433\u0456\u0441\u0442\u0440\u0430\u0445 \u0442\u0430 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0441\u0438\u043c\u0432\u043e\u043b\u0438%1$s\"", "virtual void EmptyFuncTable::mallocPitch(void**, size_t*, size_t, size_t) const", "void cvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*, int)", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ UKVJVNUKSJPJNKMLLOLRMUNVPWSWUVVT PJNLMOMRNUPW", "int cv::borderInterpolate(int, int, int)", "bad_function_call", "I[MSMVNYOZQ[S[UZWXXUXRWOVNTMRMPNNPMSIb", "\"bottom_sheet_behavior\" : \"com.google.android.material.bottomsheet.BottomSheetBehavior\"", "\"generate_cert_password_hint\" : \"\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u043a\u043b\u044e\u0447\u0430\"", "LXNPPV RPPV RPTV VPTV", "v.size() == svd.vt.size()", "\"manageKeysHeader\" : \"\u041a\u0435\u0440\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u044e\u0447\u0430\u043c\u0438\"", "void cvGraphRemoveEdge(CvGraph*, int, int)", "std::bad_alloc"], "firebase_urls": [{"url": "https://otpsmart-firebase.firebaseio.com", "open": false}], "files": ["AndroidManifest.xml", "META-INF/CERT.RSA", "META-INF/CERT.SF", "META-INF/MANIFEST.MF", "META-INF/android-common_release.kotlin_module", "META-INF/android-crypto_release.kotlin_module", "META-INF/android-utils_release.kotlin_module", "META-INF/androidx.activity_activity.version", "META-INF/androidx.annotation_annotation-experimental.version", "META-INF/androidx.appcompat_appcompat-resources.version", "META-INF/androidx.appcompat_appcompat.version", "META-INF/androidx.arch.core_core-runtime.version", "META-INF/androidx.asynclayoutinflater_asynclayoutinflater.version", "META-INF/androidx.cardview_cardview.version", "META-INF/androidx.coordinatorlayout_coordinatorlayout.version", "META-INF/androidx.core_core.version", "META-INF/androidx.cursoradapter_cursoradapter.version", "META-INF/androidx.customview_customview.version", "META-INF/androidx.databinding_baseAdapters.version", "META-INF/androidx.databinding_library.version", "META-INF/androidx.databinding_viewbinding.version", "META-INF/androidx.documentfile_documentfile.version", "META-INF/androidx.drawerlayout_drawerlayout.version", "META-INF/androidx.fragment_fragment.version", "META-INF/androidx.gridlayout_gridlayout.version", "META-INF/androidx.interpolator_interpolator.version", "META-INF/androidx.legacy_legacy-support-core-ui.version", "META-INF/androidx.legacy_legacy-support-core-utils.version", "META-INF/androidx.legacy_legacy-support-v4.version", "META-INF/androidx.lifecycle_lifecycle-livedata-core.version", "META-INF/androidx.lifecycle_lifecycle-livedata.version", "META-INF/androidx.lifecycle_lifecycle-runtime.version", "META-INF/androidx.lifecycle_lifecycle-viewmodel.version", "META-INF/androidx.loader_loader.version", "META-INF/androidx.localbroadcastmanager_localbroadcastmanager.version", "META-INF/androidx.media_media.version", "META-INF/androidx.preference_preference.version", "META-INF/androidx.print_print.version", "META-INF/androidx.recyclerview_recyclerview.version", "META-INF/androidx.room_room-runtime.version", "META-INF/androidx.savedstate_savedstate.version", "META-INF/androidx.slidingpanelayout_slidingpanelayout.version", "META-INF/androidx.sqlite_sqlite-framework.version", "META-INF/androidx.sqlite_sqlite.version", "META-INF/androidx.swiperefreshlayout_swiperefreshlayout.version", "META-INF/androidx.transition_transition.version", "META-INF/androidx.vectordrawable_vectordrawable-animated.version", "META-INF/androidx.vectordrawable_vectordrawable.version", "META-INF/androidx.versionedparcelable_versionedparcelable.version", "META-INF/androidx.viewpager2_viewpager2.version", "META-INF/androidx.viewpager_viewpager.version", "META-INF/com.google.android.material_material.version", "META-INF/kotlin-android-extensions-runtime.kotlin_module", "META-INF/kotlin-stdlib-common.kotlin_module", "META-INF/kotlin-stdlib-jdk7.kotlin_module", "META-INF/kotlin-stdlib.kotlin_module", "META-INF/kotlinx-coroutines-android.kotlin_module", "META-INF/kotlinx-coroutines-core.kotlin_module", "META-INF/otp_release.kotlin_module", "META-INF/rxjava.properties", "META-INF/services/kotlinx.coroutines.CoroutineExceptionHandler", "META-INF/services/kotlinx.coroutines.internal.MainDispatcherFactory", "META-INF/services/org.xmlpull.v1.XmlPullParserFactory", "androidsupportmultidexversion.txt", "assets/fonts/kredit.ttf", "assets/fonts/ocraext.ttf", "assets/preview_1/dashboard_preview.json", "assets/preview_1/images/img_0.png", "assets/preview_1/images/img_1.png", "assets/preview_1/images/img_2.png", "assets/preview_1/images/img_3.png", "assets/preview_1/images/img_4.png", "assets/preview_1/images/img_5.png", "assets/preview_1/images/img_6.png", "assets/preview_1/images/img_7.png", "assets/preview_1/images/img_8.png", "assets/preview_1/images/img_9.png", "assets/preview_1/images_en/img_0.png", "assets/preview_1/images_en/img_1.png", "assets/preview_1/images_en/img_2.png", "assets/preview_1/images_en/img_3.png", "assets/preview_1/images_en/img_4.png", "assets/preview_1/images_en/img_5.png", "assets/preview_1/images_en/img_6.png", "assets/preview_1/images_en/img_7.png", "assets/preview_1/images_en/img_8.png", "assets/preview_1/images_en/img_9.png", "assets/preview_1/images_uk/img_0.png", "assets/preview_1/images_uk/img_1.png", "assets/preview_1/images_uk/img_2.png", "assets/preview_1/images_uk/img_3.png", "assets/preview_1/images_uk/img_4.png", "assets/preview_1/images_uk/img_5.png", "assets/preview_1/images_uk/img_6.png", "assets/preview_1/images_uk/img_7.png", "assets/preview_1/images_uk/img_8.png", "assets/preview_1/images_uk/img_9.png", "assets/preview_2/dashboard_preview.json", "assets/preview_2/images/img_0.png", "assets/preview_2/images/img_1.png", "assets/preview_2/images/img_10.png", "assets/preview_2/images/img_2.png", "assets/preview_2/images/img_3.png", "assets/preview_2/images/img_4.png", "assets/preview_2/images/img_5.png", "assets/preview_2/images/img_6.png", "assets/preview_2/images/img_7.png", "assets/preview_2/images/img_8.png", "assets/preview_2/images/img_9.png", "assets/preview_2/images_en/img_0.png", "assets/preview_2/images_en/img_1.png", "assets/preview_2/images_en/img_10.png", "assets/preview_2/images_en/img_2.png", "assets/preview_2/images_en/img_3.png", "assets/preview_2/images_en/img_4.png", "assets/preview_2/images_en/img_5.png", "assets/preview_2/images_en/img_6.png", "assets/preview_2/images_en/img_7.png", "assets/preview_2/images_en/img_8.png", "assets/preview_2/images_en/img_9.png", "assets/preview_2/images_uk/img_0.png", "assets/preview_2/images_uk/img_1.png", "assets/preview_2/images_uk/img_10.png", "assets/preview_2/images_uk/img_2.png", "assets/preview_2/images_uk/img_3.png", "assets/preview_2/images_uk/img_4.png", "assets/preview_2/images_uk/img_5.png", "assets/preview_2/images_uk/img_6.png", "assets/preview_2/images_uk/img_7.png", "assets/preview_2/images_uk/img_8.png", "assets/preview_2/images_uk/img_9.png", "assets/preview_3/dashboard_preview.json", "assets/preview_3/images/img_0.png", "assets/preview_3/images/img_1.png", "assets/preview_3/images/img_2.png", "assets/preview_3/images/img_3.png", "assets/preview_3/images/img_4.png", "assets/preview_3/images/img_5.png", "assets/preview_3/images/img_6.png", "assets/preview_3/images/img_7.png", "assets/preview_3/images_en/img_0.png", "assets/preview_3/images_en/img_1.png", "assets/preview_3/images_en/img_2.png", "assets/preview_3/images_en/img_3.png", "assets/preview_3/images_en/img_4.png", "assets/preview_3/images_en/img_5.png", "assets/preview_3/images_en/img_6.png", "assets/preview_3/images_en/img_7.png", "assets/preview_3/images_uk/img_0.png", "assets/preview_3/images_uk/img_1.png", "assets/preview_3/images_uk/img_2.png", "assets/preview_3/images_uk/img_3.png", "assets/preview_3/images_uk/img_4.png", "assets/preview_3/images_uk/img_5.png", "assets/preview_3/images_uk/img_6.png", "assets/preview_3/images_uk/img_7.png", "assets/www/js/cordova.js", "assets/www/phone.html", "assets/www/phone/06B320221DA2CC1D4A1093CAC0B77AA6.cache.ttf", "assets/www/phone/16F2FF11C588207FEA3A73EA15CA5775.cache.js", "assets/www/phone/40BC52BBB52110BBF0D35B58B21DCB24.cache.png", "assets/www/phone/59FBB1B02387D1186560B452E6A2E5C0.cache.png", "assets/www/phone/6C8FFB49429A99907B1A4C6C6DF86E30.cache.png", "assets/www/phone/6E9A5AC83E0180AD012969034D041D5E.cache.js", "assets/www/phone/6EC6F32F78CFEAE0CE0F80AE49E9E2A1.cache.gif", "assets/www/phone/8611D47B39F666078F85EDC45561EC0B.cache.png", "assets/www/phone/9BFFA5759D674AFDB8F69B5AF98D06B1.cache.png", "assets/www/phone/BC7B356F32B3C0B9E0E0235FAA5ADC1E.cache.png", "assets/www/phone/C561C3BEE62A36063B7D354497EB19A4.cache.png", "assets/www/phone/E15C373F8F8F5FC5095AC81DF067BA77.cache.png", "assets/www/phone/ECB5E17ED6A498CE4543D94FA6D7D6DF.cache.png", "assets/www/phone/F265CC41FD5E396E026C0B98B1C217D0.cache.js", "assets/www/phone/F3EFE8629C7E474C89ED2229B19475EB.cache.gif", "assets/www/phone/clear.cache.gif", "assets/www/phone/current.gwt.rpc", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/1.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/10.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/100.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/101.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/102.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/103.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/104.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/105.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/106.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/107.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/108.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/109.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/11.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/110.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/111.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/112.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/113.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/114.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/115.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/116.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/117.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/118.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/119.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/12.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/120.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/121.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/122.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/123.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/124.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/125.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/126.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/127.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/128.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/129.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/13.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/130.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/131.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/132.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/14.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/15.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/16.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/17.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/18.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/19.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/2.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/20.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/21.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/22.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/23.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/24.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/25.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/26.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/27.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/28.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/29.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/3.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/30.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/31.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/32.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/33.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/34.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/35.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/36.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/37.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/38.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/39.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/4.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/40.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/41.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/42.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/43.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/44.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/45.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/46.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/47.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/48.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/49.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/5.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/50.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/51.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/52.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/53.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/54.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/55.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/56.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/57.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/58.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/59.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/6.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/60.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/61.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/62.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/63.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/64.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/65.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/66.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/67.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/68.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/69.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/7.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/70.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/71.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/72.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/73.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/74.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/75.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/76.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/77.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/78.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/79.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/8.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/80.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/81.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/82.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/83.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/84.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/85.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/86.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/87.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/88.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/89.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/9.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/90.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/91.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/92.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/93.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/94.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/95.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/96.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/97.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/98.cache.js", "assets/www/phone/deferredjs/16F2FF11C588207FEA3A73EA15CA5775/99.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/1.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/10.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/100.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/101.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/102.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/103.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/104.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/105.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/106.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/107.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/108.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/109.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/11.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/110.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/111.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/112.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/113.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/114.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/115.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/116.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/117.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/118.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/119.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/12.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/120.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/121.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/122.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/123.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/124.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/125.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/126.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/127.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/128.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/129.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/13.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/130.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/131.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/132.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/14.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/15.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/16.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/17.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/18.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/19.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/2.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/20.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/21.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/22.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/23.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/24.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/25.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/26.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/27.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/28.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/29.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/3.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/30.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/31.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/32.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/33.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/34.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/35.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/36.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/37.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/38.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/39.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/4.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/40.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/41.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/42.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/43.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/44.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/45.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/46.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/47.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/48.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/49.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/5.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/50.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/51.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/52.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/53.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/54.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/55.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/56.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/57.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/58.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/59.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/6.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/60.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/61.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/62.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/63.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/64.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/65.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/66.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/67.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/68.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/69.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/7.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/70.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/71.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/72.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/73.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/74.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/75.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/76.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/77.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/78.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/79.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/8.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/80.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/81.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/82.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/83.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/84.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/85.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/86.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/87.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/88.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/89.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/9.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/90.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/91.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/92.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/93.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/94.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/95.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/96.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/97.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/98.cache.js", "assets/www/phone/deferredjs/6E9A5AC83E0180AD012969034D041D5E/99.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/1.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/10.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/100.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/101.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/102.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/103.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/104.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/105.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/106.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/107.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/108.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/109.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/11.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/110.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/111.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/112.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/113.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/114.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/115.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/116.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/117.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/118.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/119.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/12.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/120.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/121.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/122.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/123.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/124.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/125.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/126.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/127.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/128.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/129.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/13.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/130.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/131.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/132.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/14.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/15.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/16.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/17.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/18.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/19.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/2.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/20.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/21.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/22.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/23.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/24.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/25.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/26.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/27.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/28.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/29.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/3.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/30.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/31.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/32.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/33.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/34.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/35.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/36.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/37.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/38.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/39.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/4.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/40.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/41.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/42.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/43.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/44.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/45.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/46.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/47.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/48.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/49.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/5.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/50.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/51.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/52.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/53.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/54.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/55.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/56.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/57.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/58.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/59.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/6.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/60.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/61.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/62.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/63.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/64.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/65.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/66.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/67.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/68.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/69.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/7.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/70.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/71.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/72.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/73.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/74.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/75.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/76.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/77.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/78.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/79.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/8.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/80.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/81.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/82.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/83.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/84.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/85.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/86.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/87.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/88.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/89.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/9.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/90.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/91.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/92.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/93.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/94.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/95.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/96.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/97.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/98.cache.js", "assets/www/phone/deferredjs/F265CC41FD5E396E026C0B98B1C217D0/99.cache.js", "assets/www/phone/ifobsMobile.nocache.js", "assets/www/tablet.html", "classes.dex", "classes2.dex", "com/gwtplatform/dispatch/DispatchShared.gwt.xml", "com/gwtplatform/dispatch/shared/AbstractSimpleResult.java", "com/gwtplatform/dispatch/shared/AbstractUpdateResult.java", "com/gwtplatform/dispatch/shared/Action.java", "com/gwtplatform/dispatch/shared/ActionException.java", "com/gwtplatform/dispatch/shared/ActionImpl.java", "com/gwtplatform/dispatch/shared/BatchAction.java", "com/gwtplatform/dispatch/shared/BatchResult.java", "com/gwtplatform/dispatch/shared/DispatchAsync.java", "com/gwtplatform/dispatch/shared/DispatchRequest.java", "com/gwtplatform/dispatch/shared/DispatchService.java", "com/gwtplatform/dispatch/shared/DispatchServiceAsync.java", "com/gwtplatform/dispatch/shared/MultipleResult.java", "com/gwtplatform/dispatch/shared/NoResult.java", "com/gwtplatform/dispatch/shared/Result.java", "com/gwtplatform/dispatch/shared/SecurityCookie.java", "com/gwtplatform/dispatch/shared/SecurityCookieAccessor.java", "com/gwtplatform/dispatch/shared/ServiceException.java", "com/gwtplatform/dispatch/shared/SimpleResult.java", "com/gwtplatform/dispatch/shared/UnsecuredActionImpl.java", "com/gwtplatform/dispatch/shared/UnsupportedActionException.java", "firebase-analytics-impl.properties", "firebase-analytics.properties", "firebase-common.properties", "firebase-core.properties", "firebase-iid-interop.properties", "firebase-iid.properties", "firebase-measurement-connector-impl.properties", "firebase-measurement-connector.properties", "firebase-messaging.properties", "kotlin/annotation/annotation.kotlin_builtins", "kotlin/collections/collections.kotlin_builtins", "kotlin/coroutines/coroutines.kotlin_builtins", "kotlin/internal/internal.kotlin_builtins", "kotlin/kotlin.kotlin_builtins", "kotlin/ranges/ranges.kotlin_builtins", "kotlin/reflect/reflect.kotlin_builtins", "lib/arm64-v8a/libcardioDecider.so", "lib/arm64-v8a/libcardioRecognizer.so", "lib/arm64-v8a/libcardioRecognizer_tegra2.so", "lib/arm64-v8a/libopencv_core.so", "lib/arm64-v8a/libopencv_imgproc.so", "lib/armeabi-v7a/libcardioDecider.so", "lib/armeabi-v7a/libcardioRecognizer.so", "lib/armeabi-v7a/libcardioRecognizer_tegra2.so", "lib/armeabi-v7a/libopencv_core.so", "lib/armeabi-v7a/libopencv_imgproc.so", "lib/armeabi/libcardioDecider.so", "lib/mips/libcardioDecider.so", "lib/x86/libcardioDecider.so", "lib/x86/libcardioRecognizer.so", "lib/x86/libcardioRecognizer_tegra2.so", "lib/x86/libopencv_core.so", "lib/x86/libopencv_imgproc.so", "lib/x86_64/libcardioDecider.so", "lib/x86_64/libcardioRecognizer.so", "lib/x86_64/libcardioRecognizer_tegra2.so", "lib/x86_64/libopencv_core.so", "lib/x86_64/libopencv_imgproc.so", "locale.properties", "org/osmdroid/center.png", "org/osmdroid/direction_arrow.png", "org/osmdroid/ic_menu_compass.png", "org/osmdroid/ic_menu_mapmode.png", "org/osmdroid/ic_menu_mylocation.png", "org/osmdroid/ic_menu_offline.png", "org/osmdroid/marker_default.png", "org/osmdroid/marker_default_focused_base.png", "org/osmdroid/navto_small.png", "org/osmdroid/next.png", "org/osmdroid/person.png", "org/osmdroid/previous.png", "play-services-ads-identifier.properties", "play-services-auth-api-phone.properties", "play-services-auth-base.properties", "play-services-auth.properties", "play-services-base.properties", "play-services-basement.properties", "play-services-identity.properties", "play-services-maps.properties", "play-services-measurement-api.properties", "play-services-measurement-base.properties", "play-services-stats.properties", "play-services-tapandpay.properties", "play-services-tasks.properties", "res/anim-v21/design_bottom_sheet_slide_in.xml", "res/anim-v21/design_bottom_sheet_slide_out.xml", "res/anim-v21/mtrl_bottom_sheet_slide_in.xml", "res/anim-v21/mtrl_bottom_sheet_slide_out.xml", "res/anim/abc_fade_in.xml", "res/anim/abc_fade_out.xml", "res/anim/abc_grow_fade_in_from_bottom.xml", "res/anim/abc_popup_enter.xml", "res/anim/abc_popup_exit.xml", "res/anim/abc_shrink_fade_out_from_bottom.xml", "res/anim/abc_slide_in_bottom.xml", "res/anim/abc_slide_in_top.xml", "res/anim/abc_slide_out_bottom.xml", "res/anim/abc_slide_out_top.xml", "res/anim/abc_tooltip_enter.xml", "res/anim/abc_tooltip_exit.xml", "res/anim/btn_checkbox_to_checked_box_inner_merged_animation.xml", "res/anim/btn_checkbox_to_checked_box_outer_merged_animation.xml", "res/anim/btn_checkbox_to_checked_icon_null_animation.xml", "res/anim/btn_checkbox_to_unchecked_box_inner_merged_animation.xml", "res/anim/btn_checkbox_to_unchecked_check_path_merged_animation.xml", "res/anim/btn_checkbox_to_unchecked_icon_null_animation.xml", "res/anim/btn_radio_to_off_mtrl_dot_group_animation.xml", "res/anim/btn_radio_to_off_mtrl_ring_outer_animation.xml", "res/anim/btn_radio_to_off_mtrl_ring_outer_path_animation.xml", "res/anim/btn_radio_to_on_mtrl_dot_group_animation.xml", "res/anim/btn_radio_to_on_mtrl_ring_outer_animation.xml", "res/anim/btn_radio_to_on_mtrl_ring_outer_path_animation.xml", "res/anim/design_snackbar_in.xml", "res/anim/design_snackbar_out.xml", "res/anim/mtrl_card_lowers_interpolator.xml", "res/anim/notification_show.xml", "res/anim/opt_hide.xml", "res/anim/opt_show.xml", "res/animator-v21/design_appbar_state_list_animator.xml", "res/animator/design_fab_hide_motion_spec.xml", "res/animator/design_fab_show_motion_spec.xml", "res/animator/mtrl_btn_state_list_anim.xml", "res/animator/mtrl_btn_unelevated_state_list_anim.xml", "res/animator/mtrl_card_state_list_anim.xml", "res/animator/mtrl_chip_state_list_anim.xml", "res/animator/mtrl_extended_fab_change_size_motion_spec.xml", "res/animator/mtrl_extended_fab_hide_motion_spec.xml", "res/animator/mtrl_extended_fab_show_motion_spec.xml", "res/animator/mtrl_extended_fab_state_list_animator.xml", "res/animator/mtrl_fab_hide_motion_spec.xml", "res/animator/mtrl_fab_show_motion_spec.xml", "res/animator/mtrl_fab_transformation_sheet_collapse_spec.xml", "res/animator/mtrl_fab_transformation_sheet_expand_spec.xml", "res/color-v21/abc_btn_colored_borderless_text_material.xml", "res/color-v23/abc_btn_colored_borderless_text_material.xml", "res/color-v23/abc_btn_colored_text_material.xml", "res/color-v23/abc_color_highlight_material.xml", "res/color-v23/abc_tint_btn_checkable.xml", "res/color-v23/abc_tint_default.xml", "res/color-v23/abc_tint_edittext.xml", "res/color-v23/abc_tint_seek_thumb.xml", "res/color-v23/abc_tint_spinner.xml", "res/color-v23/abc_tint_switch_track.xml", "res/color/abc_background_cache_hint_selector_material_dark.xml", "res/color/abc_background_cache_hint_selector_material_light.xml", "res/color/abc_btn_colored_text_material.xml", "res/color/abc_hint_foreground_material_dark.xml", "res/color/abc_hint_foreground_material_light.xml", "res/color/abc_primary_text_disable_only_material_dark.xml", "res/color/abc_primary_text_disable_only_material_light.xml", "res/color/abc_primary_text_material_dark.xml", "res/color/abc_primary_text_material_light.xml", "res/color/abc_search_url_text.xml", "res/color/abc_secondary_text_material_dark.xml", "res/color/abc_secondary_text_material_light.xml", "res/color/abc_tint_btn_checkable.xml", "res/color/abc_tint_default.xml", "res/color/abc_tint_edittext.xml", "res/color/abc_tint_seek_thumb.xml", "res/color/abc_tint_spinner.xml", "res/color/abc_tint_switch_track.xml", "res/color/cell_text_color.xml", "res/color/cell_text_color_dark.xml", "res/color/checkbox_themeable_attribute_color.xml", "res/color/common_google_signin_btn_text_dark.xml", "res/color/common_google_signin_btn_text_light.xml", "res/color/common_google_signin_btn_tint.xml", "res/color/design_box_stroke_color.xml", "res/color/design_error.xml", "res/color/design_icon_tint.xml", "res/color/material_on_background_disabled.xml", "res/color/material_on_background_emphasis_high_type.xml", "res/color/material_on_background_emphasis_medium.xml", "res/color/material_on_primary_disabled.xml", "res/color/material_on_primary_emphasis_high_type.xml", "res/color/material_on_primary_emphasis_medium.xml", "res/color/material_on_surface_disabled.xml", "res/color/material_on_surface_emphasis_high_type.xml", "res/color/material_on_surface_emphasis_medium.xml", "res/color/material_on_surface_stroke.xml", "res/color/material_slider_active_tick_marks_color.xml", "res/color/material_slider_active_track_color.xml", "res/color/material_slider_halo_color.xml", "res/color/material_slider_inactive_tick_marks_color.xml", "res/color/material_slider_inactive_track_color.xml", "res/color/material_slider_thumb_color.xml", "res/color/mtrl_bottom_nav_colored_item_tint.xml", "res/color/mtrl_bottom_nav_colored_ripple_color.xml", "res/color/mtrl_bottom_nav_item_tint.xml", "res/color/mtrl_bottom_nav_ripple_color.xml", "res/color/mtrl_btn_bg_color_selector.xml", "res/color/mtrl_btn_ripple_color.xml", "res/color/mtrl_btn_stroke_color_selector.xml", "res/color/mtrl_btn_text_btn_bg_color_selector.xml", "res/color/mtrl_btn_text_btn_ripple_color.xml", "res/color/mtrl_btn_text_color_selector.xml", "res/color/mtrl_calendar_item_stroke_color.xml", "res/color/mtrl_calendar_selected_range.xml", "res/color/mtrl_card_view_foreground.xml", "res/color/mtrl_card_view_ripple.xml", "res/color/mtrl_chip_background_color.xml", "res/color/mtrl_chip_close_icon_tint.xml", "res/color/mtrl_chip_ripple_color.xml", "res/color/mtrl_chip_surface_color.xml", "res/color/mtrl_chip_text_color.xml", "res/color/mtrl_choice_chip_background_color.xml", "res/color/mtrl_choice_chip_ripple_color.xml", "res/color/mtrl_choice_chip_text_color.xml", "res/color/mtrl_error.xml", "res/color/mtrl_fab_bg_color_selector.xml", "res/color/mtrl_fab_icon_text_color_selector.xml", "res/color/mtrl_fab_ripple_color.xml", "res/color/mtrl_filled_background_color.xml", "res/color/mtrl_filled_icon_tint.xml", "res/color/mtrl_filled_stroke_color.xml", "res/color/mtrl_indicator_text_color.xml", "res/color/mtrl_navigation_item_background_color.xml", "res/color/mtrl_navigation_item_icon_tint.xml", "res/color/mtrl_navigation_item_text_color.xml", "res/color/mtrl_on_primary_text_btn_text_color_selector.xml", "res/color/mtrl_outlined_icon_tint.xml", "res/color/mtrl_outlined_stroke_color.xml", "res/color/mtrl_popupmenu_overlay_color.xml", "res/color/mtrl_tabs_colored_ripple_color.xml", "res/color/mtrl_tabs_icon_color_selector.xml", "res/color/mtrl_tabs_icon_color_selector_colored.xml", "res/color/mtrl_tabs_legacy_text_color_selector.xml", "res/color/mtrl_tabs_ripple_color.xml", "res/color/mtrl_text_btn_text_color_selector.xml", "res/color/radiobutton_themeable_attribute_color.xml", "res/color/switch_button_back_color_additional.xml", "res/color/switch_button_back_color_default.xml", "res/color/switch_button_back_color_partners.xml", "res/color/switch_thumb_material_dark.xml", "res/color/switch_thumb_material_light.xml", "res/color/test_mtrl_calendar_day.xml", "res/color/test_mtrl_calendar_day_selected.xml", "res/drawable-anydpi-v26/otp.xml", "res/drawable-en-hdpi-v4/logo_splash.png", "res/drawable-en-mdpi-v4/logo_splash.png", "res/drawable-en-xhdpi-v4/logo_splash.png", "res/drawable-en-xxhdpi-v4/logo_splash.png", "res/drawable-en-xxxhdpi-v4/logo_splash.png", "res/drawable-hdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-hdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-hdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-hdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-hdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-hdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-hdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-hdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-hdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-hdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-hdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-hdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-hdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_list_focused_holo.9.png", "res/drawable-hdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-hdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-hdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-hdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-hdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-hdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-hdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-hdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-hdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-hdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-hdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-hdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-hdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-hdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-hdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-hdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-hdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-hdpi-v4/arrow_1_1.png", "res/drawable-hdpi-v4/arrow_1_2.png", "res/drawable-hdpi-v4/arrow_2_1.png", "res/drawable-hdpi-v4/arrow_2_2.png", "res/drawable-hdpi-v4/atm.png", "res/drawable-hdpi-v4/atm_atmosfera.png", "res/drawable-hdpi-v4/atm_city24.png", "res/drawable-hdpi-v4/atmosfera.png", "res/drawable-hdpi-v4/back_3ds.png", "res/drawable-hdpi-v4/back_action.png", "res/drawable-hdpi-v4/background.png", "res/drawable-hdpi-v4/black_bar.png", "res/drawable-hdpi-v4/button_sms_re_ask.png", "res/drawable-hdpi-v4/calendar_next_arrow.png", "res/drawable-hdpi-v4/calendar_prev_arrow.png", "res/drawable-hdpi-v4/cards_maestro.png", "res/drawable-hdpi-v4/cards_mastercard.png", "res/drawable-hdpi-v4/cards_visa.png", "res/drawable-hdpi-v4/cert_password.png", "res/drawable-hdpi-v4/check.png", "res/drawable-hdpi-v4/cio_card_io_logo.png", "res/drawable-hdpi-v4/cio_ic_amex.png", "res/drawable-hdpi-v4/cio_ic_discover.png", "res/drawable-hdpi-v4/cio_ic_jcb.png", "res/drawable-hdpi-v4/cio_ic_mastercard.png", "res/drawable-hdpi-v4/cio_ic_paypal_monogram.png", "res/drawable-hdpi-v4/cio_ic_visa.png", "res/drawable-hdpi-v4/cio_paypal_logo.png", "res/drawable-hdpi-v4/city24.png", "res/drawable-hdpi-v4/close_floating_menu.png", "res/drawable-hdpi-v4/common_full_open_on_phone.png", "res/drawable-hdpi-v4/common_google_signin_btn_icon_dark_normal_background.9.png", "res/drawable-hdpi-v4/common_google_signin_btn_icon_light_normal_background.9.png", "res/drawable-hdpi-v4/common_google_signin_btn_text_dark_normal_background.9.png", "res/drawable-hdpi-v4/common_google_signin_btn_text_light_normal_background.9.png", "res/drawable-hdpi-v4/contacts_call.png", "res/drawable-hdpi-v4/contacts_call_disabled.png", "res/drawable-hdpi-v4/contacts_facebook.png", "res/drawable-hdpi-v4/contacts_telegram.png", "res/drawable-hdpi-v4/contacts_viber.png", "res/drawable-hdpi-v4/contacts_web.png", "res/drawable-hdpi-v4/contacts_whatsapp.png", "res/drawable-hdpi-v4/correct.png", "res/drawable-hdpi-v4/custom_calendar_next_arrow.png", "res/drawable-hdpi-v4/custom_calendar_prev_arrow.png", "res/drawable-hdpi-v4/default_user.png", "res/drawable-hdpi-v4/detail_header_bg_image.png", "res/drawable-hdpi-v4/drawer_shadow.9.png", "res/drawable-hdpi-v4/equals.png", "res/drawable-hdpi-v4/exit.png", "res/drawable-hdpi-v4/expand_icon.png", "res/drawable-hdpi-v4/expand_icon_green.png", "res/drawable-hdpi-v4/fab_clone.png", "res/drawable-hdpi-v4/fab_doc.png", "res/drawable-hdpi-v4/fab_edit.png", "res/drawable-hdpi-v4/fab_extraction.png", "res/drawable-hdpi-v4/fab_history.png", "res/drawable-hdpi-v4/fab_limits.png", "res/drawable-hdpi-v4/fab_lock.png", "res/drawable-hdpi-v4/fab_requisites.png", "res/drawable-hdpi-v4/fab_schedule.png", "res/drawable-hdpi-v4/fab_share.png", "res/drawable-hdpi-v4/fab_sign.png", "res/drawable-hdpi-v4/fab_unlock.png", "res/drawable-hdpi-v4/fab_view_doc.png", "res/drawable-hdpi-v4/fast_payment_icon.png", "res/drawable-hdpi-v4/fast_refill_account.png", "res/drawable-hdpi-v4/fast_refill_card.png", "res/drawable-hdpi-v4/fast_refill_credit.png", "res/drawable-hdpi-v4/fast_refill_deposit.png", "res/drawable-hdpi-v4/fast_transfer_bg.png", "res/drawable-hdpi-v4/filter_action.png", "res/drawable-hdpi-v4/googleg_disabled_color_18.png", "res/drawable-hdpi-v4/googleg_standard_color_18.png", "res/drawable-hdpi-v4/hide_input.png", "res/drawable-hdpi-v4/home_icon.png", "res/drawable-hdpi-v4/ic_action_overflow.png", "res/drawable-hdpi-v4/ic_action_place.png", "res/drawable-hdpi-v4/ic_action_search.png", "res/drawable-hdpi-v4/ic_cancel.png", "res/drawable-hdpi-v4/ic_drawer.png", "res/drawable-hdpi-v4/ic_file.png", "res/drawable-hdpi-v4/ic_fp_40px.png", "res/drawable-hdpi-v4/ic_refresh_header.png", "res/drawable-hdpi-v4/ic_select.png", "res/drawable-hdpi-v4/icon_arr_back.png", "res/drawable-hdpi-v4/icon_arr_next.png", "res/drawable-hdpi-v4/icon_home.png", "res/drawable-hdpi-v4/icon_lock.png", "res/drawable-hdpi-v4/icon_map.png", "res/drawable-hdpi-v4/icon_map_login.png", "res/drawable-hdpi-v4/incorrect.png", "res/drawable-hdpi-v4/info.png", "res/drawable-hdpi-v4/keys_big.png", "res/drawable-hdpi-v4/keys_small.png", "res/drawable-hdpi-v4/less.png", "res/drawable-hdpi-v4/location_icon.png", "res/drawable-hdpi-v4/logo.png", "res/drawable-hdpi-v4/logo_3ds.png", "res/drawable-hdpi-v4/logo_splash.png", "res/drawable-hdpi-v4/mastercard_3ds.png", "res/drawable-hdpi-v4/masterpass_logo.png", "res/drawable-hdpi-v4/menu_account.png", "res/drawable-hdpi-v4/menu_atms.png", "res/drawable-hdpi-v4/menu_call.png", "res/drawable-hdpi-v4/menu_card.png", "res/drawable-hdpi-v4/menu_change_login.png", "res/drawable-hdpi-v4/menu_credit.png", "res/drawable-hdpi-v4/menu_currency_exchange_documen.png", "res/drawable-hdpi-v4/menu_deposit.png", "res/drawable-hdpi-v4/menu_deposit_new.png", "res/drawable-hdpi-v4/menu_document.png", "res/drawable-hdpi-v4/menu_exit.png", "res/drawable-hdpi-v4/menu_key_transfer.png", "res/drawable-hdpi-v4/menu_logout.png", "res/drawable-hdpi-v4/menu_mail.png", "res/drawable-hdpi-v4/menu_mail_disabled.png", "res/drawable-hdpi-v4/menu_message.png", "res/drawable-hdpi-v4/menu_message_inbox.png", "res/drawable-hdpi-v4/menu_message_new.png", "res/drawable-hdpi-v4/menu_message_outbox.png", "res/drawable-hdpi-v4/menu_message_push.png", "res/drawable-hdpi-v4/menu_news.png", "res/drawable-hdpi-v4/menu_payment.png", "res/drawable-hdpi-v4/menu_photocass.png", "res/drawable-hdpi-v4/menu_rates.png", "res/drawable-hdpi-v4/menu_service.png", "res/drawable-hdpi-v4/menu_settings.png", "res/drawable-hdpi-v4/menu_settings_autoexit.png", "res/drawable-hdpi-v4/menu_settings_password.png", "res/drawable-hdpi-v4/menu_settings_user.png", "res/drawable-hdpi-v4/menu_skype.png", "res/drawable-hdpi-v4/menu_skype_disabled.png", "res/drawable-hdpi-v4/menu_transfers.png", "res/drawable-hdpi-v4/menu_transfers_new_transfer.png", "res/drawable-hdpi-v4/menu_user_settings.png", "res/drawable-hdpi-v4/modal_form_background.png", "res/drawable-hdpi-v4/more.png", "res/drawable-hdpi-v4/nbu_logo.png", "res/drawable-hdpi-v4/new_message.png", "res/drawable-hdpi-v4/no_connection.png", "res/drawable-hdpi-v4/notification_bg_low_normal.9.png", "res/drawable-hdpi-v4/notification_bg_low_pressed.9.png", "res/drawable-hdpi-v4/notification_bg_normal.9.png", "res/drawable-hdpi-v4/notification_bg_normal_pressed.9.png", "res/drawable-hdpi-v4/notify_panel_notification_icon_bg.png", "res/drawable-hdpi-v4/office_own.png", "res/drawable-hdpi-v4/ok_header_icon.png", "res/drawable-hdpi-v4/open_floating_menu.png", "res/drawable-hdpi-v4/other_card.png", "res/drawable-hdpi-v4/otp.png", "res/drawable-hdpi-v4/otp_card.png", "res/drawable-hdpi-v4/poi_group.png", "res/drawable-hdpi-v4/poi_unknown.png", "res/drawable-hdpi-v4/push_notification_large.png", "res/drawable-hdpi-v4/push_notification_small.png", "res/drawable-hdpi-v4/qr_sign.png", "res/drawable-hdpi-v4/range.png", "res/drawable-hdpi-v4/read_all_messages.png", "res/drawable-hdpi-v4/scroll_indicator.png", "res/drawable-hdpi-v4/settings.png", "res/drawable-hdpi-v4/show_input.png", "res/drawable-hdpi-v4/triang_map.png", "res/drawable-hdpi-v4/upbs_icon.png", "res/drawable-hdpi-v4/user_info_back.png", "res/drawable-hdpi-v4/visa_3ds.png", "res/drawable-ldpi-v4/background.png", "res/drawable-ldpi-v4/equals.png", "res/drawable-ldpi-v4/exit.png", "res/drawable-ldpi-v4/ic_drawer.png", "res/drawable-ldpi-v4/less.png", "res/drawable-ldpi-v4/menu_account.png", "res/drawable-ldpi-v4/menu_card.png", "res/drawable-ldpi-v4/menu_credit.png", "res/drawable-ldpi-v4/menu_deposit.png", "res/drawable-ldpi-v4/menu_document.png", "res/drawable-ldpi-v4/menu_exit.png", "res/drawable-ldpi-v4/menu_finances.png", "res/drawable-ldpi-v4/menu_logout.png", "res/drawable-ldpi-v4/menu_message.png", "res/drawable-ldpi-v4/menu_payment.png", "res/drawable-ldpi-v4/menu_service.png", "res/drawable-ldpi-v4/menu_settings.png", "res/drawable-ldpi-v4/menu_user_settings.png", "res/drawable-ldpi-v4/more.png", "res/drawable-ldpi-v4/no_connection.png", "res/drawable-ldpi-v4/range.png", "res/drawable-ldpi-v4/settings.png", "res/drawable-ldrtl-hdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-hdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-hdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-mdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-mdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-mdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-xhdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-xhdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-xhdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-xxhdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-xxhdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-xxhdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-xxxhdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-xxxhdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-xxxhdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-mdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-mdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-mdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-mdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-mdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-mdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-mdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-mdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-mdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-mdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-mdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-mdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-mdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_list_focused_holo.9.png", "res/drawable-mdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-mdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-mdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-mdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-mdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-mdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-mdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-mdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-mdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-mdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-mdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-mdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-mdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-mdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-mdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-mdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-mdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-mdpi-v4/arrow_1_1.png", "res/drawable-mdpi-v4/arrow_1_2.png", "res/drawable-mdpi-v4/arrow_2_1.png", "res/drawable-mdpi-v4/arrow_2_2.png", "res/drawable-mdpi-v4/atm.png", "res/drawable-mdpi-v4/atm_atmosfera.png", "res/drawable-mdpi-v4/atm_city24.png", "res/drawable-mdpi-v4/atmosfera.png", "res/drawable-mdpi-v4/back_3ds.png", "res/drawable-mdpi-v4/back_action.png", "res/drawable-mdpi-v4/background.png", "res/drawable-mdpi-v4/black_bar.png", "res/drawable-mdpi-v4/button_sms_re_ask.png", "res/drawable-mdpi-v4/cards_maestro.png", "res/drawable-mdpi-v4/cards_mastercard.png", "res/drawable-mdpi-v4/cards_visa.png", "res/drawable-mdpi-v4/cert_password.png", "res/drawable-mdpi-v4/check.png", "res/drawable-mdpi-v4/cio_card_io_logo.png", "res/drawable-mdpi-v4/cio_ic_amex.png", "res/drawable-mdpi-v4/cio_ic_discover.png", "res/drawable-mdpi-v4/cio_ic_jcb.png", "res/drawable-mdpi-v4/cio_ic_mastercard.png", "res/drawable-mdpi-v4/cio_ic_paypal_monogram.png", "res/drawable-mdpi-v4/cio_ic_visa.png", "res/drawable-mdpi-v4/cio_paypal_logo.png", "res/drawable-mdpi-v4/city24.png", "res/drawable-mdpi-v4/close_floating_menu.png", "res/drawable-mdpi-v4/common_google_signin_btn_icon_dark_normal_background.9.png", "res/drawable-mdpi-v4/common_google_signin_btn_icon_light_normal_background.9.png", "res/drawable-mdpi-v4/common_google_signin_btn_text_dark_normal_background.9.png", "res/drawable-mdpi-v4/common_google_signin_btn_text_light_normal_background.9.png", "res/drawable-mdpi-v4/contacts_call.png", "res/drawable-mdpi-v4/contacts_call_disabled.png", "res/drawable-mdpi-v4/contacts_facebook.png", "res/drawable-mdpi-v4/contacts_telegram.png", "res/drawable-mdpi-v4/contacts_viber.png", "res/drawable-mdpi-v4/contacts_web.png", "res/drawable-mdpi-v4/contacts_whatsapp.png", "res/drawable-mdpi-v4/correct.png", "res/drawable-mdpi-v4/default_user.png", "res/drawable-mdpi-v4/detail_header_bg_image.png", "res/drawable-mdpi-v4/drawer_shadow.9.png", "res/drawable-mdpi-v4/equals.png", "res/drawable-mdpi-v4/exit.png", "res/drawable-mdpi-v4/expand_icon.png", "res/drawable-mdpi-v4/expand_icon_green.png", "res/drawable-mdpi-v4/fab_clone.png", "res/drawable-mdpi-v4/fab_doc.png", "res/drawable-mdpi-v4/fab_edit.png", "res/drawable-mdpi-v4/fab_extraction.png", "res/drawable-mdpi-v4/fab_history.png", "res/drawable-mdpi-v4/fab_limits.png", "res/drawable-mdpi-v4/fab_lock.png", "res/drawable-mdpi-v4/fab_requisites.png", "res/drawable-mdpi-v4/fab_schedule.png", "res/drawable-mdpi-v4/fab_share.png", "res/drawable-mdpi-v4/fab_sign.png", "res/drawable-mdpi-v4/fab_unlock.png", "res/drawable-mdpi-v4/fab_view_doc.png", "res/drawable-mdpi-v4/fast_payment_icon.png", "res/drawable-mdpi-v4/fast_refill_account.png", "res/drawable-mdpi-v4/fast_refill_card.png", "res/drawable-mdpi-v4/fast_refill_credit.png", "res/drawable-mdpi-v4/fast_refill_deposit.png", "res/drawable-mdpi-v4/fast_transfer_bg.png", "res/drawable-mdpi-v4/filter_action.png", "res/drawable-mdpi-v4/googleg_disabled_color_18.png", "res/drawable-mdpi-v4/googleg_standard_color_18.png", "res/drawable-mdpi-v4/hide_input.png", "res/drawable-mdpi-v4/home_icon.png", "res/drawable-mdpi-v4/ic_action_overflow.png", "res/drawable-mdpi-v4/ic_action_place.png", "res/drawable-mdpi-v4/ic_action_search.png", "res/drawable-mdpi-v4/ic_cancel.png", "res/drawable-mdpi-v4/ic_drawer.png", "res/drawable-mdpi-v4/ic_file.png", "res/drawable-mdpi-v4/ic_fp_40px.png", "res/drawable-mdpi-v4/ic_refresh_header.png", "res/drawable-mdpi-v4/ic_select.png", "res/drawable-mdpi-v4/icon_arr_back.png", "res/drawable-mdpi-v4/icon_arr_next.png", "res/drawable-mdpi-v4/icon_home.png", "res/drawable-mdpi-v4/icon_lock.png", "res/drawable-mdpi-v4/icon_map.png", "res/drawable-mdpi-v4/icon_map_login.png", "res/drawable-mdpi-v4/incorrect.png", "res/drawable-mdpi-v4/info.png", "res/drawable-mdpi-v4/keys_big.png", "res/drawable-mdpi-v4/keys_small.png", "res/drawable-mdpi-v4/less.png", "res/drawable-mdpi-v4/location_icon.png", "res/drawable-mdpi-v4/logo.png", "res/drawable-mdpi-v4/logo_3ds.png", "res/drawable-mdpi-v4/logo_splash.png", "res/drawable-mdpi-v4/mastercard_3ds.png", "res/drawable-mdpi-v4/masterpass_logo.png", "res/drawable-mdpi-v4/menu_account.png", "res/drawable-mdpi-v4/menu_atms.png", "res/drawable-mdpi-v4/menu_call.png", "res/drawable-mdpi-v4/menu_card.png", "res/drawable-mdpi-v4/menu_change_login.png", "res/drawable-mdpi-v4/menu_credit.png", "res/drawable-mdpi-v4/menu_currency_exchange_documen.png", "res/drawable-mdpi-v4/menu_deposit.png", "res/drawable-mdpi-v4/menu_deposit_new.png", "res/drawable-mdpi-v4/menu_document.png", "res/drawable-mdpi-v4/menu_exit.png", "res/drawable-mdpi-v4/menu_finances.png", "res/drawable-mdpi-v4/menu_key_transfer.png", "res/drawable-mdpi-v4/menu_logout.png", "res/drawable-mdpi-v4/menu_mail.png", "res/drawable-mdpi-v4/menu_mail_disabled.png", "res/drawable-mdpi-v4/menu_message.png", "res/drawable-mdpi-v4/menu_message_inbox.png", "res/drawable-mdpi-v4/menu_message_new.png", "res/drawable-mdpi-v4/menu_message_outbox.png", "res/drawable-mdpi-v4/menu_message_push.png", "res/drawable-mdpi-v4/menu_news.png", "res/drawable-mdpi-v4/menu_payment.png", "res/drawable-mdpi-v4/menu_photocass.png", "res/drawable-mdpi-v4/menu_rates.png", "res/drawable-mdpi-v4/menu_service.png", "res/drawable-mdpi-v4/menu_settings.png", "res/drawable-mdpi-v4/menu_settings_autoexit.png", "res/drawable-mdpi-v4/menu_settings_password.png", "res/drawable-mdpi-v4/menu_settings_user.png", "res/drawable-mdpi-v4/menu_skype.png", "res/drawable-mdpi-v4/menu_skype_disabled.png", "res/drawable-mdpi-v4/menu_transfers.png", "res/drawable-mdpi-v4/menu_transfers_new_transfer.png", "res/drawable-mdpi-v4/menu_user_settings.png", "res/drawable-mdpi-v4/modal_form_background.png", "res/drawable-mdpi-v4/more.png", "res/drawable-mdpi-v4/nbu_logo.png", "res/drawable-mdpi-v4/new_message.png", "res/drawable-mdpi-v4/no_connection.png", "res/drawable-mdpi-v4/notification_bg_low_normal.9.png", "res/drawable-mdpi-v4/notification_bg_low_pressed.9.png", "res/drawable-mdpi-v4/notification_bg_normal.9.png", "res/drawable-mdpi-v4/notification_bg_normal_pressed.9.png", "res/drawable-mdpi-v4/notify_panel_notification_icon_bg.png", "res/drawable-mdpi-v4/office_own.png", "res/drawable-mdpi-v4/ok_header_icon.png", "res/drawable-mdpi-v4/open_floating_menu.png", "res/drawable-mdpi-v4/other_card.png", "res/drawable-mdpi-v4/otp.png", "res/drawable-mdpi-v4/otp_card.png", "res/drawable-mdpi-v4/poi_group.png", "res/drawable-mdpi-v4/poi_unknown.png", "res/drawable-mdpi-v4/push_notification_large.png", "res/drawable-mdpi-v4/push_notification_small.png", "res/drawable-mdpi-v4/qr_sign.png", "res/drawable-mdpi-v4/range.png", "res/drawable-mdpi-v4/read_all_messages.png", "res/drawable-mdpi-v4/scroll_indicator.png", "res/drawable-mdpi-v4/settings.png", "res/drawable-mdpi-v4/show_input.png", "res/drawable-mdpi-v4/triang_map.png", "res/drawable-mdpi-v4/upbs_icon.png", "res/drawable-mdpi-v4/user_info_back.png", "res/drawable-mdpi-v4/visa_3ds.png", "res/drawable-uk-hdpi-v4/logo_splash.png", "res/drawable-uk-mdpi-v4/logo_splash.png", "res/drawable-uk-xhdpi-v4/logo_splash.png", "res/drawable-uk-xxhdpi-v4/logo_splash.png", "res/drawable-uk-xxxhdpi-v4/logo_splash.png", "res/drawable-v21/abc_action_bar_item_background_material.xml", "res/drawable-v21/abc_btn_colored_material.xml", "res/drawable-v21/abc_dialog_material_background.xml", "res/drawable-v21/abc_edit_text_material.xml", "res/drawable-v21/abc_list_divider_material.xml", "res/drawable-v21/design_bottom_navigation_item_background.xml", "res/drawable-v21/dialog_button_background.xml", "res/drawable-v21/ic_arrow_down_24dp.xml", "res/drawable-v21/notification_action_background.xml", "res/drawable-v21/preference_list_divider_material.xml", "res/drawable-v23/abc_control_background_material.xml", "res/drawable-v23/mtrl_popupmenu_background_dark.xml", "res/drawable-v26/otp_background.xml", "res/drawable-v26/otp_foreground.xml", "res/drawable-watch-v20/abc_dialog_material_background.xml", "res/drawable-watch-v20/common_google_signin_btn_text_dark_normal.xml", "res/drawable-watch-v20/common_google_signin_btn_text_disabled.xml", "res/drawable-watch-v20/common_google_signin_btn_text_light_normal.xml", "res/drawable-xhdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-xhdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-xhdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-xhdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-xhdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-xhdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-xhdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-xhdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-xhdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-xhdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-xhdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-xhdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-xhdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_list_focused_holo.9.png", "res/drawable-xhdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-xhdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-xhdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-xhdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-xhdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-xhdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-xhdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-xhdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-xhdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-xhdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-xhdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-xhdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-xhdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-xhdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-xhdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-xhdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-xhdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/add_attachment.png", "res/drawable-xhdpi-v4/arrow_1_1.png", "res/drawable-xhdpi-v4/arrow_1_2.png", "res/drawable-xhdpi-v4/arrow_2_1.png", "res/drawable-xhdpi-v4/arrow_2_2.png", "res/drawable-xhdpi-v4/atm.png", "res/drawable-xhdpi-v4/atm_atmosfera.png", "res/drawable-xhdpi-v4/atm_city24.png", "res/drawable-xhdpi-v4/atmosfera.png", "res/drawable-xhdpi-v4/attach.png", "res/drawable-xhdpi-v4/back_3ds.png", "res/drawable-xhdpi-v4/back_action.png", "res/drawable-xhdpi-v4/background.png", "res/drawable-xhdpi-v4/black_bar.png", "res/drawable-xhdpi-v4/button_sms_re_ask.png", "res/drawable-xhdpi-v4/cards_maestro.png", "res/drawable-xhdpi-v4/cards_mastercard.png", "res/drawable-xhdpi-v4/cards_visa.png", "res/drawable-xhdpi-v4/cert_password.png", "res/drawable-xhdpi-v4/check.png", "res/drawable-xhdpi-v4/cio_card_io_logo.png", "res/drawable-xhdpi-v4/cio_ic_paypal_monogram.png", "res/drawable-xhdpi-v4/cio_paypal_logo.png", "res/drawable-xhdpi-v4/city24.png", "res/drawable-xhdpi-v4/close_floating_menu.png", "res/drawable-xhdpi-v4/common_full_open_on_phone.png", "res/drawable-xhdpi-v4/common_google_signin_btn_icon_dark_normal_background.9.png", "res/drawable-xhdpi-v4/common_google_signin_btn_icon_light_normal_background.9.png", "res/drawable-xhdpi-v4/common_google_signin_btn_text_dark_normal_background.9.png", "res/drawable-xhdpi-v4/common_google_signin_btn_text_light_normal_background.9.png", "res/drawable-xhdpi-v4/contacts_call.png", "res/drawable-xhdpi-v4/contacts_call_disabled.png", "res/drawable-xhdpi-v4/contacts_facebook.png", "res/drawable-xhdpi-v4/contacts_telegram.png", "res/drawable-xhdpi-v4/contacts_viber.png", "res/drawable-xhdpi-v4/contacts_web.png", "res/drawable-xhdpi-v4/contacts_whatsapp.png", "res/drawable-xhdpi-v4/correct.png", "res/drawable-xhdpi-v4/default_user.png", "res/drawable-xhdpi-v4/delete.png", "res/drawable-xhdpi-v4/detail_header_bg_image.png", "res/drawable-xhdpi-v4/drawer_shadow.9.png", "res/drawable-xhdpi-v4/equals.png", "res/drawable-xhdpi-v4/exit.png", "res/drawable-xhdpi-v4/expand_icon.png", "res/drawable-xhdpi-v4/expand_icon_green.png", "res/drawable-xhdpi-v4/fab_clone.png", "res/drawable-xhdpi-v4/fab_doc.png", "res/drawable-xhdpi-v4/fab_edit.png", "res/drawable-xhdpi-v4/fab_extraction.png", "res/drawable-xhdpi-v4/fab_history.png", "res/drawable-xhdpi-v4/fab_limits.png", "res/drawable-xhdpi-v4/fab_lock.png", "res/drawable-xhdpi-v4/fab_requisites.png", "res/drawable-xhdpi-v4/fab_schedule.png", "res/drawable-xhdpi-v4/fab_share.png", "res/drawable-xhdpi-v4/fab_sign.png", "res/drawable-xhdpi-v4/fab_unlock.png", "res/drawable-xhdpi-v4/fab_view_doc.png", "res/drawable-xhdpi-v4/fast_payment_icon.png", "res/drawable-xhdpi-v4/fast_refill_account.png", "res/drawable-xhdpi-v4/fast_refill_card.png", "res/drawable-xhdpi-v4/fast_refill_credit.png", "res/drawable-xhdpi-v4/fast_refill_deposit.png", "res/drawable-xhdpi-v4/fast_transfer_bg.png", "res/drawable-xhdpi-v4/filter_action.png", "res/drawable-xhdpi-v4/googleg_disabled_color_18.png", "res/drawable-xhdpi-v4/googleg_standard_color_18.png", "res/drawable-xhdpi-v4/hide_input.png", "res/drawable-xhdpi-v4/home_icon.png", "res/drawable-xhdpi-v4/ic_action_overflow.png", "res/drawable-xhdpi-v4/ic_action_place.png", "res/drawable-xhdpi-v4/ic_action_search.png", "res/drawable-xhdpi-v4/ic_cancel.png", "res/drawable-xhdpi-v4/ic_drawer.png", "res/drawable-xhdpi-v4/ic_file.png", "res/drawable-xhdpi-v4/ic_fp_40px.png", "res/drawable-xhdpi-v4/ic_refresh_header.png", "res/drawable-xhdpi-v4/ic_select.png", "res/drawable-xhdpi-v4/icon_arr_back.png", "res/drawable-xhdpi-v4/icon_arr_next.png", "res/drawable-xhdpi-v4/icon_home.png", "res/drawable-xhdpi-v4/icon_lock.png", "res/drawable-xhdpi-v4/icon_map.png", "res/drawable-xhdpi-v4/icon_map_login.png", "res/drawable-xhdpi-v4/incorrect.png", "res/drawable-xhdpi-v4/info.png", "res/drawable-xhdpi-v4/keys_big.png", "res/drawable-xhdpi-v4/keys_small.png", "res/drawable-xhdpi-v4/less.png", "res/drawable-xhdpi-v4/location_icon.png", "res/drawable-xhdpi-v4/logo.png", "res/drawable-xhdpi-v4/logo_3ds.png", "res/drawable-xhdpi-v4/logo_splash.png", "res/drawable-xhdpi-v4/mastercard_3ds.png", "res/drawable-xhdpi-v4/masterpass_logo.png", "res/drawable-xhdpi-v4/menu_account.png", "res/drawable-xhdpi-v4/menu_atms.png", "res/drawable-xhdpi-v4/menu_call.png", "res/drawable-xhdpi-v4/menu_card.png", "res/drawable-xhdpi-v4/menu_change_login.png", "res/drawable-xhdpi-v4/menu_credit.png", "res/drawable-xhdpi-v4/menu_currency_exchange_documen.png", "res/drawable-xhdpi-v4/menu_deposit.png", "res/drawable-xhdpi-v4/menu_deposit_new.png", "res/drawable-xhdpi-v4/menu_document.png", "res/drawable-xhdpi-v4/menu_exit.png", "res/drawable-xhdpi-v4/menu_finances.png", "res/drawable-xhdpi-v4/menu_key_transfer.png", "res/drawable-xhdpi-v4/menu_logout.png", "res/drawable-xhdpi-v4/menu_mail.png", "res/drawable-xhdpi-v4/menu_mail_disabled.png", "res/drawable-xhdpi-v4/menu_message.png", "res/drawable-xhdpi-v4/menu_message_inbox.png", "res/drawable-xhdpi-v4/menu_message_new.png", "res/drawable-xhdpi-v4/menu_message_outbox.png", "res/drawable-xhdpi-v4/menu_message_push.png", "res/drawable-xhdpi-v4/menu_news.png", "res/drawable-xhdpi-v4/menu_payment.png", "res/drawable-xhdpi-v4/menu_photocass.png", "res/drawable-xhdpi-v4/menu_rates.png", "res/drawable-xhdpi-v4/menu_service.png", "res/drawable-xhdpi-v4/menu_settings.png", "res/drawable-xhdpi-v4/menu_settings_autoexit.png", "res/drawable-xhdpi-v4/menu_settings_password.png", "res/drawable-xhdpi-v4/menu_settings_user.png", "res/drawable-xhdpi-v4/menu_skype.png", "res/drawable-xhdpi-v4/menu_skype_disabled.png", "res/drawable-xhdpi-v4/menu_transfers.png", "res/drawable-xhdpi-v4/menu_transfers_new_transfer.png", "res/drawable-xhdpi-v4/menu_user_settings.png", "res/drawable-xhdpi-v4/modal_form_background.png", "res/drawable-xhdpi-v4/more.png", "res/drawable-xhdpi-v4/nbu_logo.png", "res/drawable-xhdpi-v4/new_message.png", "res/drawable-xhdpi-v4/no_connection.png", "res/drawable-xhdpi-v4/notification_bg_low_normal.9.png", "res/drawable-xhdpi-v4/notification_bg_low_pressed.9.png", "res/drawable-xhdpi-v4/notification_bg_normal.9.png", "res/drawable-xhdpi-v4/notification_bg_normal_pressed.9.png", "res/drawable-xhdpi-v4/notify_panel_notification_icon_bg.png", "res/drawable-xhdpi-v4/office_own.png", "res/drawable-xhdpi-v4/ok_header_icon.png", "res/drawable-xhdpi-v4/open_floating_menu.png", "res/drawable-xhdpi-v4/other_card.png", "res/drawable-xhdpi-v4/otp.png", "res/drawable-xhdpi-v4/otp_card.png", "res/drawable-xhdpi-v4/poi_group.png", "res/drawable-xhdpi-v4/poi_unknown.png", "res/drawable-xhdpi-v4/push_notification_large.png", "res/drawable-xhdpi-v4/push_notification_small.png", "res/drawable-xhdpi-v4/qr_sign.png", "res/drawable-xhdpi-v4/range.png", "res/drawable-xhdpi-v4/read_all_messages.png", "res/drawable-xhdpi-v4/scroll_indicator.png", "res/drawable-xhdpi-v4/settings.png", "res/drawable-xhdpi-v4/show_input.png", "res/drawable-xhdpi-v4/triang_map.png", "res/drawable-xhdpi-v4/upbs_icon.png", "res/drawable-xhdpi-v4/user_info_back.png", "res/drawable-xhdpi-v4/visa_3ds.png", "res/drawable-xxhdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-xxhdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-xxhdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-xxhdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-xxhdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-xxhdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-xxhdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-xxhdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_list_focused_holo.9.png", "res/drawable-xxhdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-xxhdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-xxhdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-xxhdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-xxhdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-xxhdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-xxhdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-xxhdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-xxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-xxhdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-xxhdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-xxhdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/arrow_1_1.png", "res/drawable-xxhdpi-v4/arrow_1_2.png", "res/drawable-xxhdpi-v4/arrow_2_1.png", "res/drawable-xxhdpi-v4/arrow_2_2.png", "res/drawable-xxhdpi-v4/atm.png", "res/drawable-xxhdpi-v4/atm_atmosfera.png", "res/drawable-xxhdpi-v4/atm_city24.png", "res/drawable-xxhdpi-v4/atmosfera.png", "res/drawable-xxhdpi-v4/back_3ds.png", "res/drawable-xxhdpi-v4/back_action.png", "res/drawable-xxhdpi-v4/background.png", "res/drawable-xxhdpi-v4/black_bar.png", "res/drawable-xxhdpi-v4/button_sms_re_ask.png", "res/drawable-xxhdpi-v4/cards_maestro.png", "res/drawable-xxhdpi-v4/cards_mastercard.png", "res/drawable-xxhdpi-v4/cards_visa.png", "res/drawable-xxhdpi-v4/cert_password.png", "res/drawable-xxhdpi-v4/check.png", "res/drawable-xxhdpi-v4/city24.png", "res/drawable-xxhdpi-v4/close_floating_menu.png", "res/drawable-xxhdpi-v4/common_google_signin_btn_icon_dark_normal_background.9.png", "res/drawable-xxhdpi-v4/common_google_signin_btn_icon_light_normal_background.9.png", "res/drawable-xxhdpi-v4/common_google_signin_btn_text_dark_normal_background.9.png", "res/drawable-xxhdpi-v4/common_google_signin_btn_text_light_normal_background.9.png", "res/drawable-xxhdpi-v4/contacts_call.png", "res/drawable-xxhdpi-v4/contacts_call_disabled.png", "res/drawable-xxhdpi-v4/contacts_facebook.png", "res/drawable-xxhdpi-v4/contacts_telegram.png", "res/drawable-xxhdpi-v4/contacts_viber.png", "res/drawable-xxhdpi-v4/contacts_web.png", "res/drawable-xxhdpi-v4/contacts_whatsapp.png", "res/drawable-xxhdpi-v4/correct.png", "res/drawable-xxhdpi-v4/default_user.png", "res/drawable-xxhdpi-v4/expand_icon.png", "res/drawable-xxhdpi-v4/expand_icon_green.png", "res/drawable-xxhdpi-v4/fab_clone.png", "res/drawable-xxhdpi-v4/fab_doc.png", "res/drawable-xxhdpi-v4/fab_edit.png", "res/drawable-xxhdpi-v4/fab_extraction.png", "res/drawable-xxhdpi-v4/fab_history.png", "res/drawable-xxhdpi-v4/fab_limits.png", "res/drawable-xxhdpi-v4/fab_lock.png", "res/drawable-xxhdpi-v4/fab_requisites.png", "res/drawable-xxhdpi-v4/fab_schedule.png", "res/drawable-xxhdpi-v4/fab_share.png", "res/drawable-xxhdpi-v4/fab_sign.png", "res/drawable-xxhdpi-v4/fab_unlock.png", "res/drawable-xxhdpi-v4/fab_view_doc.png", "res/drawable-xxhdpi-v4/fast_payment_icon.png", "res/drawable-xxhdpi-v4/fast_refill_account.png", "res/drawable-xxhdpi-v4/fast_refill_card.png", "res/drawable-xxhdpi-v4/fast_refill_credit.png", "res/drawable-xxhdpi-v4/fast_refill_deposit.png", "res/drawable-xxhdpi-v4/fast_transfer_bg.png", "res/drawable-xxhdpi-v4/filter_action.png", "res/drawable-xxhdpi-v4/googleg_disabled_color_18.png", "res/drawable-xxhdpi-v4/googleg_standard_color_18.png", "res/drawable-xxhdpi-v4/hide_input.png", "res/drawable-xxhdpi-v4/home_icon.png", "res/drawable-xxhdpi-v4/ic_action_place.png", "res/drawable-xxhdpi-v4/ic_cancel.png", "res/drawable-xxhdpi-v4/ic_file.png", "res/drawable-xxhdpi-v4/ic_fp_40px.png", "res/drawable-xxhdpi-v4/ic_refresh_header.png", "res/drawable-xxhdpi-v4/ic_select.png", "res/drawable-xxhdpi-v4/icon_arr_back.png", "res/drawable-xxhdpi-v4/icon_arr_next.png", "res/drawable-xxhdpi-v4/icon_home.png", "res/drawable-xxhdpi-v4/icon_map.png", "res/drawable-xxhdpi-v4/incorrect.png", "res/drawable-xxhdpi-v4/info.png", "res/drawable-xxhdpi-v4/keys_big.png", "res/drawable-xxhdpi-v4/keys_small.png", "res/drawable-xxhdpi-v4/logo.png", "res/drawable-xxhdpi-v4/logo_3ds.png", "res/drawable-xxhdpi-v4/logo_splash.png", "res/drawable-xxhdpi-v4/mastercard_3ds.png", "res/drawable-xxhdpi-v4/masterpass_logo.png", "res/drawable-xxhdpi-v4/menu_account.png", "res/drawable-xxhdpi-v4/menu_atms.png", "res/drawable-xxhdpi-v4/menu_call.png", "res/drawable-xxhdpi-v4/menu_card.png", "res/drawable-xxhdpi-v4/menu_change_login.png", "res/drawable-xxhdpi-v4/menu_credit.png", "res/drawable-xxhdpi-v4/menu_currency_exchange_documen.png", "res/drawable-xxhdpi-v4/menu_deposit.png", "res/drawable-xxhdpi-v4/menu_deposit_new.png", "res/drawable-xxhdpi-v4/menu_document.png", "res/drawable-xxhdpi-v4/menu_exit.png", "res/drawable-xxhdpi-v4/menu_key_transfer.png", "res/drawable-xxhdpi-v4/menu_mail.png", "res/drawable-xxhdpi-v4/menu_mail_disabled.png", "res/drawable-xxhdpi-v4/menu_message.png", "res/drawable-xxhdpi-v4/menu_message_inbox.png", "res/drawable-xxhdpi-v4/menu_message_new.png", "res/drawable-xxhdpi-v4/menu_message_outbox.png", "res/drawable-xxhdpi-v4/menu_message_push.png", "res/drawable-xxhdpi-v4/menu_news.png", "res/drawable-xxhdpi-v4/menu_payment.png", "res/drawable-xxhdpi-v4/menu_photocass.png", "res/drawable-xxhdpi-v4/menu_rates.png", "res/drawable-xxhdpi-v4/menu_service.png", "res/drawable-xxhdpi-v4/menu_settings.png", "res/drawable-xxhdpi-v4/menu_settings_autoexit.png", "res/drawable-xxhdpi-v4/menu_settings_password.png", "res/drawable-xxhdpi-v4/menu_settings_user.png", "res/drawable-xxhdpi-v4/menu_skype.png", "res/drawable-xxhdpi-v4/menu_skype_disabled.png", "res/drawable-xxhdpi-v4/menu_transfers.png", "res/drawable-xxhdpi-v4/menu_transfers_new_transfer.png", "res/drawable-xxhdpi-v4/modal_form_background.png", "res/drawable-xxhdpi-v4/nbu_logo.png", "res/drawable-xxhdpi-v4/new_message.png", "res/drawable-xxhdpi-v4/office_own.png", "res/drawable-xxhdpi-v4/ok_header_icon.png", "res/drawable-xxhdpi-v4/open_floating_menu.png", "res/drawable-xxhdpi-v4/other_card.png", "res/drawable-xxhdpi-v4/otp.png", "res/drawable-xxhdpi-v4/otp_card.png", "res/drawable-xxhdpi-v4/poi_group.png", "res/drawable-xxhdpi-v4/poi_unknown.png", "res/drawable-xxhdpi-v4/push_notification_large.png", "res/drawable-xxhdpi-v4/push_notification_small.png", "res/drawable-xxhdpi-v4/qr_sign.png", "res/drawable-xxhdpi-v4/read_all_messages.png", "res/drawable-xxhdpi-v4/scroll_indicator.png", "res/drawable-xxhdpi-v4/show_input.png", "res/drawable-xxhdpi-v4/triang_map.png", "res/drawable-xxhdpi-v4/upbs_icon.png", "res/drawable-xxhdpi-v4/user_info_back.png", "res/drawable-xxhdpi-v4/visa_3ds.png", "res/drawable-xxxhdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-xxxhdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-xxxhdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-xxxhdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-xxxhdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-xxxhdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-xxxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-xxxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-xxxhdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-xxxhdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-xxxhdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-xxxhdpi-v4/arrow_1_1.png", "res/drawable-xxxhdpi-v4/arrow_1_2.png", "res/drawable-xxxhdpi-v4/arrow_2_1.png", "res/drawable-xxxhdpi-v4/arrow_2_2.png", "res/drawable-xxxhdpi-v4/atm.png", "res/drawable-xxxhdpi-v4/atm_atmosfera.png", "res/drawable-xxxhdpi-v4/atm_city24.png", "res/drawable-xxxhdpi-v4/atmosfera.png", "res/drawable-xxxhdpi-v4/back_3ds.png", "res/drawable-xxxhdpi-v4/back_action.png", "res/drawable-xxxhdpi-v4/background.png", "res/drawable-xxxhdpi-v4/black_bar.png", "res/drawable-xxxhdpi-v4/cards_maestro.png", "res/drawable-xxxhdpi-v4/cards_mastercard.png", "res/drawable-xxxhdpi-v4/cards_visa.png", "res/drawable-xxxhdpi-v4/check.png", "res/drawable-xxxhdpi-v4/city24.png", "res/drawable-xxxhdpi-v4/contacts_call.png", "res/drawable-xxxhdpi-v4/contacts_call_disabled.png", "res/drawable-xxxhdpi-v4/contacts_facebook.png", "res/drawable-xxxhdpi-v4/contacts_telegram.png", "res/drawable-xxxhdpi-v4/contacts_viber.png", "res/drawable-xxxhdpi-v4/contacts_web.png", "res/drawable-xxxhdpi-v4/contacts_whatsapp.png", "res/drawable-xxxhdpi-v4/correct.png", "res/drawable-xxxhdpi-v4/default_user.png", "res/drawable-xxxhdpi-v4/expand_icon.png", "res/drawable-xxxhdpi-v4/expand_icon_green.png", "res/drawable-xxxhdpi-v4/fab_clone.png", "res/drawable-xxxhdpi-v4/fab_doc.png", "res/drawable-xxxhdpi-v4/fab_edit.png", "res/drawable-xxxhdpi-v4/fab_extraction.png", "res/drawable-xxxhdpi-v4/fab_history.png", "res/drawable-xxxhdpi-v4/fab_limits.png", "res/drawable-xxxhdpi-v4/fab_lock.png", "res/drawable-xxxhdpi-v4/fab_requisites.png", "res/drawable-xxxhdpi-v4/fab_schedule.png", "res/drawable-xxxhdpi-v4/fab_share.png", "res/drawable-xxxhdpi-v4/fab_sign.png", "res/drawable-xxxhdpi-v4/fab_unlock.png", "res/drawable-xxxhdpi-v4/fab_view_doc.png", "res/drawable-xxxhdpi-v4/fast_payment_icon.png", "res/drawable-xxxhdpi-v4/fast_refill_account.png", "res/drawable-xxxhdpi-v4/fast_refill_card.png", "res/drawable-xxxhdpi-v4/fast_refill_credit.png", "res/drawable-xxxhdpi-v4/fast_refill_deposit.png", "res/drawable-xxxhdpi-v4/fast_transfer_bg.png", "res/drawable-xxxhdpi-v4/filter_action.png", "res/drawable-xxxhdpi-v4/hide_input.png", "res/drawable-xxxhdpi-v4/home_icon.png", "res/drawable-xxxhdpi-v4/ic_action_place.png", "res/drawable-xxxhdpi-v4/ic_cancel.png", "res/drawable-xxxhdpi-v4/ic_file.png", "res/drawable-xxxhdpi-v4/ic_fp_40px.png", "res/drawable-xxxhdpi-v4/ic_refresh_header.png", "res/drawable-xxxhdpi-v4/ic_select.png", "res/drawable-xxxhdpi-v4/icon_arr_back.png", "res/drawable-xxxhdpi-v4/icon_arr_next.png", "res/drawable-xxxhdpi-v4/icon_home.png", "res/drawable-xxxhdpi-v4/icon_map.png", "res/drawable-xxxhdpi-v4/incorrect.png", "res/drawable-xxxhdpi-v4/info.png", "res/drawable-xxxhdpi-v4/logo.png", "res/drawable-xxxhdpi-v4/logo_3ds.png", "res/drawable-xxxhdpi-v4/logo_splash.png", "res/drawable-xxxhdpi-v4/mastercard_3ds.png", "res/drawable-xxxhdpi-v4/masterpass_logo.png", "res/drawable-xxxhdpi-v4/menu_account.png", "res/drawable-xxxhdpi-v4/menu_atms.png", "res/drawable-xxxhdpi-v4/menu_call.png", "res/drawable-xxxhdpi-v4/menu_card.png", "res/drawable-xxxhdpi-v4/menu_change_login.png", "res/drawable-xxxhdpi-v4/menu_credit.png", "res/drawable-xxxhdpi-v4/menu_currency_exchange_documen.png", "res/drawable-xxxhdpi-v4/menu_deposit.png", "res/drawable-xxxhdpi-v4/menu_deposit_new.png", "res/drawable-xxxhdpi-v4/menu_document.png", "res/drawable-xxxhdpi-v4/menu_exit.png", "res/drawable-xxxhdpi-v4/menu_key_transfer.png", "res/drawable-xxxhdpi-v4/menu_mail.png", "res/drawable-xxxhdpi-v4/menu_mail_disabled.png", "res/drawable-xxxhdpi-v4/menu_message.png", "res/drawable-xxxhdpi-v4/menu_message_inbox.png", "res/drawable-xxxhdpi-v4/menu_message_new.png", "res/drawable-xxxhdpi-v4/menu_message_outbox.png", "res/drawable-xxxhdpi-v4/menu_message_push.png", "res/drawable-xxxhdpi-v4/menu_news.png", "res/drawable-xxxhdpi-v4/menu_payment.png", "res/drawable-xxxhdpi-v4/menu_photocass.png", "res/drawable-xxxhdpi-v4/menu_rates.png", "res/drawable-xxxhdpi-v4/menu_service.png", "res/drawable-xxxhdpi-v4/menu_settings.png", "res/drawable-xxxhdpi-v4/menu_settings_autoexit.png", "res/drawable-xxxhdpi-v4/menu_settings_password.png", "res/drawable-xxxhdpi-v4/menu_settings_user.png", "res/drawable-xxxhdpi-v4/menu_skype.png", "res/drawable-xxxhdpi-v4/menu_skype_disabled.png", "res/drawable-xxxhdpi-v4/menu_transfers.png", "res/drawable-xxxhdpi-v4/menu_transfers_new_transfer.png", "res/drawable-xxxhdpi-v4/nbu_logo.png", "res/drawable-xxxhdpi-v4/new_message.png", "res/drawable-xxxhdpi-v4/office_own.png", "res/drawable-xxxhdpi-v4/ok_header_icon.png", "res/drawable-xxxhdpi-v4/other_card.png", "res/drawable-xxxhdpi-v4/otp.png", "res/drawable-xxxhdpi-v4/otp_card.png", "res/drawable-xxxhdpi-v4/poi_group.png", "res/drawable-xxxhdpi-v4/poi_unknown.png", "res/drawable-xxxhdpi-v4/push_notification_large.png", "res/drawable-xxxhdpi-v4/push_notification_small.png", "res/drawable-xxxhdpi-v4/qr_sign.png", "res/drawable-xxxhdpi-v4/read_all_messages.png", "res/drawable-xxxhdpi-v4/scroll_indicator.png", "res/drawable-xxxhdpi-v4/show_input.png", "res/drawable-xxxhdpi-v4/triang_map.png", "res/drawable-xxxhdpi-v4/upbs_icon.png", "res/drawable-xxxhdpi-v4/user_info_back.png", "res/drawable-xxxhdpi-v4/visa_3ds.png", "res/drawable/$avd_hide_password__0.xml", "res/drawable/$avd_hide_password__1.xml", "res/drawable/$avd_hide_password__2.xml", "res/drawable/$avd_show_password__0.xml", "res/drawable/$avd_show_password__1.xml", "res/drawable/$avd_show_password__2.xml", "res/drawable/abc_btn_borderless_material.xml", "res/drawable/abc_btn_check_material.xml", "res/drawable/abc_btn_check_material_anim.xml", "res/drawable/abc_btn_default_mtrl_shape.xml", "res/drawable/abc_btn_radio_material.xml", "res/drawable/abc_btn_radio_material_anim.xml", "res/drawable/abc_cab_background_internal_bg.xml", "res/drawable/abc_cab_background_top_material.xml", "res/drawable/abc_ic_ab_back_material.xml", "res/drawable/abc_ic_arrow_drop_right_black_24dp.xml", "res/drawable/abc_ic_clear_material.xml", "res/drawable/abc_ic_go_search_api_material.xml", "res/drawable/abc_ic_menu_overflow_material.xml", "res/drawable/abc_ic_search_api_material.xml", "res/drawable/abc_ic_voice_search_api_material.xml", "res/drawable/abc_item_background_holo_dark.xml", "res/drawable/abc_item_background_holo_light.xml", "res/drawable/abc_list_selector_background_transition_holo_dark.xml", "res/drawable/abc_list_selector_background_transition_holo_light.xml", "res/drawable/abc_list_selector_holo_dark.xml", "res/drawable/abc_list_selector_holo_light.xml", "res/drawable/abc_ratingbar_indicator_material.xml", "res/drawable/abc_ratingbar_material.xml", "res/drawable/abc_ratingbar_small_material.xml", "res/drawable/abc_seekbar_thumb_material.xml", "res/drawable/abc_seekbar_tick_mark_material.xml", "res/drawable/abc_seekbar_track_material.xml", "res/drawable/abc_spinner_textfield_background_material.xml", "res/drawable/abc_switch_thumb_material.xml", "res/drawable/abc_tab_indicator_material.xml", "res/drawable/abc_text_cursor_material.xml", "res/drawable/abc_textfield_search_material.xml", "res/drawable/abc_vector_test.xml", "res/drawable/atm.png", "res/drawable/atm_afiliate.png", "res/drawable/atm_atmosfera.png", "res/drawable/atm_city24.png", "res/drawable/atm_foreign.png", "res/drawable/atm_gold.png", "res/drawable/atm_own.png", "res/drawable/atm_paypass.png", "res/drawable/atm_sindicard.png", "res/drawable/atm_unknown.png", "res/drawable/atmosfera.png", "res/drawable/avd_hide_password.xml", "res/drawable/avd_show_password.xml", "res/drawable/background_card_part_input.xml", "res/drawable/background_card_part_input_error.xml", "res/drawable/background_custom_toast.xml", "res/drawable/background_image_button.xml", "res/drawable/background_input.xml", "res/drawable/background_simple_oval.xml", "res/drawable/bg.png", "res/drawable/border.xml", "res/drawable/btn_checkbox_checked_mtrl.xml", "res/drawable/btn_checkbox_checked_to_unchecked_mtrl_animation.xml", "res/drawable/btn_checkbox_unchecked_mtrl.xml", "res/drawable/btn_checkbox_unchecked_to_checked_mtrl_animation.xml", "res/drawable/btn_radio_off_mtrl.xml", "res/drawable/btn_radio_off_to_on_mtrl_animation.xml", "res/drawable/btn_radio_on_mtrl.xml", "res/drawable/btn_radio_on_to_off_mtrl_animation.xml", "res/drawable/bubble_black.9.png", "res/drawable/button_action_back.xml", "res/drawable/button_action_back_opened.xml", "res/drawable/button_action_resize_back.xml", "res/drawable/button_action_resize_selector.xml", "res/drawable/button_action_resize_touch_back.xml", "res/drawable/button_action_selector.xml", "res/drawable/button_action_touch_back.xml", "res/drawable/button_effect.xml", "res/drawable/button_inactive_action.xml", "res/drawable/button_inactive_action_selector.xml", "res/drawable/button_sub_action_selector.xml", "res/drawable/calendar_cell_bg.xml", "res/drawable/calendar_left_arrow.xml", "res/drawable/calendar_right_arrow.xml", "res/drawable/cell_bg.xml", "res/drawable/cell_bg_dark.xml", "res/drawable/choose_directory_background.xml", "res/drawable/city24.png", "res/drawable/common_google_signin_btn_icon_dark.xml", "res/drawable/common_google_signin_btn_icon_dark_focused.xml", "res/drawable/common_google_signin_btn_icon_dark_normal.xml", "res/drawable/common_google_signin_btn_icon_disabled.xml", "res/drawable/common_google_signin_btn_icon_light.xml", "res/drawable/common_google_signin_btn_icon_light_focused.xml", "res/drawable/common_google_signin_btn_icon_light_normal.xml", "res/drawable/common_google_signin_btn_text_dark.xml", "res/drawable/common_google_signin_btn_text_dark_focused.xml", "res/drawable/common_google_signin_btn_text_dark_normal.xml", "res/drawable/common_google_signin_btn_text_disabled.xml", "res/drawable/common_google_signin_btn_text_light.xml", "res/drawable/common_google_signin_btn_text_light_focused.xml", "res/drawable/common_google_signin_btn_text_light_normal.xml", "res/drawable/contacts_call.png", "res/drawable/contacts_call_disabled.png", "res/drawable/correct.png", "res/drawable/default_user.png", "res/drawable/demo_button_bg.xml", "res/drawable/design_fab_background.xml", "res/drawable/design_ic_visibility.xml", "res/drawable/design_ic_visibility_off.xml", "res/drawable/design_password_eye.xml", "res/drawable/design_snackbar_background.xml", "res/drawable/detail_header_bg.xml", "res/drawable/dialog_background.xml", "res/drawable/dialog_button_cancel.xml", "res/drawable/dialog_button_ok.xml", "res/drawable/dialog_look_up_button_ok.xml", "res/drawable/dialog_title_background.xml", "res/drawable/disable_cell.xml", "res/drawable/disabled_cell_dark.xml", "res/drawable/document_menu_item.png", "res/drawable/dot.xml", "res/drawable/edit_text_background_white.xml", "res/drawable/edittext_effect.xml", "res/drawable/fast_transfer_bg.png", "res/drawable/fingerprint.xml", "res/drawable/generate_cert_password_bg.xml", "res/drawable/generate_cert_resend_sms_bg.xml", "res/drawable/generate_certificate_next_button_bg.xml", "res/drawable/generate_send_certificate_waiter_bg.xml", "res/drawable/hide_input.png", "res/drawable/ic_action_download_large.png", "res/drawable/ic_action_download_small.png", "res/drawable/ic_fingerprint_black_40dp.xml", "res/drawable/ic_fingerprint_error.xml", "res/drawable/ic_fingerprint_success.xml", "res/drawable/ic_mtrl_checked_circle.xml", "res/drawable/ic_mtrl_chip_checked_black.xml", "res/drawable/ic_mtrl_chip_checked_circle.xml", "res/drawable/ic_mtrl_chip_close_circle.xml", "res/drawable/ic_route.xml", "res/drawable/icon_call.png", "res/drawable/icon_home.png", "res/drawable/icon_lock.png", "res/drawable/icon_map.png", "res/drawable/icon_map_login.png", "res/drawable/incorrect.png", "res/drawable/info.png", "res/drawable/left_arrow.xml", "res/drawable/loader.gif", "res/drawable/logo_splash.png", "res/drawable/material_ic_calendar_black_24dp.xml", "res/drawable/material_ic_clear_black_24dp.xml", "res/drawable/material_ic_edit_black_24dp.xml", "res/drawable/material_ic_keyboard_arrow_left_black_24dp.xml", "res/drawable/material_ic_keyboard_arrow_right_black_24dp.xml", "res/drawable/material_ic_menu_arrow_down_black_24dp.xml", "res/drawable/material_ic_menu_arrow_up_black_24dp.xml", "res/drawable/me.png", "res/drawable/menu_account.png", "res/drawable/menu_atms.png", "res/drawable/menu_call.png", "res/drawable/menu_card.png", "res/drawable/menu_change_login.png", "res/drawable/menu_credit.png", "res/drawable/menu_deposit.png", "res/drawable/menu_document.png", "res/drawable/menu_exit.png", "res/drawable/menu_finances.png", "res/drawable/menu_home.png", "res/drawable/menu_item_first.xml", "res/drawable/menu_item_second.xml", "res/drawable/menu_logout.png", "res/drawable/menu_mail.png", "res/drawable/menu_mail_disabled.png", "res/drawable/menu_message.png", "res/drawable/menu_message_inbox.png", "res/drawable/menu_message_new.png", "res/drawable/menu_message_outbox.png", "res/drawable/menu_message_push.png", "res/drawable/menu_news.png", "res/drawable/menu_payment.png", "res/drawable/menu_rates.png", "res/drawable/menu_service.png", "res/drawable/menu_settings.png", "res/drawable/menu_skype.png", "res/drawable/menu_skype_disabled.png", "res/drawable/menu_sub_item.png", "res/drawable/menu_user_settings.png", "res/drawable/modal_background.xml", "res/drawable/modal_form_background.png", "res/drawable/mtrl_dialog_background.xml", "res/drawable/mtrl_dropdown_arrow.xml", "res/drawable/mtrl_ic_arrow_drop_down.xml", "res/drawable/mtrl_ic_arrow_drop_up.xml", "res/drawable/mtrl_ic_cancel.xml", "res/drawable/mtrl_ic_error.xml", "res/drawable/mtrl_popupmenu_background.xml", "res/drawable/mtrl_popupmenu_background_dark.xml", "res/drawable/mtrl_tabs_default_indicator.xml", "res/drawable/navigation_empty_icon.xml", "res/drawable/new_message.png", "res/drawable/notification_bg.xml", "res/drawable/notification_bg_low.xml", "res/drawable/notification_icon_background.xml", "res/drawable/notification_tile_bg.xml", "res/drawable/office_afiliate.png", "res/drawable/office_foreign.png", "res/drawable/office_gold.png", "res/drawable/office_own.png", "res/drawable/office_paypass.png", "res/drawable/office_sindicard.png", "res/drawable/office_unknown.png", "res/drawable/pin_code_button_bg.xml", "res/drawable/pin_code_input_bg_empty.xml", "res/drawable/pin_code_input_bg_filled.xml", "res/drawable/poi_group.png", "res/drawable/poi_unknown.png", "res/drawable/popup_button_bg.xml", "res/drawable/popup_button_bg_common.xml", "res/drawable/popup_button_bg_pressed.xml", "res/drawable/popup_button_bg_selected.xml", "res/drawable/popup_button_title_bg.xml", "res/drawable/popup_cancel_button_bg.xml", "res/drawable/popup_cancel_button_bg_common.xml", "res/drawable/popup_cancel_button_bg_pressed.xml", "res/drawable/popup_cancel_button_bg_selected.xml", "res/drawable/pos_afiliate.png", "res/drawable/pos_foreign.png", "res/drawable/pos_gold.png", "res/drawable/pos_own.png", "res/drawable/pos_paypass.png", "res/drawable/pos_sindicard.png", "res/drawable/pos_unknown.png", "res/drawable/push_notification_large.png", "res/drawable/push_notification_small.png", "res/drawable/quick_transfer_cancel.xml", "res/drawable/quick_transfer_ok_active.xml", "res/drawable/quick_transfer_ok_inactive.xml", "res/drawable/quick_transfer_pressed_false.xml", "res/drawable/read_all_messages.png", "res/drawable/reask_lookup.xml", "res/drawable/red_border.xml", "res/drawable/red_border_dark.xml", "res/drawable/red_border_gray_bg.xml", "res/drawable/right_arrow.xml", "res/drawable/round.xml", "res/drawable/scroll_indicator.png", "res/drawable/search_panel_background.xml", "res/drawable/show_input.png", "res/drawable/side_menu.xml", "res/drawable/splash_background.xml", "res/drawable/sub_button_action_back.xml", "res/drawable/sub_button_action_touch_back.xml", "res/drawable/switch_button_thumb_additional.xml", "res/drawable/switch_button_thumb_default.xml", "res/drawable/switch_button_thumb_partners.xml", "res/drawable/test_custom_background.xml", "res/drawable/text_border.xml", "res/drawable/tooltip_frame_dark.xml", "res/drawable/tooltip_frame_light.xml", "res/drawable/unknown_afiliate.png", "res/drawable/unknown_foreign.png", "res/drawable/unknown_gold.png", "res/drawable/unknown_own.png", "res/drawable/unknown_paypass.png", "res/drawable/unknown_sindicard.png", "res/drawable/unknown_unknown.png", "res/drawable/user_info_back.xml", "res/drawable/user_info_back_image.png", "res/font-v22/kredit_normal.xml", "res/font-v22/ocraext_normal.xml", "res/font/kredit.ttf", "res/font/kredit_normal.xml", "res/font/ocraext.ttf", "res/font/ocraext_normal.xml", "res/interpolator-v21/mtrl_fast_out_linear_in.xml", "res/interpolator-v21/mtrl_fast_out_slow_in.xml", "res/interpolator-v21/mtrl_linear_out_slow_in.xml", "res/interpolator/btn_checkbox_checked_mtrl_animation_interpolator_0.xml", "res/interpolator/btn_checkbox_checked_mtrl_animation_interpolator_1.xml", "res/interpolator/btn_checkbox_unchecked_mtrl_animation_interpolator_0.xml", "res/interpolator/btn_checkbox_unchecked_mtrl_animation_interpolator_1.xml", "res/interpolator/btn_radio_to_off_mtrl_animation_interpolator_0.xml", "res/interpolator/btn_radio_to_on_mtrl_animation_interpolator_0.xml", "res/interpolator/fast_out_slow_in.xml", "res/interpolator/mtrl_linear.xml", "res/layout-h600dp-v13/change_pin_dialog.xml", "res/layout-land/dialog_amount_filter.xml", "res/layout-land/main.xml", "res/layout-land/mtrl_picker_header_dialog.xml", "res/layout-sw600dp-v13/design_layout_snackbar.xml", "res/layout-sw600dp-v13/mtrl_layout_snackbar.xml", "res/layout-v21/notification_action.xml", "res/layout-v21/notification_action_tombstone.xml", "res/layout-v21/notification_template_custom_big.xml", "res/layout-v21/notification_template_icon_group.xml", "res/layout-v22/abc_alert_dialog_button_bar_material.xml", "res/layout-v22/mtrl_alert_dialog_actions.xml", "res/layout-v26/abc_screen_toolbar.xml", "res/layout-v26/mtrl_calendar_month.xml", "res/layout-watch-v20/abc_alert_dialog_button_bar_material.xml", "res/layout-watch-v20/abc_alert_dialog_title_material.xml", "res/layout/abc_action_bar_title_item.xml", "res/layout/abc_action_bar_up_container.xml", "res/layout/abc_action_menu_item_layout.xml", "res/layout/abc_action_menu_layout.xml", "res/layout/abc_action_mode_bar.xml", "res/layout/abc_action_mode_close_item_material.xml", "res/layout/abc_activity_chooser_view.xml", "res/layout/abc_activity_chooser_view_list_item.xml", "res/layout/abc_alert_dialog_button_bar_material.xml", "res/layout/abc_alert_dialog_material.xml", "res/layout/abc_alert_dialog_title_material.xml", "res/layout/abc_cascading_menu_item_layout.xml", "res/layout/abc_dialog_title_material.xml", "res/layout/abc_expanded_menu_layout.xml", "res/layout/abc_list_menu_item_checkbox.xml", "res/layout/abc_list_menu_item_icon.xml", "res/layout/abc_list_menu_item_layout.xml", "res/layout/abc_list_menu_item_radio.xml", "res/layout/abc_popup_menu_header_item_layout.xml", "res/layout/abc_popup_menu_item_layout.xml", "res/layout/abc_screen_content_include.xml", "res/layout/abc_screen_simple.xml", "res/layout/abc_screen_simple_overlay_action_mode.xml", "res/layout/abc_screen_toolbar.xml", "res/layout/abc_search_dropdown_item_icons_2line.xml", "res/layout/abc_search_view.xml", "res/layout/abc_select_dialog_material.xml", "res/layout/abc_tooltip.xml", "res/layout/activity_3ds_confirmation.xml", "res/layout/activity_cardio_wrapper.xml", "res/layout/activity_google_pay_wrap.xml", "res/layout/attachment_item.xml", "res/layout/bubble_black.xml", "res/layout/calendar_view.xml", "res/layout/card_date_edit_text.xml", "res/layout/card_no_edit_text.xml", "res/layout/card_no_input_filter.xml", "res/layout/change_password_dialog.xml", "res/layout/change_password_dialog_ext.xml", "res/layout/change_pin_dialog.xml", "res/layout/child_menu_item.xml", "res/layout/chooser_list.xml", "res/layout/clipboard_toast.xml", "res/layout/connection_settings.xml", "res/layout/countdown_dialog.xml", "res/layout/countdown_dialog_button_panel.xml", "res/layout/create_message_dialog.xml", "res/layout/custom_barcode_scanner.xml", "res/layout/custom_dialog.xml", "res/layout/dashboard_preview_modal.xml", "res/layout/date_grid_fragment.xml", "res/layout/date_range_dialog_fragment.xml", "res/layout/design_bottom_navigation_item.xml", "res/layout/design_bottom_sheet_dialog.xml", "res/layout/design_layout_snackbar.xml", "res/layout/design_layout_snackbar_include.xml", "res/layout/design_layout_tab_icon.xml", "res/layout/design_layout_tab_text.xml", "res/layout/design_menu_item_action_area.xml", "res/layout/design_navigation_item.xml", "res/layout/design_navigation_item_header.xml", "res/layout/design_navigation_item_separator.xml", "res/layout/design_navigation_item_subheader.xml", "res/layout/design_navigation_menu.xml", "res/layout/design_navigation_menu_item.xml", "res/layout/design_text_input_end_icon.xml", "res/layout/design_text_input_start_icon.xml", "res/layout/dialog.xml", "res/layout/dialog_amount_filter.xml", "res/layout/dialog_button_panel.xml", "res/layout/dialog_change_login.xml", "res/layout/dialog_error.xml", "res/layout/dialog_input.xml", "res/layout/dialog_layout.xml", "res/layout/dialog_lookup_code_input.xml", "res/layout/dialog_password_expires.xml", "res/layout/dialog_refuse_password_change.xml", "res/layout/dialog_title.xml", "res/layout/dialog_vertical_button_cancel.xml", "res/layout/dialog_vertical_button_negative.xml", "res/layout/dialog_vertical_button_ok.xml", "res/layout/dialog_vertical_button_panel.xml", "res/layout/dialog_vertical_button_positive.xml", "res/layout/dialog_vertical_buttons.xml", "res/layout/drawer_list_item.xml", "res/layout/dropdown_item.xml", "res/layout/eca_list_item.xml", "res/layout/error_view.xml", "res/layout/expand_button.xml", "res/layout/fast_payment_confirmation_dialog.xml", "res/layout/file_view.xml", "res/layout/filter_dialog_button_panel.xml", "res/layout/fingerprint_dialog_container.xml", "res/layout/fragment_connect_certificate.xml", "res/layout/fragment_external_cert_authority_list.xml", "res/layout/fragment_generate_certificate.xml", "res/layout/fragment_manage_keys.xml", "res/layout/gallery.xml", "res/layout/gallery_item.xml", "res/layout/generate_certificate_step_1.xml", "res/layout/generate_certificate_step_2.xml", "res/layout/generate_certificate_step_3.xml", "res/layout/generate_certificate_step_4.xml", "res/layout/generate_certificate_step_5.xml", "res/layout/google_view.xml", "res/layout/google_view_ext.xml", "res/layout/image_frame.xml", "res/layout/inclusion_3ds_back_button.xml", "res/layout/load_certificate_layout.xml", "res/layout/main.xml", "res/layout/map_title_item.xml", "res/layout/marker_info.xml", "res/layout/masterpass_dialog.xml", "res/layout/menu.xml", "res/layout/menu_group.xml", "res/layout/menu_header.xml", "res/layout/menu_header_otp.xml", "res/layout/menu_item.xml", "res/layout/menu_item_otp.xml", "res/layout/modal_bankid_confirmation.xml", "res/layout/mtrl_alert_dialog.xml", "res/layout/mtrl_alert_dialog_actions.xml", "res/layout/mtrl_alert_dialog_title.xml", "res/layout/mtrl_alert_select_dialog_item.xml", "res/layout/mtrl_alert_select_dialog_multichoice.xml", "res/layout/mtrl_alert_select_dialog_singlechoice.xml", "res/layout/mtrl_calendar_day.xml", "res/layout/mtrl_calendar_day_of_week.xml", "res/layout/mtrl_calendar_days_of_week.xml", "res/layout/mtrl_calendar_horizontal.xml", "res/layout/mtrl_calendar_month.xml", "res/layout/mtrl_calendar_month_labeled.xml", "res/layout/mtrl_calendar_month_navigation.xml", "res/layout/mtrl_calendar_months.xml", "res/layout/mtrl_calendar_vertical.xml", "res/layout/mtrl_calendar_year.xml", "res/layout/mtrl_layout_snackbar.xml", "res/layout/mtrl_layout_snackbar_include.xml", "res/layout/mtrl_picker_actions.xml", "res/layout/mtrl_picker_dialog.xml", "res/layout/mtrl_picker_fullscreen.xml", "res/layout/mtrl_picker_header_dialog.xml", "res/layout/mtrl_picker_header_fullscreen.xml", "res/layout/mtrl_picker_header_selection_text.xml", "res/layout/mtrl_picker_header_title_text.xml", "res/layout/mtrl_picker_header_toggle.xml", "res/layout/mtrl_picker_text_input_date.xml", "res/layout/mtrl_picker_text_input_date_range.xml", "res/layout/normal_date_cell.xml", "res/layout/notification_dialog.xml", "res/layout/notification_layout.xml", "res/layout/notification_media_action.xml", "res/layout/notification_media_cancel_action.xml", "res/layout/notification_template_big_media.xml", "res/layout/notification_template_big_media_custom.xml", "res/layout/notification_template_big_media_narrow.xml", "res/layout/notification_template_big_media_narrow_custom.xml", "res/layout/notification_template_lines_media.xml", "res/layout/notification_template_media.xml", "res/layout/notification_template_media_custom.xml", "res/layout/notification_template_part_chronometer.xml", "res/layout/notification_template_part_time.xml", "res/layout/offer_consent_dialog.xml", "res/layout/option_dialog.xml", "res/layout/osm_view.xml", "res/layout/phone_as_login_info_dialog.xml", "res/layout/poi_detail.xml", "res/layout/poi_detail_field.xml", "res/layout/popup_contacts_panel_item.xml", "res/layout/popup_left_gravity_panel_item.xml", "res/layout/popup_panel_item.xml", "res/layout/popup_panel_item_old.xml", "res/layout/preference.xml", "res/layout/preference_category.xml", "res/layout/preference_category_material.xml", "res/layout/preference_dialog_edittext.xml", "res/layout/preference_dropdown.xml", "res/layout/preference_dropdown_material.xml", "res/layout/preference_information.xml", "res/layout/preference_information_material.xml", "res/layout/preference_list_fragment.xml", "res/layout/preference_material.xml", "res/layout/preference_recyclerview.xml", "res/layout/preference_widget_checkbox.xml", "res/layout/preference_widget_seekbar.xml", "res/layout/preference_widget_seekbar_material.xml", "res/layout/preference_widget_switch.xml", "res/layout/preference_widget_switch_compat.xml", "res/layout/progress_mask.xml", "res/layout/qr_scanner.xml", "res/layout/search_city_list_item.xml", "res/layout/select_dialog_item_material.xml", "res/layout/select_dialog_multichoice_material.xml", "res/layout/select_dialog_singlechoice_material.xml", "res/layout/settings.xml", "res/layout/square_date_cell.xml", "res/layout/support_simple_spinner_dropdown_item.xml", "res/layout/test_action_chip.xml", "res/layout/test_chip_zero_corner_radius.xml", "res/layout/test_design_checkbox.xml", "res/layout/test_design_radiobutton.xml", "res/layout/test_reflow_chipgroup.xml", "res/layout/test_toolbar.xml", "res/layout/test_toolbar_custom_background.xml", "res/layout/test_toolbar_elevation.xml", "res/layout/test_toolbar_surface.xml", "res/layout/text_view_with_line_height_from_appearance.xml", "res/layout/text_view_with_line_height_from_layout.xml", "res/layout/text_view_with_line_height_from_style.xml", "res/layout/text_view_with_theme_line_height.xml", "res/layout/text_view_without_line_height.xml", "res/layout/weekday_textview.xml", "res/layout/widget_date_custom_cell.xml", "res/layout/zxing_barcode_scanner.xml", "res/layout/zxing_capture.xml", "res/menu/exit_menu.xml", "res/menu/go_home.xml", "res/menu/main_menu.xml", "res/menu/with_native_menu.xml", "res/raw/zxing_beep.ogg", "res/xml/config.xml", "res/xml/preference.xml", "res/xml/provider_paths.xml", "res/xml/standalone_badge.xml", "res/xml/standalone_badge_gravity_bottom_end.xml", "res/xml/standalone_badge_gravity_bottom_start.xml", "res/xml/standalone_badge_gravity_top_start.xml", "res/xml/standalone_badge_offset.xml", "resources.arsc", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_260050011251_UAH.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_260070022772_UAH.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_26200527720000_USD.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_262020012772_USD.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_26202509273002_UAH.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_26202509273002_USD.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_26203509273001_UAH.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_26203509273001_USD.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_2620500000162_EUR.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountHistory_2620600000671_UAH.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountListFull.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AccountListFull_.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AvailableBalances.xml", "ua/com/cs/ifobs/mobile/service/demoUser/AvaliableStopCausesList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/BankDirectory.xml", "ua/com/cs/ifobs/mobile/service/demoUser/BankList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/BankNews.xml", "ua/com/cs/ifobs/mobile/service/demoUser/BusinessTypeList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardCorrList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperationLog_C0000000000000000000000000000001.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperationLog_C0000000000000000000000000000002.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperationLog_C0000000000000000000000000000003.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperationRefreshPin.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperations_4790407003034595.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperations_4790407003034769.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperations_4790407003216135.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperations_4790427040424229.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardOperations_4790427040424799.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CardPictureList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CertificateBankRequest.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CommodityGroupList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/ContractPurpose.xml", "ua/com/cs/ifobs/mobile/service/demoUser/ContragentList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CorrespondentList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CorrespondentListByKeyphrase.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CountriesList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CreditArcPayments.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CreditPaymentShedule.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CurrencyExchangePairsList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CurrencyList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CurrencyOperationList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CurrencyRates.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CurrencyRatesCard.xml", "ua/com/cs/ifobs/mobile/service/demoUser/CurrencyRatesCardOther.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DealList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositDealDocuments.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositExpDocs.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositOrderList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_EUR_en.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_EUR_ru.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_EUR_uk.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_UAH_en.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_UAH_ru.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_UAH_uk.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_USD_en.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_USD_ru.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeFullInfo_USD_uk.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeInfoList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DepositTypeList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DetailsOfPaymentList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcess.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcessCommon_15.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcessCommon_18.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcessCommon_20.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcessCommon_22.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcessCommon_3.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcessCommon_32.xml", "ua/com/cs/ifobs/mobile/service/demoUser/DocumentsInProcessCommon_44.xml", "ua/com/cs/ifobs/mobile/service/demoUser/ExchangeBuyLimit.xml", "ua/com/cs/ifobs/mobile/service/demoUser/ExchangeCurrencyRateList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/ExchangeOrderList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/FoundationList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/FxDetailsOfPaymentList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetBankHolidays.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetCardLimitsUniversal_No.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetCardLimitsUniversal_Yes.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetCurrencyExchangeOrderList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetGSMInfoAgreementList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetTemporaryCardLimit.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetTemporaryCardLimits.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetTemporaryLimitsTerms.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetUpdateCardLimit.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetUpdateCardLimit_4363230000004656.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetUpdateCardLimit_5100940000004058.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetUserAlarmedObjectsCount.xml", "ua/com/cs/ifobs/mobile/service/demoUser/GetUserEmail.xml", "ua/com/cs/ifobs/mobile/service/demoUser/MessageList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/OpenDepositOrderList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/PaymentTypeList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/PhotoPaymentOrderList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/PushNotificationList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/RcBankList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/RefreshCardLimitForUkrCard.xml", "ua/com/cs/ifobs/mobile/service/demoUser/SelectBudgetRecepientList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/SelectPaymentPurposeList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/SelectTemplateList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/SelectUpbsTemplateList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/SwiftBankList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/SwiftCorrespondentList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/TemplateList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/TopUpPhoneTemplates.xml", "ua/com/cs/ifobs/mobile/service/demoUser/TransferTypeGroupList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/TransferUniversal.xml", "ua/com/cs/ifobs/mobile/service/demoUser/TransferUniversal_4790407003034595.xml", "ua/com/cs/ifobs/mobile/service/demoUser/TransferUniversal_4790427040424799.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UPBSPaymentList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsBillerDetails_176.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsBillerDetails_181.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsBillerList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsBillerSnapShotListByRegion.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsGetBills_176.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsGetBills_181.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsPaymentFee.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UpbsRegionList.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UserWebSettings.xml", "ua/com/cs/ifobs/mobile/service/demoUser/UserWithCertificates.xml", "ua/com/cs/ifobs/mobile/service/demoUser/cities.xml", "ua/com/cs/ifobs/mobile/service/demoUser/poi.xml"], "exported_count": {"exported_activities": 3, "exported_services": 4, "exported_receivers": 3, "exported_providers": 0}, "apkid": {"classes.dex": {"anti_vm": ["Build.MANUFACTURER check"], "compiler": ["r8"], "obfuscator": ["DexGuard"]}, "classes2.dex": {"anti_vm": ["Build.FINGERPRINT check", "Build.MANUFACTURER check"], "anti_debug": ["Debug.isDebuggerConnected() check"], "compiler": ["r8 without marker (suspicious)"]}}, "trackers": {"detected_trackers": 1, "total_trackers": 385, "trackers": [{"Google Firebase Analytics": "https://reports.exodus-privacy.eu.org/trackers/49"}]}, "playstore_details": {"title": "OTP Smart", "description": "With OTP Smart mobile application from OTP Bank Ukraine, you can use the OTP Smart remote banking service and receive the necessary information 24/7.\r\nOTP Smart service opens a whole range of possibilities for its users:\r\n\u2022 Make various types of transfers: between own accounts using Drag'n'Drop, within OTP Bank, within Ukraine;\r\n\u2022 Use instant transfers 24/7 between OTP Bank card accounts;\r\n\u2022 Open deposits, replenish and withdraw funds from savings deposits;\r\n\u2022 Pay off collateral and unsecured loans;\r\n\u2022 Pay bills of mobile operators;\r\n\u2022 Monitor balances and cash flows across all your accounts and products;\r\n\u2022 View account details, receive details and download statements;\r\n\u2022 Configure the system by a large selection of functions.\r\nEspecially for customers who are not users of OTP Smart, we have provided a number of services that do not require authorization:\r\n\u2022 Familiarize yourself with the functionality of the system by using the demo version;\r\n\u2022 Find the nearest ATM or branch of OTP Bank;\r\n\u2022 Pay your bills via photopayment;\r\n\u2022 Receive exchange rates and perform currency exchange.\r\nThe application is multilingual and can be used in 3 languages: Ukrainian, Russian and English.\r\nEvery day we work to improve the application. If you encounter any problem, contact us at otpsmart@otpbank.com.ua.\r\nBest regards, OTP Smart Team", "summary": "Mobile application of OTP Smart system by OTP Bank (Ukraine)", "summaryHTML": "Mobile application of OTP Smart system by OTP Bank (Ukraine)", "installs": "500,000+", "minInstalls": 500000, "score": 2.7254407, "ratings": 3944, "reviews": 1801, "histogram": [1799, 278, 347, 248, 1272], "price": 0, "free": true, "currency": "USD", "sale": false, "saleTime": null, "originalPrice": null, "saleText": null, "offersIAP": false, "inAppProductPrice": null, "size": "32M", "androidVersion": "5.0", "androidVersionText": "5.0 and up", "developer": "CS Ltd", "developerId": "CS+Ltd", "developerEmail": "otpsmart@otpbank.com.ua", "developerWebsite": "https://www.otpsmart.com.ua/", "developerAddress": null, "privacyPolicy": "https://www.otpbank.com.ua/pdf/otpsmart/otp-smart-pp.pdf", "developerInternalID": "8079932623111754617", "genre": "Business", "genreId": "BUSINESS", "icon": "https://play-lh.googleusercontent.com/iBbLpzHQPPpt9Z9G5NT3WIDlCls0s6dOKDTT-cYkUJns-dRMn5aIPRs9HCGsPRqt3tE", "headerImage": "https://play-lh.googleusercontent.com/_A3HhJAKLS-8h0hpxSADa0WIaBpr8pQGefh0HuDfpu4gtiz5_rwhxWPAYCdE9SZIwg", "screenshots": ["https://play-lh.googleusercontent.com/c1zcgr2aj2iyfeAHUOL2KDwR5pupLnYXo9YQV4bvehY91b3Idanhc0z-vYVNJccCG6R-", "https://play-lh.googleusercontent.com/bakUC2Z3sscG5VIqdNqVxfL-1QhsVfnC5amL7ue16QB9YRwe1NIb-PEZAdfZU7usXA", "https://play-lh.googleusercontent.com/khCXOnQhgo_bdDEix7WnVHtLzG_mBXtLH3V2LbK-arr5SBZktwRRSSuJQzF4OZfrH2v_", "https://play-lh.googleusercontent.com/ynBpy8nof1F1t8EJTwJRmisQ87dwXTYanpfxHIOOIcuDtgCxdis5YYRSUA52Z0Wf_rk", "https://play-lh.googleusercontent.com/pNbYsj4M4CewkwzVELFDN3pLQxC_kyrNbheJG1-zglJXJZCDczpaWKS_04h7dPAI0lP5"], "video": null, "videoImage": null, "contentRating": "Everyone", "contentRatingDescription": null, "adSupported": null, "containsAds": false, "released": "Mar 24, 2016", "updated": 1614357143, "version": "54.1", "recentChanges": "Added an opportunity to view payment orders with facsimile.", "recentChangesHTML": "Added an opportunity to view payment orders with facsimile.", "editorsChoice": false, "appId": "ua.com.cs.ifobs.mobile.android.otp", "url": "https://play.google.com/store/apps/details?id=ua.com.cs.ifobs.mobile.android.otp&hl=en&gl=us", "error": false}, "secrets": ["\"certificate\" : \"\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\"", "\"choose_key\" : \"\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u043b\u044e\u0447\"", "\"currentPassword\" : \"\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\"", "\"digits_password\" : \"\u0426\u0438\u0444\u0440\u044b\"", "\"download_certificate\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447\"", "\"enterPassword\" : \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443\"", "\"firebase_database_url\" : \"https://otpsmart-firebase.firebaseio.com\"", "\"generateCertificate\" : \"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u044e\u0447\u0438\"", "\"google_api_key\" : \"AIzaSyBSPicEGF3NL1mOp3fF9EBwuX9Z-ibxN2A\"", "\"google_crash_reporting_api_key\" : \"AIzaSyBSPicEGF3NL1mOp3fF9EBwuX9Z-ibxN2A\"", "\"google_maps_key\" : \"AIzaSyDeROaiqo1Qak7seBs6_dMzHtUU4NkOlPU\"", "\"loadCertificate\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447 \u0447\u0435\u0440\u0435\u0437 web-\u043a\u043b\u0438\u0435\u043d\u0442\"", "\"lockUser\" : \"\u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"", "\"map_api_key\" : \"YOUR_RELEASE_MAPS_API_KEY\"", "\"operationAbsenceOfDebtCertificate\" : \"\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u0440\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438\"", "\"password\" : \"\u041f\u0430\u0440\u043e\u043b\u044c\"", "\"passwordForYourPrivateKey\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443:\"", "\"password_secret_key\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u043a \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443\"", "\"pref_language_key\" : \"pref_language_key\"", "\"pref_listArray_key\" : \"listArray\"", "\"pref_listValue_key\" : \"listValue\"", "\"pref_scale_key\" : \"pref_scale_key\"", "\"pref_scale_listArray_key\" : \"listArray\"", "\"pref_scale_listValue_key\" : \"listValue\"", "\"privateKeySuccessfullyConnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\"", "\"privateKeySuccessfullyDisconnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\"", "\"rao_input_password\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430\"", "\"repeatPassword\" : \"\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c (\u0435\u0449\u0435 \u0440\u0430\u0437)\"", "\"saveKey\" : \"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u044e\u0447\"", "\"uploadCertificate\" : \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\"", "\"useFingerpintInsteadKey\" : \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043f\u0435\u0447\u0430\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u0432\u0432\u043e\u0434\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447\"", "\"certificate\" : \"\u0421\u0435\u0440\u0442\u0438\u0444\u0456\u043a\u0430\u0442\"", "\"choose_key\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u043a\u043b\u044e\u0447\"", "\"currentPassword\" : \"\u041f\u043e\u0442\u043e\u0447\u043d\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\"", "\"digits_password\" : \"\u0426\u0438\u0444\u0440\u0438\"", "\"download_certificate\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447\"", "\"enterPassword\" : \"\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0432\u0430\u0448\u043e\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\"", "\"generateCertificate\" : \"\u0417\u0433\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u043a\u043b\u044e\u0447\u0456\"", "\"loadCertificate\" : \"\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u043b\u044e\u0447 \u0447\u0435\u0440\u0435\u0437 web-\u043a\u043b\u0456\u0454\u043d\u0442\"", "\"lockUser\" : \"\u0417\u0430\u0431\u043b\u043e\u043a\u0443\u0432\u0430\u0442\u0438 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430\"", "\"operationAbsenceOfDebtCertificate\" : \"\u0414\u043e\u0432\u0456\u0434\u043a\u0430 \u043f\u0440\u043e \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456\u0441\u0442\u044c \u0437\u0430\u0431\u043e\u0440\u0433\u043e\u0432\u0430\u043d\u043e\u0441\u0442\u0456\"", "\"password\" : \"\u041f\u0430\u0440\u043e\u043b\u044c\"", "\"passwordForYourPrivateKey\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0432\u0430\u0448\u043e\u0433\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430:\"", "\"password_secret_key\" : \"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\"", "\"privateKeySuccessfullyConnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\"", "\"privateKeySuccessfullyDisconnected\" : \"Fingerprint \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 %1$s %2$s \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u0432\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\"", "\"repeatPassword\" : \"\u041d\u043e\u0432\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c (\u0449\u0435 \u0440\u0430\u0437)\"", "\"saveKey\" : \"\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u043a\u043b\u044e\u0447\"", "\"uploadCertificate\" : \"\u0412\u0456\u0434\u043f\u0440\u0430\u0432\u0438\u0442\u0438 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0456\u043d\u0448\u0438\u0439 \u043f\u0440\u0438\u0441\u0442\u0440\u0456\u0439\"", "\"useFingerpintInsteadKey\" : \"\u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0432\u0456\u0434\u0431\u0438\u0442\u043e\u043a \u043f\u0430\u043b\u044c\u0446\u044f \u0437\u0430\u043c\u0456\u0441\u0442\u044c \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\"", "\"certificate\" : \"Certificate\"", "\"choose_key\" : \"Select a key\"", "\"currentPassword\" : \"Current password\"", "\"digits_password\" : \"Numbers\"", "\"download_certificate\" : \"Transfer a key\"", "\"enterPassword\" : \"Enter your private key password\"", "\"generateCertificate\" : \"Generate keys\"", "\"loadCertificate\" : \"Transfer key via web client\"", "\"lockUser\" : \"Lock the user\"", "\"operationAbsenceOfDebtCertificate\" : \"Certificate about the absence of debt on the loan\"", "\"password\" : \"Password\"", "\"passwordForYourPrivateKey\" : \"Password to your private key:\"", "\"password_secret_key\" : \"Private key password\"", "\"privateKeySuccessfullyConnected\" : \"Fingerprint for the key %1$s %2$s is successfully connected\"", "\"privateKeySuccessfullyDisconnected\" : \"Fingerprint for the key %1$s %2$s is successfully disconnected\"", "\"repeatPassword\" : \"New password (again)\"", "\"saveKey\" : \"Save the key\"", "\"uploadCertificate\" : \"Transfer the key to another device\"", "\"useFingerpintInsteadKey\" : \"Use Fingerprint instead of private key password entering\""], "average_cvss": 6.5, "security_score": 10, "virus_total": {"scans": {"Bkav": {"detected": false, "version": "1.3.0.9899", "result": null, "update": "20210410"}, "MicroWorld-eScan": {"detected": false, "version": "14.0.409.0", "result": null, "update": "20210411"}, "FireEye": {"detected": false, "version": "32.44.1.0", "result": null, "update": "20210411"}, "CAT-QuickHeal": {"detected": false, "version": "14.00", "result": null, "update": "20210409"}, "McAfee": {"detected": false, "version": "6.0.6.653", "result": null, "update": "20210411"}, "Malwarebytes": {"detected": false, "version": "4.2.1.18", "result": null, "update": "20210410"}, "SUPERAntiSpyware": {"detected": false, "version": "5.6.0.1032", "result": null, "update": "20210409"}, "Trustlook": {"detected": false, "version": "1.0", "result": null, "update": "20210411"}, "Alibaba": {"detected": false, "version": "0.3.0.5", "result": null, "update": "20190527"}, "K7GW": {"detected": false, "version": "11.175.36891", "result": null, "update": "20210411"}, "K7AntiVirus": {"detected": false, "version": "11.175.36891", "result": null, "update": "20210411"}, "BitDefenderTheta": {"detected": false, "version": "7.2.37796.0", "result": null, "update": "20210402"}, "Cyren": {"detected": false, "version": "6.3.0.2", "result": null, "update": "20210411"}, "SymantecMobileInsight": {"detected": false, "version": "2.0", "result": null, "update": "20210126"}, "Symantec": {"detected": false, "version": "1.14.0.0", "result": null, "update": "20210410"}, "ESET-NOD32": {"detected": false, "version": "23112", "result": null, "update": "20210410"}, "TrendMicro-HouseCall": {"detected": false, "version": "10.0.0.1040", "result": null, "update": "20210411"}, "Avast": {"detected": false, "version": "21.1.5827.0", "result": null, "update": "20210411"}, "ClamAV": {"detected": false, "version": "0.103.2.0", "result": null, "update": "20210410"}, "Kaspersky": {"detected": false, "version": "21.0.1.45", "result": null, "update": "20210411"}, "BitDefender": {"detected": false, "version": "7.2", "result": null, "update": "20210411"}, "NANO-Antivirus": {"detected": false, "version": "1.0.146.25279", "result": null, "update": "20210411"}, "AegisLab": {"detected": false, "version": "4.2", "result": null, "update": "20210411"}, "Tencent": {"detected": false, "version": "1.0.0.1", "result": null, "update": "20210411"}, "Ad-Aware": {"detected": false, "version": "3.0.16.117", "result": null, "update": "20210411"}, "Sophos": {"detected": false, "version": "1.0.2.0", "result": null, "update": "20210410"}, "Comodo": {"detected": false, "version": "33428", "result": null, "update": "20210411"}, "F-Secure": {"detected": false, "version": "12.0.86.52", "result": null, "update": "20210331"}, "DrWeb": {"detected": false, "version": "7.0.49.9080", "result": null, "update": "20210411"}, "VIPRE": {"detected": false, "version": "91744", "result": null, "update": "20210411"}, "TrendMicro": {"detected": false, "version": "11.0.0.1006", "result": null, "update": "20210330"}, "McAfee-GW-Edition": {"detected": false, "version": "v2019.1.2+3728", "result": null, "update": "20210411"}, "CMC": {"detected": false, "version": "2.10.2019.1", "result": null, "update": "20210327"}, "Emsisoft": {"detected": false, "version": "2018.12.0.1641", "result": null, "update": "20210411"}, "Avast-Mobile": {"detected": false, "version": "210410-00", "result": null, "update": "20210410"}, "Jiangmin": {"detected": false, "version": "16.0.100", "result": null, "update": "20210410"}, "Avira": {"detected": false, "version": "8.3.3.12", "result": null, "update": "20210411"}, "Antiy-AVL": {"detected": false, "version": "3.0.0.1", "result": null, "update": "20210411"}, "Kingsoft": {"detected": false, "version": "2017.9.26.565", "result": null, "update": "20210411"}, "Microsoft": {"detected": false, "version": "1.1.18000.5", "result": null, "update": "20210411"}, "Gridinsoft": {"detected": false, "version": "1.0.37.128", "result": null, "update": "20210411"}, "Arcabit": {"detected": false, "version": "1.0.0.881", "result": null, "update": "20210411"}, "ViRobot": {"detected": false, "version": "2014.3.20.0", "result": null, "update": "20210410"}, "ZoneAlarm": {"detected": false, "version": "1.0", "result": null, "update": "20210411"}, "GData": {"detected": false, "version": "A:25.29287B:27.22614", "result": null, "update": "20210411"}, "TACHYON": {"detected": false, "version": "2021-04-11.01", "result": null, "update": "20210411"}, "BitDefenderFalx": {"detected": false, "version": "2.0.936", "result": null, "update": "20200916"}, "AhnLab-V3": {"detected": false, "version": "3.19.7.10132", "result": null, "update": "20210411"}, "VBA32": {"detected": false, "version": "5.0.0", "result": null, "update": "20210409"}, "MAX": {"detected": false, "version": "2019.9.16.1", "result": null, "update": "20210411"}, "Zoner": {"detected": false, "version": "0.0.0.0", "result": null, "update": "20210410"}, "Rising": {"detected": false, "version": "25.0.0.26", "result": null, "update": "20210410"}, "Yandex": {"detected": false, "version": "5.5.2.24", "result": null, "update": "20210409"}, "SentinelOne": {"detected": false, "version": "5.0.0.20", "result": null, "update": "20210215"}, "MaxSecure": {"detected": false, "version": "1.0.0.1", "result": null, "update": "20210409"}, "Fortinet": {"detected": false, "version": "6.2.142.0", "result": null, "update": "20210411"}, "Panda": {"detected": false, "version": "4.6.4.2", "result": null, "update": "20210410"}, "Qihoo-360": {"detected": false, "version": "1.0.0.1120", "result": null, "update": "20210411"}}, "scan_id": "e274a08e39bb0509fee96e2cc7fd46235a9c6121c7f856c47bcb8d95d360f3be-1618117311", "sha1": "4afd7fa431026474e848628fa66b35478cd8093a", "resource": "c4656d42020ca421ffd67b867c2c0ea8", "response_code": 1, "scan_date": "2021-04-11 05:01:51", "permalink": "https://www.virustotal.com/gui/file/e274a08e39bb0509fee96e2cc7fd46235a9c6121c7f856c47bcb8d95d360f3be/detection/f-e274a08e39bb0509fee96e2cc7fd46235a9c6121c7f856c47bcb8d95d360f3be-1618117311", "verbose_msg": "Scan finished, information embedded", "total": 58, "positives": 0, "sha256": "e274a08e39bb0509fee96e2cc7fd46235a9c6121c7f856c47bcb8d95d360f3be", "md5": "c4656d42020ca421ffd67b867c2c0ea8"}, "base_url": "file:///home/budi/mobileApps/analiticTools/Mobile-Security-Framework-MobSF/mobsf", "dwd_dir": "file:///home/budi/.MobSF/downloads/", "host_os": "nix", "timestamp": "2021-04-08T08:22:55.955Z"}